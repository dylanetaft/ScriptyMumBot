// Generated by the gRPC protobuf plugin.
// If you make any local change, they will be lost.
// source: MumBot.proto

#include "MumBot.pb.h"
#include "MumBot.grpc.pb.h"

#include <grpc++/impl/codegen/async_stream.h>
#include <grpc++/impl/codegen/async_unary_call.h>
#include <grpc++/impl/codegen/channel_interface.h>
#include <grpc++/impl/codegen/client_unary_call.h>
#include <grpc++/impl/codegen/method_handler_impl.h>
#include <grpc++/impl/codegen/rpc_service_method.h>
#include <grpc++/impl/codegen/service_type.h>
#include <grpc++/impl/codegen/sync_stream.h>
namespace libmumbot {
namespace protobuf {

static const char* MumBotRPC_method_names[] = {
  "/libmumbot.protobuf.MumBotRPC/Say",
  "/libmumbot.protobuf.MumBotRPC/SubscribeToTextMessages",
};

std::unique_ptr< MumBotRPC::Stub> MumBotRPC::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  std::unique_ptr< MumBotRPC::Stub> stub(new MumBotRPC::Stub(channel));
  return stub;
}

MumBotRPC::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_Say_(MumBotRPC_method_names[0], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SubscribeToTextMessages_(MumBotRPC_method_names[1], ::grpc::RpcMethod::SERVER_STREAMING, channel)
  {}

::grpc::Status MumBotRPC::Stub::Say(::grpc::ClientContext* context, const ::libmumbot::protobuf::TextMessage& request, ::libmumbot::protobuf::TextMessageResponse* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_Say_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::libmumbot::protobuf::TextMessageResponse>* MumBotRPC::Stub::AsyncSayRaw(::grpc::ClientContext* context, const ::libmumbot::protobuf::TextMessage& request, ::grpc::CompletionQueue* cq) {
  return new ::grpc::ClientAsyncResponseReader< ::libmumbot::protobuf::TextMessageResponse>(channel_.get(), cq, rpcmethod_Say_, context, request);
}

::grpc::ClientReader< ::libmumbot::protobuf::TextMessage>* MumBotRPC::Stub::SubscribeToTextMessagesRaw(::grpc::ClientContext* context, const ::libmumbot::protobuf::TextMessageRequest& request) {
  return new ::grpc::ClientReader< ::libmumbot::protobuf::TextMessage>(channel_.get(), rpcmethod_SubscribeToTextMessages_, context, request);
}

::grpc::ClientAsyncReader< ::libmumbot::protobuf::TextMessage>* MumBotRPC::Stub::AsyncSubscribeToTextMessagesRaw(::grpc::ClientContext* context, const ::libmumbot::protobuf::TextMessageRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
  return new ::grpc::ClientAsyncReader< ::libmumbot::protobuf::TextMessage>(channel_.get(), cq, rpcmethod_SubscribeToTextMessages_, context, request, tag);
}

MumBotRPC::Service::Service() {
  (void)MumBotRPC_method_names;
  AddMethod(new ::grpc::RpcServiceMethod(
      MumBotRPC_method_names[0],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< MumBotRPC::Service, ::libmumbot::protobuf::TextMessage, ::libmumbot::protobuf::TextMessageResponse>(
          std::mem_fn(&MumBotRPC::Service::Say), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      MumBotRPC_method_names[1],
      ::grpc::RpcMethod::SERVER_STREAMING,
      new ::grpc::ServerStreamingHandler< MumBotRPC::Service, ::libmumbot::protobuf::TextMessageRequest, ::libmumbot::protobuf::TextMessage>(
          std::mem_fn(&MumBotRPC::Service::SubscribeToTextMessages), this)));
}

MumBotRPC::Service::~Service() {
}

::grpc::Status MumBotRPC::Service::Say(::grpc::ServerContext* context, const ::libmumbot::protobuf::TextMessage* request, ::libmumbot::protobuf::TextMessageResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MumBotRPC::Service::SubscribeToTextMessages(::grpc::ServerContext* context, const ::libmumbot::protobuf::TextMessageRequest* request, ::grpc::ServerWriter< ::libmumbot::protobuf::TextMessage>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace libmumbot
}  // namespace protobuf

