// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Mumble.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "Mumble.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace MumbleProto {

namespace {

const ::google::protobuf::Descriptor* Version_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Version_reflection_ = NULL;
const ::google::protobuf::Descriptor* UDPTunnel_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UDPTunnel_reflection_ = NULL;
const ::google::protobuf::Descriptor* Authenticate_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Authenticate_reflection_ = NULL;
const ::google::protobuf::Descriptor* Ping_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Ping_reflection_ = NULL;
const ::google::protobuf::Descriptor* Reject_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Reject_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Reject_RejectType_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ServerSync_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ServerSync_reflection_ = NULL;
const ::google::protobuf::Descriptor* ChannelRemove_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ChannelRemove_reflection_ = NULL;
const ::google::protobuf::Descriptor* ChannelState_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ChannelState_reflection_ = NULL;
const ::google::protobuf::Descriptor* UserRemove_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UserRemove_reflection_ = NULL;
const ::google::protobuf::Descriptor* UserState_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UserState_reflection_ = NULL;
const ::google::protobuf::Descriptor* BanList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BanList_reflection_ = NULL;
const ::google::protobuf::Descriptor* BanList_BanEntry_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BanList_BanEntry_reflection_ = NULL;
const ::google::protobuf::Descriptor* TextMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TextMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* PermissionDenied_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PermissionDenied_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* PermissionDenied_DenyType_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ACL_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ACL_reflection_ = NULL;
const ::google::protobuf::Descriptor* ACL_ChanGroup_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ACL_ChanGroup_reflection_ = NULL;
const ::google::protobuf::Descriptor* ACL_ChanACL_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ACL_ChanACL_reflection_ = NULL;
const ::google::protobuf::Descriptor* QueryUsers_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  QueryUsers_reflection_ = NULL;
const ::google::protobuf::Descriptor* CryptSetup_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CryptSetup_reflection_ = NULL;
const ::google::protobuf::Descriptor* ContextActionModify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ContextActionModify_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ContextActionModify_Context_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ContextActionModify_Operation_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ContextAction_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ContextAction_reflection_ = NULL;
const ::google::protobuf::Descriptor* UserList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UserList_reflection_ = NULL;
const ::google::protobuf::Descriptor* UserList_User_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UserList_User_reflection_ = NULL;
const ::google::protobuf::Descriptor* VoiceTarget_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  VoiceTarget_reflection_ = NULL;
const ::google::protobuf::Descriptor* VoiceTarget_Target_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  VoiceTarget_Target_reflection_ = NULL;
const ::google::protobuf::Descriptor* PermissionQuery_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PermissionQuery_reflection_ = NULL;
const ::google::protobuf::Descriptor* CodecVersion_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CodecVersion_reflection_ = NULL;
const ::google::protobuf::Descriptor* UserStats_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UserStats_reflection_ = NULL;
const ::google::protobuf::Descriptor* UserStats_Stats_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UserStats_Stats_reflection_ = NULL;
const ::google::protobuf::Descriptor* RequestBlob_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RequestBlob_reflection_ = NULL;
const ::google::protobuf::Descriptor* ServerConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ServerConfig_reflection_ = NULL;
const ::google::protobuf::Descriptor* SuggestConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SuggestConfig_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_Mumble_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_Mumble_2eproto() {
  protobuf_AddDesc_Mumble_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "Mumble.proto");
  GOOGLE_CHECK(file != NULL);
  Version_descriptor_ = file->message_type(0);
  static const int Version_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Version, version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Version, release_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Version, os_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Version, os_version_),
  };
  Version_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Version_descriptor_,
      Version::default_instance_,
      Version_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Version, _has_bits_[0]),
      -1,
      -1,
      sizeof(Version),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Version, _internal_metadata_),
      -1);
  UDPTunnel_descriptor_ = file->message_type(1);
  static const int UDPTunnel_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UDPTunnel, packet_),
  };
  UDPTunnel_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      UDPTunnel_descriptor_,
      UDPTunnel::default_instance_,
      UDPTunnel_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UDPTunnel, _has_bits_[0]),
      -1,
      -1,
      sizeof(UDPTunnel),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UDPTunnel, _internal_metadata_),
      -1);
  Authenticate_descriptor_ = file->message_type(2);
  static const int Authenticate_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Authenticate, username_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Authenticate, password_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Authenticate, tokens_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Authenticate, celt_versions_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Authenticate, opus_),
  };
  Authenticate_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Authenticate_descriptor_,
      Authenticate::default_instance_,
      Authenticate_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Authenticate, _has_bits_[0]),
      -1,
      -1,
      sizeof(Authenticate),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Authenticate, _internal_metadata_),
      -1);
  Ping_descriptor_ = file->message_type(3);
  static const int Ping_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ping, timestamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ping, good_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ping, late_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ping, lost_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ping, resync_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ping, udp_packets_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ping, tcp_packets_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ping, udp_ping_avg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ping, udp_ping_var_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ping, tcp_ping_avg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ping, tcp_ping_var_),
  };
  Ping_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Ping_descriptor_,
      Ping::default_instance_,
      Ping_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ping, _has_bits_[0]),
      -1,
      -1,
      sizeof(Ping),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ping, _internal_metadata_),
      -1);
  Reject_descriptor_ = file->message_type(4);
  static const int Reject_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Reject, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Reject, reason_),
  };
  Reject_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Reject_descriptor_,
      Reject::default_instance_,
      Reject_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Reject, _has_bits_[0]),
      -1,
      -1,
      sizeof(Reject),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Reject, _internal_metadata_),
      -1);
  Reject_RejectType_descriptor_ = Reject_descriptor_->enum_type(0);
  ServerSync_descriptor_ = file->message_type(5);
  static const int ServerSync_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerSync, session_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerSync, max_bandwidth_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerSync, welcome_text_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerSync, permissions_),
  };
  ServerSync_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ServerSync_descriptor_,
      ServerSync::default_instance_,
      ServerSync_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerSync, _has_bits_[0]),
      -1,
      -1,
      sizeof(ServerSync),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerSync, _internal_metadata_),
      -1);
  ChannelRemove_descriptor_ = file->message_type(6);
  static const int ChannelRemove_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChannelRemove, channel_id_),
  };
  ChannelRemove_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ChannelRemove_descriptor_,
      ChannelRemove::default_instance_,
      ChannelRemove_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChannelRemove, _has_bits_[0]),
      -1,
      -1,
      sizeof(ChannelRemove),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChannelRemove, _internal_metadata_),
      -1);
  ChannelState_descriptor_ = file->message_type(7);
  static const int ChannelState_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChannelState, channel_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChannelState, parent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChannelState, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChannelState, links_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChannelState, description_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChannelState, links_add_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChannelState, links_remove_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChannelState, temporary_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChannelState, position_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChannelState, description_hash_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChannelState, max_users_),
  };
  ChannelState_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ChannelState_descriptor_,
      ChannelState::default_instance_,
      ChannelState_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChannelState, _has_bits_[0]),
      -1,
      -1,
      sizeof(ChannelState),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChannelState, _internal_metadata_),
      -1);
  UserRemove_descriptor_ = file->message_type(8);
  static const int UserRemove_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserRemove, session_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserRemove, actor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserRemove, reason_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserRemove, ban_),
  };
  UserRemove_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      UserRemove_descriptor_,
      UserRemove::default_instance_,
      UserRemove_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserRemove, _has_bits_[0]),
      -1,
      -1,
      sizeof(UserRemove),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserRemove, _internal_metadata_),
      -1);
  UserState_descriptor_ = file->message_type(9);
  static const int UserState_offsets_[19] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserState, session_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserState, actor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserState, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserState, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserState, channel_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserState, mute_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserState, deaf_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserState, suppress_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserState, self_mute_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserState, self_deaf_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserState, texture_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserState, plugin_context_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserState, plugin_identity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserState, comment_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserState, hash_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserState, comment_hash_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserState, texture_hash_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserState, priority_speaker_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserState, recording_),
  };
  UserState_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      UserState_descriptor_,
      UserState::default_instance_,
      UserState_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserState, _has_bits_[0]),
      -1,
      -1,
      sizeof(UserState),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserState, _internal_metadata_),
      -1);
  BanList_descriptor_ = file->message_type(10);
  static const int BanList_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BanList, bans_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BanList, query_),
  };
  BanList_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      BanList_descriptor_,
      BanList::default_instance_,
      BanList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BanList, _has_bits_[0]),
      -1,
      -1,
      sizeof(BanList),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BanList, _internal_metadata_),
      -1);
  BanList_BanEntry_descriptor_ = BanList_descriptor_->nested_type(0);
  static const int BanList_BanEntry_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BanList_BanEntry, address_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BanList_BanEntry, mask_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BanList_BanEntry, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BanList_BanEntry, hash_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BanList_BanEntry, reason_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BanList_BanEntry, start_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BanList_BanEntry, duration_),
  };
  BanList_BanEntry_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      BanList_BanEntry_descriptor_,
      BanList_BanEntry::default_instance_,
      BanList_BanEntry_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BanList_BanEntry, _has_bits_[0]),
      -1,
      -1,
      sizeof(BanList_BanEntry),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BanList_BanEntry, _internal_metadata_),
      -1);
  TextMessage_descriptor_ = file->message_type(11);
  static const int TextMessage_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TextMessage, actor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TextMessage, session_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TextMessage, channel_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TextMessage, tree_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TextMessage, message_),
  };
  TextMessage_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      TextMessage_descriptor_,
      TextMessage::default_instance_,
      TextMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TextMessage, _has_bits_[0]),
      -1,
      -1,
      sizeof(TextMessage),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TextMessage, _internal_metadata_),
      -1);
  PermissionDenied_descriptor_ = file->message_type(12);
  static const int PermissionDenied_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PermissionDenied, permission_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PermissionDenied, channel_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PermissionDenied, session_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PermissionDenied, reason_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PermissionDenied, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PermissionDenied, name_),
  };
  PermissionDenied_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      PermissionDenied_descriptor_,
      PermissionDenied::default_instance_,
      PermissionDenied_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PermissionDenied, _has_bits_[0]),
      -1,
      -1,
      sizeof(PermissionDenied),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PermissionDenied, _internal_metadata_),
      -1);
  PermissionDenied_DenyType_descriptor_ = PermissionDenied_descriptor_->enum_type(0);
  ACL_descriptor_ = file->message_type(13);
  static const int ACL_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ACL, channel_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ACL, inherit_acls_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ACL, groups_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ACL, acls_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ACL, query_),
  };
  ACL_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ACL_descriptor_,
      ACL::default_instance_,
      ACL_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ACL, _has_bits_[0]),
      -1,
      -1,
      sizeof(ACL),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ACL, _internal_metadata_),
      -1);
  ACL_ChanGroup_descriptor_ = ACL_descriptor_->nested_type(0);
  static const int ACL_ChanGroup_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ACL_ChanGroup, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ACL_ChanGroup, inherited_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ACL_ChanGroup, inherit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ACL_ChanGroup, inheritable_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ACL_ChanGroup, add_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ACL_ChanGroup, remove_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ACL_ChanGroup, inherited_members_),
  };
  ACL_ChanGroup_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ACL_ChanGroup_descriptor_,
      ACL_ChanGroup::default_instance_,
      ACL_ChanGroup_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ACL_ChanGroup, _has_bits_[0]),
      -1,
      -1,
      sizeof(ACL_ChanGroup),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ACL_ChanGroup, _internal_metadata_),
      -1);
  ACL_ChanACL_descriptor_ = ACL_descriptor_->nested_type(1);
  static const int ACL_ChanACL_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ACL_ChanACL, apply_here_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ACL_ChanACL, apply_subs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ACL_ChanACL, inherited_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ACL_ChanACL, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ACL_ChanACL, group_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ACL_ChanACL, grant_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ACL_ChanACL, deny_),
  };
  ACL_ChanACL_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ACL_ChanACL_descriptor_,
      ACL_ChanACL::default_instance_,
      ACL_ChanACL_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ACL_ChanACL, _has_bits_[0]),
      -1,
      -1,
      sizeof(ACL_ChanACL),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ACL_ChanACL, _internal_metadata_),
      -1);
  QueryUsers_descriptor_ = file->message_type(14);
  static const int QueryUsers_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryUsers, ids_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryUsers, names_),
  };
  QueryUsers_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      QueryUsers_descriptor_,
      QueryUsers::default_instance_,
      QueryUsers_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryUsers, _has_bits_[0]),
      -1,
      -1,
      sizeof(QueryUsers),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryUsers, _internal_metadata_),
      -1);
  CryptSetup_descriptor_ = file->message_type(15);
  static const int CryptSetup_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CryptSetup, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CryptSetup, client_nonce_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CryptSetup, server_nonce_),
  };
  CryptSetup_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CryptSetup_descriptor_,
      CryptSetup::default_instance_,
      CryptSetup_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CryptSetup, _has_bits_[0]),
      -1,
      -1,
      sizeof(CryptSetup),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CryptSetup, _internal_metadata_),
      -1);
  ContextActionModify_descriptor_ = file->message_type(16);
  static const int ContextActionModify_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContextActionModify, action_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContextActionModify, text_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContextActionModify, context_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContextActionModify, operation_),
  };
  ContextActionModify_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ContextActionModify_descriptor_,
      ContextActionModify::default_instance_,
      ContextActionModify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContextActionModify, _has_bits_[0]),
      -1,
      -1,
      sizeof(ContextActionModify),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContextActionModify, _internal_metadata_),
      -1);
  ContextActionModify_Context_descriptor_ = ContextActionModify_descriptor_->enum_type(0);
  ContextActionModify_Operation_descriptor_ = ContextActionModify_descriptor_->enum_type(1);
  ContextAction_descriptor_ = file->message_type(17);
  static const int ContextAction_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContextAction, session_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContextAction, channel_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContextAction, action_),
  };
  ContextAction_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ContextAction_descriptor_,
      ContextAction::default_instance_,
      ContextAction_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContextAction, _has_bits_[0]),
      -1,
      -1,
      sizeof(ContextAction),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContextAction, _internal_metadata_),
      -1);
  UserList_descriptor_ = file->message_type(18);
  static const int UserList_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserList, users_),
  };
  UserList_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      UserList_descriptor_,
      UserList::default_instance_,
      UserList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserList, _has_bits_[0]),
      -1,
      -1,
      sizeof(UserList),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserList, _internal_metadata_),
      -1);
  UserList_User_descriptor_ = UserList_descriptor_->nested_type(0);
  static const int UserList_User_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserList_User, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserList_User, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserList_User, last_seen_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserList_User, last_channel_),
  };
  UserList_User_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      UserList_User_descriptor_,
      UserList_User::default_instance_,
      UserList_User_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserList_User, _has_bits_[0]),
      -1,
      -1,
      sizeof(UserList_User),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserList_User, _internal_metadata_),
      -1);
  VoiceTarget_descriptor_ = file->message_type(19);
  static const int VoiceTarget_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoiceTarget, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoiceTarget, targets_),
  };
  VoiceTarget_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      VoiceTarget_descriptor_,
      VoiceTarget::default_instance_,
      VoiceTarget_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoiceTarget, _has_bits_[0]),
      -1,
      -1,
      sizeof(VoiceTarget),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoiceTarget, _internal_metadata_),
      -1);
  VoiceTarget_Target_descriptor_ = VoiceTarget_descriptor_->nested_type(0);
  static const int VoiceTarget_Target_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoiceTarget_Target, session_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoiceTarget_Target, channel_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoiceTarget_Target, group_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoiceTarget_Target, links_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoiceTarget_Target, children_),
  };
  VoiceTarget_Target_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      VoiceTarget_Target_descriptor_,
      VoiceTarget_Target::default_instance_,
      VoiceTarget_Target_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoiceTarget_Target, _has_bits_[0]),
      -1,
      -1,
      sizeof(VoiceTarget_Target),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoiceTarget_Target, _internal_metadata_),
      -1);
  PermissionQuery_descriptor_ = file->message_type(20);
  static const int PermissionQuery_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PermissionQuery, channel_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PermissionQuery, permissions_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PermissionQuery, flush_),
  };
  PermissionQuery_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      PermissionQuery_descriptor_,
      PermissionQuery::default_instance_,
      PermissionQuery_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PermissionQuery, _has_bits_[0]),
      -1,
      -1,
      sizeof(PermissionQuery),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PermissionQuery, _internal_metadata_),
      -1);
  CodecVersion_descriptor_ = file->message_type(21);
  static const int CodecVersion_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CodecVersion, alpha_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CodecVersion, beta_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CodecVersion, prefer_alpha_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CodecVersion, opus_),
  };
  CodecVersion_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CodecVersion_descriptor_,
      CodecVersion::default_instance_,
      CodecVersion_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CodecVersion, _has_bits_[0]),
      -1,
      -1,
      sizeof(CodecVersion),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CodecVersion, _internal_metadata_),
      -1);
  UserStats_descriptor_ = file->message_type(22);
  static const int UserStats_offsets_[19] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserStats, session_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserStats, stats_only_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserStats, certificates_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserStats, from_client_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserStats, from_server_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserStats, udp_packets_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserStats, tcp_packets_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserStats, udp_ping_avg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserStats, udp_ping_var_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserStats, tcp_ping_avg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserStats, tcp_ping_var_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserStats, version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserStats, celt_versions_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserStats, address_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserStats, bandwidth_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserStats, onlinesecs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserStats, idlesecs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserStats, strong_certificate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserStats, opus_),
  };
  UserStats_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      UserStats_descriptor_,
      UserStats::default_instance_,
      UserStats_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserStats, _has_bits_[0]),
      -1,
      -1,
      sizeof(UserStats),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserStats, _internal_metadata_),
      -1);
  UserStats_Stats_descriptor_ = UserStats_descriptor_->nested_type(0);
  static const int UserStats_Stats_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserStats_Stats, good_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserStats_Stats, late_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserStats_Stats, lost_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserStats_Stats, resync_),
  };
  UserStats_Stats_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      UserStats_Stats_descriptor_,
      UserStats_Stats::default_instance_,
      UserStats_Stats_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserStats_Stats, _has_bits_[0]),
      -1,
      -1,
      sizeof(UserStats_Stats),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserStats_Stats, _internal_metadata_),
      -1);
  RequestBlob_descriptor_ = file->message_type(23);
  static const int RequestBlob_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestBlob, session_texture_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestBlob, session_comment_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestBlob, channel_description_),
  };
  RequestBlob_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      RequestBlob_descriptor_,
      RequestBlob::default_instance_,
      RequestBlob_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestBlob, _has_bits_[0]),
      -1,
      -1,
      sizeof(RequestBlob),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestBlob, _internal_metadata_),
      -1);
  ServerConfig_descriptor_ = file->message_type(24);
  static const int ServerConfig_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerConfig, max_bandwidth_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerConfig, welcome_text_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerConfig, allow_html_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerConfig, message_length_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerConfig, image_message_length_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerConfig, max_users_),
  };
  ServerConfig_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ServerConfig_descriptor_,
      ServerConfig::default_instance_,
      ServerConfig_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerConfig, _has_bits_[0]),
      -1,
      -1,
      sizeof(ServerConfig),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerConfig, _internal_metadata_),
      -1);
  SuggestConfig_descriptor_ = file->message_type(25);
  static const int SuggestConfig_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SuggestConfig, version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SuggestConfig, positional_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SuggestConfig, push_to_talk_),
  };
  SuggestConfig_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      SuggestConfig_descriptor_,
      SuggestConfig::default_instance_,
      SuggestConfig_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SuggestConfig, _has_bits_[0]),
      -1,
      -1,
      sizeof(SuggestConfig),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SuggestConfig, _internal_metadata_),
      -1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_Mumble_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Version_descriptor_, &Version::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      UDPTunnel_descriptor_, &UDPTunnel::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Authenticate_descriptor_, &Authenticate::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Ping_descriptor_, &Ping::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Reject_descriptor_, &Reject::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ServerSync_descriptor_, &ServerSync::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ChannelRemove_descriptor_, &ChannelRemove::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ChannelState_descriptor_, &ChannelState::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      UserRemove_descriptor_, &UserRemove::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      UserState_descriptor_, &UserState::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      BanList_descriptor_, &BanList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      BanList_BanEntry_descriptor_, &BanList_BanEntry::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      TextMessage_descriptor_, &TextMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      PermissionDenied_descriptor_, &PermissionDenied::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ACL_descriptor_, &ACL::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ACL_ChanGroup_descriptor_, &ACL_ChanGroup::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ACL_ChanACL_descriptor_, &ACL_ChanACL::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      QueryUsers_descriptor_, &QueryUsers::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CryptSetup_descriptor_, &CryptSetup::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ContextActionModify_descriptor_, &ContextActionModify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ContextAction_descriptor_, &ContextAction::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      UserList_descriptor_, &UserList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      UserList_User_descriptor_, &UserList_User::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      VoiceTarget_descriptor_, &VoiceTarget::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      VoiceTarget_Target_descriptor_, &VoiceTarget_Target::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      PermissionQuery_descriptor_, &PermissionQuery::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CodecVersion_descriptor_, &CodecVersion::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      UserStats_descriptor_, &UserStats::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      UserStats_Stats_descriptor_, &UserStats_Stats::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      RequestBlob_descriptor_, &RequestBlob::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ServerConfig_descriptor_, &ServerConfig::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SuggestConfig_descriptor_, &SuggestConfig::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_Mumble_2eproto() {
  delete Version::default_instance_;
  delete Version_reflection_;
  delete UDPTunnel::default_instance_;
  delete UDPTunnel_reflection_;
  delete Authenticate::default_instance_;
  delete Authenticate_reflection_;
  delete Ping::default_instance_;
  delete Ping_reflection_;
  delete Reject::default_instance_;
  delete Reject_reflection_;
  delete ServerSync::default_instance_;
  delete ServerSync_reflection_;
  delete ChannelRemove::default_instance_;
  delete ChannelRemove_reflection_;
  delete ChannelState::default_instance_;
  delete ChannelState_reflection_;
  delete UserRemove::default_instance_;
  delete UserRemove_reflection_;
  delete UserState::default_instance_;
  delete UserState_reflection_;
  delete BanList::default_instance_;
  delete BanList_reflection_;
  delete BanList_BanEntry::default_instance_;
  delete BanList_BanEntry_reflection_;
  delete TextMessage::default_instance_;
  delete TextMessage_reflection_;
  delete PermissionDenied::default_instance_;
  delete PermissionDenied_reflection_;
  delete ACL::default_instance_;
  delete ACL_reflection_;
  delete ACL_ChanGroup::default_instance_;
  delete ACL_ChanGroup_reflection_;
  delete ACL_ChanACL::default_instance_;
  delete ACL_ChanACL_reflection_;
  delete QueryUsers::default_instance_;
  delete QueryUsers_reflection_;
  delete CryptSetup::default_instance_;
  delete CryptSetup_reflection_;
  delete ContextActionModify::default_instance_;
  delete ContextActionModify_reflection_;
  delete ContextAction::default_instance_;
  delete ContextAction_reflection_;
  delete UserList::default_instance_;
  delete UserList_reflection_;
  delete UserList_User::default_instance_;
  delete UserList_User_reflection_;
  delete VoiceTarget::default_instance_;
  delete VoiceTarget_reflection_;
  delete VoiceTarget_Target::default_instance_;
  delete VoiceTarget_Target_reflection_;
  delete PermissionQuery::default_instance_;
  delete PermissionQuery_reflection_;
  delete CodecVersion::default_instance_;
  delete CodecVersion_reflection_;
  delete UserStats::default_instance_;
  delete UserStats_reflection_;
  delete UserStats_Stats::default_instance_;
  delete UserStats_Stats_reflection_;
  delete RequestBlob::default_instance_;
  delete RequestBlob_reflection_;
  delete ServerConfig::default_instance_;
  delete ServerConfig_reflection_;
  delete SuggestConfig::default_instance_;
  delete SuggestConfig_reflection_;
}

void protobuf_AddDesc_Mumble_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_Mumble_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\014Mumble.proto\022\013MumbleProto\"K\n\007Version\022\017"
    "\n\007version\030\001 \001(\r\022\017\n\007release\030\002 \001(\t\022\n\n\002os\030\003"
    " \001(\t\022\022\n\nos_version\030\004 \001(\t\"\033\n\tUDPTunnel\022\016\n"
    "\006packet\030\001 \002(\014\"n\n\014Authenticate\022\020\n\010usernam"
    "e\030\001 \001(\t\022\020\n\010password\030\002 \001(\t\022\016\n\006tokens\030\003 \003("
    "\t\022\025\n\rcelt_versions\030\004 \003(\005\022\023\n\004opus\030\005 \001(\010:\005"
    "false\"\325\001\n\004Ping\022\021\n\ttimestamp\030\001 \001(\004\022\014\n\004goo"
    "d\030\002 \001(\r\022\014\n\004late\030\003 \001(\r\022\014\n\004lost\030\004 \001(\r\022\016\n\006r"
    "esync\030\005 \001(\r\022\023\n\013udp_packets\030\006 \001(\r\022\023\n\013tcp_"
    "packets\030\007 \001(\r\022\024\n\014udp_ping_avg\030\010 \001(\002\022\024\n\014u"
    "dp_ping_var\030\t \001(\002\022\024\n\014tcp_ping_avg\030\n \001(\002\022"
    "\024\n\014tcp_ping_var\030\013 \001(\002\"\367\001\n\006Reject\022,\n\004type"
    "\030\001 \001(\0162\036.MumbleProto.Reject.RejectType\022\016"
    "\n\006reason\030\002 \001(\t\"\256\001\n\nRejectType\022\010\n\004None\020\000\022"
    "\020\n\014WrongVersion\020\001\022\023\n\017InvalidUsername\020\002\022\017"
    "\n\013WrongUserPW\020\003\022\021\n\rWrongServerPW\020\004\022\021\n\rUs"
    "ernameInUse\020\005\022\016\n\nServerFull\020\006\022\021\n\rNoCerti"
    "ficate\020\007\022\025\n\021AuthenticatorFail\020\010\"_\n\nServe"
    "rSync\022\017\n\007session\030\001 \001(\r\022\025\n\rmax_bandwidth\030"
    "\002 \001(\r\022\024\n\014welcome_text\030\003 \001(\t\022\023\n\013permissio"
    "ns\030\004 \001(\004\"#\n\rChannelRemove\022\022\n\nchannel_id\030"
    "\001 \002(\r\"\351\001\n\014ChannelState\022\022\n\nchannel_id\030\001 \001"
    "(\r\022\016\n\006parent\030\002 \001(\r\022\014\n\004name\030\003 \001(\t\022\r\n\005link"
    "s\030\004 \003(\r\022\023\n\013description\030\005 \001(\t\022\021\n\tlinks_ad"
    "d\030\006 \003(\r\022\024\n\014links_remove\030\007 \003(\r\022\030\n\ttempora"
    "ry\030\010 \001(\010:\005false\022\023\n\010position\030\t \001(\005:\0010\022\030\n\020"
    "description_hash\030\n \001(\014\022\021\n\tmax_users\030\013 \001("
    "\r\"I\n\nUserRemove\022\017\n\007session\030\001 \002(\r\022\r\n\005acto"
    "r\030\002 \001(\r\022\016\n\006reason\030\003 \001(\t\022\013\n\003ban\030\004 \001(\010\"\354\002\n"
    "\tUserState\022\017\n\007session\030\001 \001(\r\022\r\n\005actor\030\002 \001"
    "(\r\022\014\n\004name\030\003 \001(\t\022\017\n\007user_id\030\004 \001(\r\022\022\n\ncha"
    "nnel_id\030\005 \001(\r\022\014\n\004mute\030\006 \001(\010\022\014\n\004deaf\030\007 \001("
    "\010\022\020\n\010suppress\030\010 \001(\010\022\021\n\tself_mute\030\t \001(\010\022\021"
    "\n\tself_deaf\030\n \001(\010\022\017\n\007texture\030\013 \001(\014\022\026\n\016pl"
    "ugin_context\030\014 \001(\014\022\027\n\017plugin_identity\030\r "
    "\001(\t\022\017\n\007comment\030\016 \001(\t\022\014\n\004hash\030\017 \001(\t\022\024\n\014co"
    "mment_hash\030\020 \001(\014\022\024\n\014texture_hash\030\021 \001(\014\022\030"
    "\n\020priority_speaker\030\022 \001(\010\022\021\n\trecording\030\023 "
    "\001(\010\"\304\001\n\007BanList\022+\n\004bans\030\001 \003(\0132\035.MumblePr"
    "oto.BanList.BanEntry\022\024\n\005query\030\002 \001(\010:\005fal"
    "se\032v\n\010BanEntry\022\017\n\007address\030\001 \002(\014\022\014\n\004mask\030"
    "\002 \002(\r\022\014\n\004name\030\003 \001(\t\022\014\n\004hash\030\004 \001(\t\022\016\n\006rea"
    "son\030\005 \001(\t\022\r\n\005start\030\006 \001(\t\022\020\n\010duration\030\007 \001"
    "(\r\"c\n\013TextMessage\022\r\n\005actor\030\001 \001(\r\022\017\n\007sess"
    "ion\030\002 \003(\r\022\022\n\nchannel_id\030\003 \003(\r\022\017\n\007tree_id"
    "\030\004 \003(\r\022\017\n\007message\030\005 \002(\t\"\337\002\n\020PermissionDe"
    "nied\022\022\n\npermission\030\001 \001(\r\022\022\n\nchannel_id\030\002"
    " \001(\r\022\017\n\007session\030\003 \001(\r\022\016\n\006reason\030\004 \001(\t\0224\n"
    "\004type\030\005 \001(\0162&.MumbleProto.PermissionDeni"
    "ed.DenyType\022\014\n\004name\030\006 \001(\t\"\275\001\n\010DenyType\022\010"
    "\n\004Text\020\000\022\016\n\nPermission\020\001\022\r\n\tSuperUser\020\002\022"
    "\017\n\013ChannelName\020\003\022\017\n\013TextTooLong\020\004\022\007\n\003H9K"
    "\020\005\022\024\n\020TemporaryChannel\020\006\022\026\n\022MissingCerti"
    "ficate\020\007\022\014\n\010UserName\020\010\022\017\n\013ChannelFull\020\t\022"
    "\020\n\014NestingLimit\020\n\"\324\003\n\003ACL\022\022\n\nchannel_id\030"
    "\001 \002(\r\022\032\n\014inherit_acls\030\002 \001(\010:\004true\022*\n\006gro"
    "ups\030\003 \003(\0132\032.MumbleProto.ACL.ChanGroup\022&\n"
    "\004acls\030\004 \003(\0132\030.MumbleProto.ACL.ChanACL\022\024\n"
    "\005query\030\005 \001(\010:\005false\032\234\001\n\tChanGroup\022\014\n\004nam"
    "e\030\001 \002(\t\022\027\n\tinherited\030\002 \001(\010:\004true\022\025\n\007inhe"
    "rit\030\003 \001(\010:\004true\022\031\n\013inheritable\030\004 \001(\010:\004tr"
    "ue\022\013\n\003add\030\005 \003(\r\022\016\n\006remove\030\006 \003(\r\022\031\n\021inher"
    "ited_members\030\007 \003(\r\032\223\001\n\007ChanACL\022\030\n\napply_"
    "here\030\001 \001(\010:\004true\022\030\n\napply_subs\030\002 \001(\010:\004tr"
    "ue\022\027\n\tinherited\030\003 \001(\010:\004true\022\017\n\007user_id\030\004"
    " \001(\r\022\r\n\005group\030\005 \001(\t\022\r\n\005grant\030\006 \001(\r\022\014\n\004de"
    "ny\030\007 \001(\r\"(\n\nQueryUsers\022\013\n\003ids\030\001 \003(\r\022\r\n\005n"
    "ames\030\002 \003(\t\"E\n\nCryptSetup\022\013\n\003key\030\001 \001(\014\022\024\n"
    "\014client_nonce\030\002 \001(\014\022\024\n\014server_nonce\030\003 \001("
    "\014\"\323\001\n\023ContextActionModify\022\016\n\006action\030\001 \002("
    "\t\022\014\n\004text\030\002 \001(\t\022\017\n\007context\030\003 \001(\r\022=\n\toper"
    "ation\030\004 \001(\0162*.MumbleProto.ContextActionM"
    "odify.Operation\",\n\007Context\022\n\n\006Server\020\001\022\013"
    "\n\007Channel\020\002\022\010\n\004User\020\004\" \n\tOperation\022\007\n\003Ad"
    "d\020\000\022\n\n\006Remove\020\001\"D\n\rContextAction\022\017\n\007sess"
    "ion\030\001 \001(\r\022\022\n\nchannel_id\030\002 \001(\r\022\016\n\006action\030"
    "\003 \002(\t\"\205\001\n\010UserList\022)\n\005users\030\001 \003(\0132\032.Mumb"
    "leProto.UserList.User\032N\n\004User\022\017\n\007user_id"
    "\030\001 \002(\r\022\014\n\004name\030\002 \001(\t\022\021\n\tlast_seen\030\003 \001(\t\022"
    "\024\n\014last_channel\030\004 \001(\r\"\270\001\n\013VoiceTarget\022\n\n"
    "\002id\030\001 \001(\r\0220\n\007targets\030\002 \003(\0132\037.MumbleProto"
    ".VoiceTarget.Target\032k\n\006Target\022\017\n\007session"
    "\030\001 \003(\r\022\022\n\nchannel_id\030\002 \001(\r\022\r\n\005group\030\003 \001("
    "\t\022\024\n\005links\030\004 \001(\010:\005false\022\027\n\010children\030\005 \001("
    "\010:\005false\"P\n\017PermissionQuery\022\022\n\nchannel_i"
    "d\030\001 \001(\r\022\023\n\013permissions\030\002 \001(\r\022\024\n\005flush\030\003 "
    "\001(\010:\005false\"\\\n\014CodecVersion\022\r\n\005alpha\030\001 \002("
    "\005\022\014\n\004beta\030\002 \002(\005\022\032\n\014prefer_alpha\030\003 \002(\010:\004t"
    "rue\022\023\n\004opus\030\004 \001(\010:\005false\"\270\004\n\tUserStats\022\017"
    "\n\007session\030\001 \001(\r\022\031\n\nstats_only\030\002 \001(\010:\005fal"
    "se\022\024\n\014certificates\030\003 \003(\014\0221\n\013from_client\030"
    "\004 \001(\0132\034.MumbleProto.UserStats.Stats\0221\n\013f"
    "rom_server\030\005 \001(\0132\034.MumbleProto.UserStats"
    ".Stats\022\023\n\013udp_packets\030\006 \001(\r\022\023\n\013tcp_packe"
    "ts\030\007 \001(\r\022\024\n\014udp_ping_avg\030\010 \001(\002\022\024\n\014udp_pi"
    "ng_var\030\t \001(\002\022\024\n\014tcp_ping_avg\030\n \001(\002\022\024\n\014tc"
    "p_ping_var\030\013 \001(\002\022%\n\007version\030\014 \001(\0132\024.Mumb"
    "leProto.Version\022\025\n\rcelt_versions\030\r \003(\005\022\017"
    "\n\007address\030\016 \001(\014\022\021\n\tbandwidth\030\017 \001(\r\022\022\n\non"
    "linesecs\030\020 \001(\r\022\020\n\010idlesecs\030\021 \001(\r\022!\n\022stro"
    "ng_certificate\030\022 \001(\010:\005false\022\023\n\004opus\030\023 \001("
    "\010:\005false\032A\n\005Stats\022\014\n\004good\030\001 \001(\r\022\014\n\004late\030"
    "\002 \001(\r\022\014\n\004lost\030\003 \001(\r\022\016\n\006resync\030\004 \001(\r\"\\\n\013R"
    "equestBlob\022\027\n\017session_texture\030\001 \003(\r\022\027\n\017s"
    "ession_comment\030\002 \003(\r\022\033\n\023channel_descript"
    "ion\030\003 \003(\r\"\230\001\n\014ServerConfig\022\025\n\rmax_bandwi"
    "dth\030\001 \001(\r\022\024\n\014welcome_text\030\002 \001(\t\022\022\n\nallow"
    "_html\030\003 \001(\010\022\026\n\016message_length\030\004 \001(\r\022\034\n\024i"
    "mage_message_length\030\005 \001(\r\022\021\n\tmax_users\030\006"
    " \001(\r\"J\n\rSuggestConfig\022\017\n\007version\030\001 \001(\r\022\022"
    "\n\npositional\030\002 \001(\010\022\024\n\014push_to_talk\030\003 \001(\010"
    "B\002H\001", 4444);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "Mumble.proto", &protobuf_RegisterTypes);
  Version::default_instance_ = new Version();
  UDPTunnel::default_instance_ = new UDPTunnel();
  Authenticate::default_instance_ = new Authenticate();
  Ping::default_instance_ = new Ping();
  Reject::default_instance_ = new Reject();
  ServerSync::default_instance_ = new ServerSync();
  ChannelRemove::default_instance_ = new ChannelRemove();
  ChannelState::default_instance_ = new ChannelState();
  UserRemove::default_instance_ = new UserRemove();
  UserState::default_instance_ = new UserState();
  BanList::default_instance_ = new BanList();
  BanList_BanEntry::default_instance_ = new BanList_BanEntry();
  TextMessage::default_instance_ = new TextMessage();
  PermissionDenied::default_instance_ = new PermissionDenied();
  ACL::default_instance_ = new ACL();
  ACL_ChanGroup::default_instance_ = new ACL_ChanGroup();
  ACL_ChanACL::default_instance_ = new ACL_ChanACL();
  QueryUsers::default_instance_ = new QueryUsers();
  CryptSetup::default_instance_ = new CryptSetup();
  ContextActionModify::default_instance_ = new ContextActionModify();
  ContextAction::default_instance_ = new ContextAction();
  UserList::default_instance_ = new UserList();
  UserList_User::default_instance_ = new UserList_User();
  VoiceTarget::default_instance_ = new VoiceTarget();
  VoiceTarget_Target::default_instance_ = new VoiceTarget_Target();
  PermissionQuery::default_instance_ = new PermissionQuery();
  CodecVersion::default_instance_ = new CodecVersion();
  UserStats::default_instance_ = new UserStats();
  UserStats_Stats::default_instance_ = new UserStats_Stats();
  RequestBlob::default_instance_ = new RequestBlob();
  ServerConfig::default_instance_ = new ServerConfig();
  SuggestConfig::default_instance_ = new SuggestConfig();
  Version::default_instance_->InitAsDefaultInstance();
  UDPTunnel::default_instance_->InitAsDefaultInstance();
  Authenticate::default_instance_->InitAsDefaultInstance();
  Ping::default_instance_->InitAsDefaultInstance();
  Reject::default_instance_->InitAsDefaultInstance();
  ServerSync::default_instance_->InitAsDefaultInstance();
  ChannelRemove::default_instance_->InitAsDefaultInstance();
  ChannelState::default_instance_->InitAsDefaultInstance();
  UserRemove::default_instance_->InitAsDefaultInstance();
  UserState::default_instance_->InitAsDefaultInstance();
  BanList::default_instance_->InitAsDefaultInstance();
  BanList_BanEntry::default_instance_->InitAsDefaultInstance();
  TextMessage::default_instance_->InitAsDefaultInstance();
  PermissionDenied::default_instance_->InitAsDefaultInstance();
  ACL::default_instance_->InitAsDefaultInstance();
  ACL_ChanGroup::default_instance_->InitAsDefaultInstance();
  ACL_ChanACL::default_instance_->InitAsDefaultInstance();
  QueryUsers::default_instance_->InitAsDefaultInstance();
  CryptSetup::default_instance_->InitAsDefaultInstance();
  ContextActionModify::default_instance_->InitAsDefaultInstance();
  ContextAction::default_instance_->InitAsDefaultInstance();
  UserList::default_instance_->InitAsDefaultInstance();
  UserList_User::default_instance_->InitAsDefaultInstance();
  VoiceTarget::default_instance_->InitAsDefaultInstance();
  VoiceTarget_Target::default_instance_->InitAsDefaultInstance();
  PermissionQuery::default_instance_->InitAsDefaultInstance();
  CodecVersion::default_instance_->InitAsDefaultInstance();
  UserStats::default_instance_->InitAsDefaultInstance();
  UserStats_Stats::default_instance_->InitAsDefaultInstance();
  RequestBlob::default_instance_->InitAsDefaultInstance();
  ServerConfig::default_instance_->InitAsDefaultInstance();
  SuggestConfig::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_Mumble_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_Mumble_2eproto {
  StaticDescriptorInitializer_Mumble_2eproto() {
    protobuf_AddDesc_Mumble_2eproto();
  }
} static_descriptor_initializer_Mumble_2eproto_;

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Version::kVersionFieldNumber;
const int Version::kReleaseFieldNumber;
const int Version::kOsFieldNumber;
const int Version::kOsVersionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Version::Version()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MumbleProto.Version)
}

void Version::InitAsDefaultInstance() {
}

Version::Version(const Version& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MumbleProto.Version)
}

void Version::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  version_ = 0u;
  release_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  os_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  os_version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Version::~Version() {
  // @@protoc_insertion_point(destructor:MumbleProto.Version)
  SharedDtor();
}

void Version::SharedDtor() {
  release_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  os_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  os_version_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void Version::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Version::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Version_descriptor_;
}

const Version& Version::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Mumble_2eproto();
  return *default_instance_;
}

Version* Version::default_instance_ = NULL;

Version* Version::New(::google::protobuf::Arena* arena) const {
  Version* n = new Version;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Version::Clear() {
// @@protoc_insertion_point(message_clear_start:MumbleProto.Version)
  if (_has_bits_[0 / 32] & 15u) {
    version_ = 0u;
    if (has_release()) {
      release_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_os()) {
      os_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_os_version()) {
      os_version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Version::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MumbleProto.Version)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 version = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &version_)));
          set_has_version();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_release;
        break;
      }

      // optional string release = 2;
      case 2: {
        if (tag == 18) {
         parse_release:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_release()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->release().data(), this->release().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "MumbleProto.Version.release");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_os;
        break;
      }

      // optional string os = 3;
      case 3: {
        if (tag == 26) {
         parse_os:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_os()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->os().data(), this->os().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "MumbleProto.Version.os");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_os_version;
        break;
      }

      // optional string os_version = 4;
      case 4: {
        if (tag == 34) {
         parse_os_version:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_os_version()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->os_version().data(), this->os_version().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "MumbleProto.Version.os_version");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MumbleProto.Version)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MumbleProto.Version)
  return false;
#undef DO_
}

void Version::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MumbleProto.Version)
  // optional uint32 version = 1;
  if (has_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->version(), output);
  }

  // optional string release = 2;
  if (has_release()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->release().data(), this->release().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "MumbleProto.Version.release");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->release(), output);
  }

  // optional string os = 3;
  if (has_os()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->os().data(), this->os().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "MumbleProto.Version.os");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->os(), output);
  }

  // optional string os_version = 4;
  if (has_os_version()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->os_version().data(), this->os_version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "MumbleProto.Version.os_version");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->os_version(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MumbleProto.Version)
}

::google::protobuf::uint8* Version::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MumbleProto.Version)
  // optional uint32 version = 1;
  if (has_version()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->version(), target);
  }

  // optional string release = 2;
  if (has_release()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->release().data(), this->release().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "MumbleProto.Version.release");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->release(), target);
  }

  // optional string os = 3;
  if (has_os()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->os().data(), this->os().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "MumbleProto.Version.os");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->os(), target);
  }

  // optional string os_version = 4;
  if (has_os_version()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->os_version().data(), this->os_version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "MumbleProto.Version.os_version");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->os_version(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MumbleProto.Version)
  return target;
}

int Version::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:MumbleProto.Version)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 15u) {
    // optional uint32 version = 1;
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->version());
    }

    // optional string release = 2;
    if (has_release()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->release());
    }

    // optional string os = 3;
    if (has_os()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->os());
    }

    // optional string os_version = 4;
    if (has_os_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->os_version());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Version::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MumbleProto.Version)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Version* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Version>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MumbleProto.Version)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MumbleProto.Version)
    MergeFrom(*source);
  }
}

void Version::MergeFrom(const Version& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MumbleProto.Version)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_version()) {
      set_version(from.version());
    }
    if (from.has_release()) {
      set_has_release();
      release_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.release_);
    }
    if (from.has_os()) {
      set_has_os();
      os_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.os_);
    }
    if (from.has_os_version()) {
      set_has_os_version();
      os_version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.os_version_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void Version::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MumbleProto.Version)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Version::CopyFrom(const Version& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MumbleProto.Version)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Version::IsInitialized() const {

  return true;
}

void Version::Swap(Version* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Version::InternalSwap(Version* other) {
  std::swap(version_, other->version_);
  release_.Swap(&other->release_);
  os_.Swap(&other->os_);
  os_version_.Swap(&other->os_version_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Version::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Version_descriptor_;
  metadata.reflection = Version_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Version

// optional uint32 version = 1;
bool Version::has_version() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Version::set_has_version() {
  _has_bits_[0] |= 0x00000001u;
}
void Version::clear_has_version() {
  _has_bits_[0] &= ~0x00000001u;
}
void Version::clear_version() {
  version_ = 0u;
  clear_has_version();
}
 ::google::protobuf::uint32 Version::version() const {
  // @@protoc_insertion_point(field_get:MumbleProto.Version.version)
  return version_;
}
 void Version::set_version(::google::protobuf::uint32 value) {
  set_has_version();
  version_ = value;
  // @@protoc_insertion_point(field_set:MumbleProto.Version.version)
}

// optional string release = 2;
bool Version::has_release() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Version::set_has_release() {
  _has_bits_[0] |= 0x00000002u;
}
void Version::clear_has_release() {
  _has_bits_[0] &= ~0x00000002u;
}
void Version::clear_release() {
  release_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_release();
}
 const ::std::string& Version::release() const {
  // @@protoc_insertion_point(field_get:MumbleProto.Version.release)
  return release_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Version::set_release(const ::std::string& value) {
  set_has_release();
  release_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:MumbleProto.Version.release)
}
 void Version::set_release(const char* value) {
  set_has_release();
  release_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:MumbleProto.Version.release)
}
 void Version::set_release(const char* value, size_t size) {
  set_has_release();
  release_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:MumbleProto.Version.release)
}
 ::std::string* Version::mutable_release() {
  set_has_release();
  // @@protoc_insertion_point(field_mutable:MumbleProto.Version.release)
  return release_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Version::release_release() {
  // @@protoc_insertion_point(field_release:MumbleProto.Version.release)
  clear_has_release();
  return release_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Version::set_allocated_release(::std::string* release) {
  if (release != NULL) {
    set_has_release();
  } else {
    clear_has_release();
  }
  release_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), release);
  // @@protoc_insertion_point(field_set_allocated:MumbleProto.Version.release)
}

// optional string os = 3;
bool Version::has_os() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Version::set_has_os() {
  _has_bits_[0] |= 0x00000004u;
}
void Version::clear_has_os() {
  _has_bits_[0] &= ~0x00000004u;
}
void Version::clear_os() {
  os_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_os();
}
 const ::std::string& Version::os() const {
  // @@protoc_insertion_point(field_get:MumbleProto.Version.os)
  return os_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Version::set_os(const ::std::string& value) {
  set_has_os();
  os_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:MumbleProto.Version.os)
}
 void Version::set_os(const char* value) {
  set_has_os();
  os_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:MumbleProto.Version.os)
}
 void Version::set_os(const char* value, size_t size) {
  set_has_os();
  os_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:MumbleProto.Version.os)
}
 ::std::string* Version::mutable_os() {
  set_has_os();
  // @@protoc_insertion_point(field_mutable:MumbleProto.Version.os)
  return os_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Version::release_os() {
  // @@protoc_insertion_point(field_release:MumbleProto.Version.os)
  clear_has_os();
  return os_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Version::set_allocated_os(::std::string* os) {
  if (os != NULL) {
    set_has_os();
  } else {
    clear_has_os();
  }
  os_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), os);
  // @@protoc_insertion_point(field_set_allocated:MumbleProto.Version.os)
}

// optional string os_version = 4;
bool Version::has_os_version() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void Version::set_has_os_version() {
  _has_bits_[0] |= 0x00000008u;
}
void Version::clear_has_os_version() {
  _has_bits_[0] &= ~0x00000008u;
}
void Version::clear_os_version() {
  os_version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_os_version();
}
 const ::std::string& Version::os_version() const {
  // @@protoc_insertion_point(field_get:MumbleProto.Version.os_version)
  return os_version_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Version::set_os_version(const ::std::string& value) {
  set_has_os_version();
  os_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:MumbleProto.Version.os_version)
}
 void Version::set_os_version(const char* value) {
  set_has_os_version();
  os_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:MumbleProto.Version.os_version)
}
 void Version::set_os_version(const char* value, size_t size) {
  set_has_os_version();
  os_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:MumbleProto.Version.os_version)
}
 ::std::string* Version::mutable_os_version() {
  set_has_os_version();
  // @@protoc_insertion_point(field_mutable:MumbleProto.Version.os_version)
  return os_version_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Version::release_os_version() {
  // @@protoc_insertion_point(field_release:MumbleProto.Version.os_version)
  clear_has_os_version();
  return os_version_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Version::set_allocated_os_version(::std::string* os_version) {
  if (os_version != NULL) {
    set_has_os_version();
  } else {
    clear_has_os_version();
  }
  os_version_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), os_version);
  // @@protoc_insertion_point(field_set_allocated:MumbleProto.Version.os_version)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UDPTunnel::kPacketFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UDPTunnel::UDPTunnel()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MumbleProto.UDPTunnel)
}

void UDPTunnel::InitAsDefaultInstance() {
}

UDPTunnel::UDPTunnel(const UDPTunnel& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MumbleProto.UDPTunnel)
}

void UDPTunnel::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  packet_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UDPTunnel::~UDPTunnel() {
  // @@protoc_insertion_point(destructor:MumbleProto.UDPTunnel)
  SharedDtor();
}

void UDPTunnel::SharedDtor() {
  packet_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void UDPTunnel::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UDPTunnel::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UDPTunnel_descriptor_;
}

const UDPTunnel& UDPTunnel::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Mumble_2eproto();
  return *default_instance_;
}

UDPTunnel* UDPTunnel::default_instance_ = NULL;

UDPTunnel* UDPTunnel::New(::google::protobuf::Arena* arena) const {
  UDPTunnel* n = new UDPTunnel;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void UDPTunnel::Clear() {
// @@protoc_insertion_point(message_clear_start:MumbleProto.UDPTunnel)
  if (has_packet()) {
    packet_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool UDPTunnel::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MumbleProto.UDPTunnel)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes packet = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_packet()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MumbleProto.UDPTunnel)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MumbleProto.UDPTunnel)
  return false;
#undef DO_
}

void UDPTunnel::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MumbleProto.UDPTunnel)
  // required bytes packet = 1;
  if (has_packet()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->packet(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MumbleProto.UDPTunnel)
}

::google::protobuf::uint8* UDPTunnel::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MumbleProto.UDPTunnel)
  // required bytes packet = 1;
  if (has_packet()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->packet(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MumbleProto.UDPTunnel)
  return target;
}

int UDPTunnel::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:MumbleProto.UDPTunnel)
  int total_size = 0;

  // required bytes packet = 1;
  if (has_packet()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->packet());
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UDPTunnel::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MumbleProto.UDPTunnel)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const UDPTunnel* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const UDPTunnel>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MumbleProto.UDPTunnel)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MumbleProto.UDPTunnel)
    MergeFrom(*source);
  }
}

void UDPTunnel::MergeFrom(const UDPTunnel& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MumbleProto.UDPTunnel)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet()) {
      set_has_packet();
      packet_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.packet_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void UDPTunnel::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MumbleProto.UDPTunnel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UDPTunnel::CopyFrom(const UDPTunnel& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MumbleProto.UDPTunnel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UDPTunnel::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void UDPTunnel::Swap(UDPTunnel* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UDPTunnel::InternalSwap(UDPTunnel* other) {
  packet_.Swap(&other->packet_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata UDPTunnel::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UDPTunnel_descriptor_;
  metadata.reflection = UDPTunnel_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// UDPTunnel

// required bytes packet = 1;
bool UDPTunnel::has_packet() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void UDPTunnel::set_has_packet() {
  _has_bits_[0] |= 0x00000001u;
}
void UDPTunnel::clear_has_packet() {
  _has_bits_[0] &= ~0x00000001u;
}
void UDPTunnel::clear_packet() {
  packet_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_packet();
}
 const ::std::string& UDPTunnel::packet() const {
  // @@protoc_insertion_point(field_get:MumbleProto.UDPTunnel.packet)
  return packet_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void UDPTunnel::set_packet(const ::std::string& value) {
  set_has_packet();
  packet_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:MumbleProto.UDPTunnel.packet)
}
 void UDPTunnel::set_packet(const char* value) {
  set_has_packet();
  packet_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:MumbleProto.UDPTunnel.packet)
}
 void UDPTunnel::set_packet(const void* value, size_t size) {
  set_has_packet();
  packet_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:MumbleProto.UDPTunnel.packet)
}
 ::std::string* UDPTunnel::mutable_packet() {
  set_has_packet();
  // @@protoc_insertion_point(field_mutable:MumbleProto.UDPTunnel.packet)
  return packet_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* UDPTunnel::release_packet() {
  // @@protoc_insertion_point(field_release:MumbleProto.UDPTunnel.packet)
  clear_has_packet();
  return packet_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void UDPTunnel::set_allocated_packet(::std::string* packet) {
  if (packet != NULL) {
    set_has_packet();
  } else {
    clear_has_packet();
  }
  packet_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), packet);
  // @@protoc_insertion_point(field_set_allocated:MumbleProto.UDPTunnel.packet)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Authenticate::kUsernameFieldNumber;
const int Authenticate::kPasswordFieldNumber;
const int Authenticate::kTokensFieldNumber;
const int Authenticate::kCeltVersionsFieldNumber;
const int Authenticate::kOpusFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Authenticate::Authenticate()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MumbleProto.Authenticate)
}

void Authenticate::InitAsDefaultInstance() {
}

Authenticate::Authenticate(const Authenticate& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MumbleProto.Authenticate)
}

void Authenticate::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  username_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  password_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  opus_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Authenticate::~Authenticate() {
  // @@protoc_insertion_point(destructor:MumbleProto.Authenticate)
  SharedDtor();
}

void Authenticate::SharedDtor() {
  username_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  password_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void Authenticate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Authenticate::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Authenticate_descriptor_;
}

const Authenticate& Authenticate::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Mumble_2eproto();
  return *default_instance_;
}

Authenticate* Authenticate::default_instance_ = NULL;

Authenticate* Authenticate::New(::google::protobuf::Arena* arena) const {
  Authenticate* n = new Authenticate;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Authenticate::Clear() {
// @@protoc_insertion_point(message_clear_start:MumbleProto.Authenticate)
  if (_has_bits_[0 / 32] & 19u) {
    if (has_username()) {
      username_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_password()) {
      password_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    opus_ = false;
  }
  tokens_.Clear();
  celt_versions_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Authenticate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MumbleProto.Authenticate)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string username = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_username()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->username().data(), this->username().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "MumbleProto.Authenticate.username");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_password;
        break;
      }

      // optional string password = 2;
      case 2: {
        if (tag == 18) {
         parse_password:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_password()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->password().data(), this->password().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "MumbleProto.Authenticate.password");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_tokens;
        break;
      }

      // repeated string tokens = 3;
      case 3: {
        if (tag == 26) {
         parse_tokens:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_tokens()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->tokens(this->tokens_size() - 1).data(),
            this->tokens(this->tokens_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "MumbleProto.Authenticate.tokens");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_tokens;
        if (input->ExpectTag(32)) goto parse_celt_versions;
        break;
      }

      // repeated int32 celt_versions = 4;
      case 4: {
        if (tag == 32) {
         parse_celt_versions:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 32, input, this->mutable_celt_versions())));
        } else if (tag == 34) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_celt_versions())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_celt_versions;
        if (input->ExpectTag(40)) goto parse_opus;
        break;
      }

      // optional bool opus = 5 [default = false];
      case 5: {
        if (tag == 40) {
         parse_opus:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &opus_)));
          set_has_opus();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MumbleProto.Authenticate)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MumbleProto.Authenticate)
  return false;
#undef DO_
}

void Authenticate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MumbleProto.Authenticate)
  // optional string username = 1;
  if (has_username()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->username().data(), this->username().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "MumbleProto.Authenticate.username");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->username(), output);
  }

  // optional string password = 2;
  if (has_password()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->password().data(), this->password().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "MumbleProto.Authenticate.password");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->password(), output);
  }

  // repeated string tokens = 3;
  for (int i = 0; i < this->tokens_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->tokens(i).data(), this->tokens(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "MumbleProto.Authenticate.tokens");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->tokens(i), output);
  }

  // repeated int32 celt_versions = 4;
  for (int i = 0; i < this->celt_versions_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      4, this->celt_versions(i), output);
  }

  // optional bool opus = 5 [default = false];
  if (has_opus()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->opus(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MumbleProto.Authenticate)
}

::google::protobuf::uint8* Authenticate::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MumbleProto.Authenticate)
  // optional string username = 1;
  if (has_username()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->username().data(), this->username().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "MumbleProto.Authenticate.username");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->username(), target);
  }

  // optional string password = 2;
  if (has_password()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->password().data(), this->password().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "MumbleProto.Authenticate.password");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->password(), target);
  }

  // repeated string tokens = 3;
  for (int i = 0; i < this->tokens_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->tokens(i).data(), this->tokens(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "MumbleProto.Authenticate.tokens");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(3, this->tokens(i), target);
  }

  // repeated int32 celt_versions = 4;
  for (int i = 0; i < this->celt_versions_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(4, this->celt_versions(i), target);
  }

  // optional bool opus = 5 [default = false];
  if (has_opus()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->opus(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MumbleProto.Authenticate)
  return target;
}

int Authenticate::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:MumbleProto.Authenticate)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 19u) {
    // optional string username = 1;
    if (has_username()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->username());
    }

    // optional string password = 2;
    if (has_password()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->password());
    }

    // optional bool opus = 5 [default = false];
    if (has_opus()) {
      total_size += 1 + 1;
    }

  }
  // repeated string tokens = 3;
  total_size += 1 * this->tokens_size();
  for (int i = 0; i < this->tokens_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->tokens(i));
  }

  // repeated int32 celt_versions = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->celt_versions_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->celt_versions(i));
    }
    total_size += 1 * this->celt_versions_size() + data_size;
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Authenticate::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MumbleProto.Authenticate)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Authenticate* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Authenticate>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MumbleProto.Authenticate)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MumbleProto.Authenticate)
    MergeFrom(*source);
  }
}

void Authenticate::MergeFrom(const Authenticate& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MumbleProto.Authenticate)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  tokens_.MergeFrom(from.tokens_);
  celt_versions_.MergeFrom(from.celt_versions_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_username()) {
      set_has_username();
      username_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.username_);
    }
    if (from.has_password()) {
      set_has_password();
      password_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.password_);
    }
    if (from.has_opus()) {
      set_opus(from.opus());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void Authenticate::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MumbleProto.Authenticate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Authenticate::CopyFrom(const Authenticate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MumbleProto.Authenticate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Authenticate::IsInitialized() const {

  return true;
}

void Authenticate::Swap(Authenticate* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Authenticate::InternalSwap(Authenticate* other) {
  username_.Swap(&other->username_);
  password_.Swap(&other->password_);
  tokens_.UnsafeArenaSwap(&other->tokens_);
  celt_versions_.UnsafeArenaSwap(&other->celt_versions_);
  std::swap(opus_, other->opus_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Authenticate::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Authenticate_descriptor_;
  metadata.reflection = Authenticate_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Authenticate

// optional string username = 1;
bool Authenticate::has_username() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Authenticate::set_has_username() {
  _has_bits_[0] |= 0x00000001u;
}
void Authenticate::clear_has_username() {
  _has_bits_[0] &= ~0x00000001u;
}
void Authenticate::clear_username() {
  username_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_username();
}
 const ::std::string& Authenticate::username() const {
  // @@protoc_insertion_point(field_get:MumbleProto.Authenticate.username)
  return username_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Authenticate::set_username(const ::std::string& value) {
  set_has_username();
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:MumbleProto.Authenticate.username)
}
 void Authenticate::set_username(const char* value) {
  set_has_username();
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:MumbleProto.Authenticate.username)
}
 void Authenticate::set_username(const char* value, size_t size) {
  set_has_username();
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:MumbleProto.Authenticate.username)
}
 ::std::string* Authenticate::mutable_username() {
  set_has_username();
  // @@protoc_insertion_point(field_mutable:MumbleProto.Authenticate.username)
  return username_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Authenticate::release_username() {
  // @@protoc_insertion_point(field_release:MumbleProto.Authenticate.username)
  clear_has_username();
  return username_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Authenticate::set_allocated_username(::std::string* username) {
  if (username != NULL) {
    set_has_username();
  } else {
    clear_has_username();
  }
  username_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), username);
  // @@protoc_insertion_point(field_set_allocated:MumbleProto.Authenticate.username)
}

// optional string password = 2;
bool Authenticate::has_password() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Authenticate::set_has_password() {
  _has_bits_[0] |= 0x00000002u;
}
void Authenticate::clear_has_password() {
  _has_bits_[0] &= ~0x00000002u;
}
void Authenticate::clear_password() {
  password_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_password();
}
 const ::std::string& Authenticate::password() const {
  // @@protoc_insertion_point(field_get:MumbleProto.Authenticate.password)
  return password_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Authenticate::set_password(const ::std::string& value) {
  set_has_password();
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:MumbleProto.Authenticate.password)
}
 void Authenticate::set_password(const char* value) {
  set_has_password();
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:MumbleProto.Authenticate.password)
}
 void Authenticate::set_password(const char* value, size_t size) {
  set_has_password();
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:MumbleProto.Authenticate.password)
}
 ::std::string* Authenticate::mutable_password() {
  set_has_password();
  // @@protoc_insertion_point(field_mutable:MumbleProto.Authenticate.password)
  return password_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Authenticate::release_password() {
  // @@protoc_insertion_point(field_release:MumbleProto.Authenticate.password)
  clear_has_password();
  return password_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Authenticate::set_allocated_password(::std::string* password) {
  if (password != NULL) {
    set_has_password();
  } else {
    clear_has_password();
  }
  password_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), password);
  // @@protoc_insertion_point(field_set_allocated:MumbleProto.Authenticate.password)
}

// repeated string tokens = 3;
int Authenticate::tokens_size() const {
  return tokens_.size();
}
void Authenticate::clear_tokens() {
  tokens_.Clear();
}
 const ::std::string& Authenticate::tokens(int index) const {
  // @@protoc_insertion_point(field_get:MumbleProto.Authenticate.tokens)
  return tokens_.Get(index);
}
 ::std::string* Authenticate::mutable_tokens(int index) {
  // @@protoc_insertion_point(field_mutable:MumbleProto.Authenticate.tokens)
  return tokens_.Mutable(index);
}
 void Authenticate::set_tokens(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:MumbleProto.Authenticate.tokens)
  tokens_.Mutable(index)->assign(value);
}
 void Authenticate::set_tokens(int index, const char* value) {
  tokens_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:MumbleProto.Authenticate.tokens)
}
 void Authenticate::set_tokens(int index, const char* value, size_t size) {
  tokens_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:MumbleProto.Authenticate.tokens)
}
 ::std::string* Authenticate::add_tokens() {
  // @@protoc_insertion_point(field_add_mutable:MumbleProto.Authenticate.tokens)
  return tokens_.Add();
}
 void Authenticate::add_tokens(const ::std::string& value) {
  tokens_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:MumbleProto.Authenticate.tokens)
}
 void Authenticate::add_tokens(const char* value) {
  tokens_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:MumbleProto.Authenticate.tokens)
}
 void Authenticate::add_tokens(const char* value, size_t size) {
  tokens_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:MumbleProto.Authenticate.tokens)
}
 const ::google::protobuf::RepeatedPtrField< ::std::string>&
Authenticate::tokens() const {
  // @@protoc_insertion_point(field_list:MumbleProto.Authenticate.tokens)
  return tokens_;
}
 ::google::protobuf::RepeatedPtrField< ::std::string>*
Authenticate::mutable_tokens() {
  // @@protoc_insertion_point(field_mutable_list:MumbleProto.Authenticate.tokens)
  return &tokens_;
}

// repeated int32 celt_versions = 4;
int Authenticate::celt_versions_size() const {
  return celt_versions_.size();
}
void Authenticate::clear_celt_versions() {
  celt_versions_.Clear();
}
 ::google::protobuf::int32 Authenticate::celt_versions(int index) const {
  // @@protoc_insertion_point(field_get:MumbleProto.Authenticate.celt_versions)
  return celt_versions_.Get(index);
}
 void Authenticate::set_celt_versions(int index, ::google::protobuf::int32 value) {
  celt_versions_.Set(index, value);
  // @@protoc_insertion_point(field_set:MumbleProto.Authenticate.celt_versions)
}
 void Authenticate::add_celt_versions(::google::protobuf::int32 value) {
  celt_versions_.Add(value);
  // @@protoc_insertion_point(field_add:MumbleProto.Authenticate.celt_versions)
}
 const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
Authenticate::celt_versions() const {
  // @@protoc_insertion_point(field_list:MumbleProto.Authenticate.celt_versions)
  return celt_versions_;
}
 ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
Authenticate::mutable_celt_versions() {
  // @@protoc_insertion_point(field_mutable_list:MumbleProto.Authenticate.celt_versions)
  return &celt_versions_;
}

// optional bool opus = 5 [default = false];
bool Authenticate::has_opus() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void Authenticate::set_has_opus() {
  _has_bits_[0] |= 0x00000010u;
}
void Authenticate::clear_has_opus() {
  _has_bits_[0] &= ~0x00000010u;
}
void Authenticate::clear_opus() {
  opus_ = false;
  clear_has_opus();
}
 bool Authenticate::opus() const {
  // @@protoc_insertion_point(field_get:MumbleProto.Authenticate.opus)
  return opus_;
}
 void Authenticate::set_opus(bool value) {
  set_has_opus();
  opus_ = value;
  // @@protoc_insertion_point(field_set:MumbleProto.Authenticate.opus)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Ping::kTimestampFieldNumber;
const int Ping::kGoodFieldNumber;
const int Ping::kLateFieldNumber;
const int Ping::kLostFieldNumber;
const int Ping::kResyncFieldNumber;
const int Ping::kUdpPacketsFieldNumber;
const int Ping::kTcpPacketsFieldNumber;
const int Ping::kUdpPingAvgFieldNumber;
const int Ping::kUdpPingVarFieldNumber;
const int Ping::kTcpPingAvgFieldNumber;
const int Ping::kTcpPingVarFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Ping::Ping()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MumbleProto.Ping)
}

void Ping::InitAsDefaultInstance() {
}

Ping::Ping(const Ping& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MumbleProto.Ping)
}

void Ping::SharedCtor() {
  _cached_size_ = 0;
  timestamp_ = GOOGLE_ULONGLONG(0);
  good_ = 0u;
  late_ = 0u;
  lost_ = 0u;
  resync_ = 0u;
  udp_packets_ = 0u;
  tcp_packets_ = 0u;
  udp_ping_avg_ = 0;
  udp_ping_var_ = 0;
  tcp_ping_avg_ = 0;
  tcp_ping_var_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Ping::~Ping() {
  // @@protoc_insertion_point(destructor:MumbleProto.Ping)
  SharedDtor();
}

void Ping::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Ping::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Ping::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Ping_descriptor_;
}

const Ping& Ping::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Mumble_2eproto();
  return *default_instance_;
}

Ping* Ping::default_instance_ = NULL;

Ping* Ping::New(::google::protobuf::Arena* arena) const {
  Ping* n = new Ping;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Ping::Clear() {
// @@protoc_insertion_point(message_clear_start:MumbleProto.Ping)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(Ping, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Ping*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 255u) {
    ZR_(timestamp_, udp_ping_avg_);
  }
  ZR_(udp_ping_var_, tcp_ping_var_);

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Ping::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MumbleProto.Ping)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 timestamp = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &timestamp_)));
          set_has_timestamp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_good;
        break;
      }

      // optional uint32 good = 2;
      case 2: {
        if (tag == 16) {
         parse_good:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &good_)));
          set_has_good();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_late;
        break;
      }

      // optional uint32 late = 3;
      case 3: {
        if (tag == 24) {
         parse_late:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &late_)));
          set_has_late();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_lost;
        break;
      }

      // optional uint32 lost = 4;
      case 4: {
        if (tag == 32) {
         parse_lost:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &lost_)));
          set_has_lost();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_resync;
        break;
      }

      // optional uint32 resync = 5;
      case 5: {
        if (tag == 40) {
         parse_resync:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &resync_)));
          set_has_resync();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_udp_packets;
        break;
      }

      // optional uint32 udp_packets = 6;
      case 6: {
        if (tag == 48) {
         parse_udp_packets:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &udp_packets_)));
          set_has_udp_packets();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_tcp_packets;
        break;
      }

      // optional uint32 tcp_packets = 7;
      case 7: {
        if (tag == 56) {
         parse_tcp_packets:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tcp_packets_)));
          set_has_tcp_packets();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(69)) goto parse_udp_ping_avg;
        break;
      }

      // optional float udp_ping_avg = 8;
      case 8: {
        if (tag == 69) {
         parse_udp_ping_avg:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &udp_ping_avg_)));
          set_has_udp_ping_avg();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(77)) goto parse_udp_ping_var;
        break;
      }

      // optional float udp_ping_var = 9;
      case 9: {
        if (tag == 77) {
         parse_udp_ping_var:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &udp_ping_var_)));
          set_has_udp_ping_var();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(85)) goto parse_tcp_ping_avg;
        break;
      }

      // optional float tcp_ping_avg = 10;
      case 10: {
        if (tag == 85) {
         parse_tcp_ping_avg:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &tcp_ping_avg_)));
          set_has_tcp_ping_avg();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(93)) goto parse_tcp_ping_var;
        break;
      }

      // optional float tcp_ping_var = 11;
      case 11: {
        if (tag == 93) {
         parse_tcp_ping_var:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &tcp_ping_var_)));
          set_has_tcp_ping_var();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MumbleProto.Ping)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MumbleProto.Ping)
  return false;
#undef DO_
}

void Ping::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MumbleProto.Ping)
  // optional uint64 timestamp = 1;
  if (has_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->timestamp(), output);
  }

  // optional uint32 good = 2;
  if (has_good()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->good(), output);
  }

  // optional uint32 late = 3;
  if (has_late()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->late(), output);
  }

  // optional uint32 lost = 4;
  if (has_lost()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->lost(), output);
  }

  // optional uint32 resync = 5;
  if (has_resync()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->resync(), output);
  }

  // optional uint32 udp_packets = 6;
  if (has_udp_packets()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->udp_packets(), output);
  }

  // optional uint32 tcp_packets = 7;
  if (has_tcp_packets()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->tcp_packets(), output);
  }

  // optional float udp_ping_avg = 8;
  if (has_udp_ping_avg()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->udp_ping_avg(), output);
  }

  // optional float udp_ping_var = 9;
  if (has_udp_ping_var()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(9, this->udp_ping_var(), output);
  }

  // optional float tcp_ping_avg = 10;
  if (has_tcp_ping_avg()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(10, this->tcp_ping_avg(), output);
  }

  // optional float tcp_ping_var = 11;
  if (has_tcp_ping_var()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(11, this->tcp_ping_var(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MumbleProto.Ping)
}

::google::protobuf::uint8* Ping::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MumbleProto.Ping)
  // optional uint64 timestamp = 1;
  if (has_timestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->timestamp(), target);
  }

  // optional uint32 good = 2;
  if (has_good()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->good(), target);
  }

  // optional uint32 late = 3;
  if (has_late()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->late(), target);
  }

  // optional uint32 lost = 4;
  if (has_lost()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->lost(), target);
  }

  // optional uint32 resync = 5;
  if (has_resync()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->resync(), target);
  }

  // optional uint32 udp_packets = 6;
  if (has_udp_packets()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->udp_packets(), target);
  }

  // optional uint32 tcp_packets = 7;
  if (has_tcp_packets()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->tcp_packets(), target);
  }

  // optional float udp_ping_avg = 8;
  if (has_udp_ping_avg()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(8, this->udp_ping_avg(), target);
  }

  // optional float udp_ping_var = 9;
  if (has_udp_ping_var()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(9, this->udp_ping_var(), target);
  }

  // optional float tcp_ping_avg = 10;
  if (has_tcp_ping_avg()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(10, this->tcp_ping_avg(), target);
  }

  // optional float tcp_ping_var = 11;
  if (has_tcp_ping_var()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(11, this->tcp_ping_var(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MumbleProto.Ping)
  return target;
}

int Ping::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:MumbleProto.Ping)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 255u) {
    // optional uint64 timestamp = 1;
    if (has_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->timestamp());
    }

    // optional uint32 good = 2;
    if (has_good()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->good());
    }

    // optional uint32 late = 3;
    if (has_late()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->late());
    }

    // optional uint32 lost = 4;
    if (has_lost()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->lost());
    }

    // optional uint32 resync = 5;
    if (has_resync()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->resync());
    }

    // optional uint32 udp_packets = 6;
    if (has_udp_packets()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->udp_packets());
    }

    // optional uint32 tcp_packets = 7;
    if (has_tcp_packets()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tcp_packets());
    }

    // optional float udp_ping_avg = 8;
    if (has_udp_ping_avg()) {
      total_size += 1 + 4;
    }

  }
  if (_has_bits_[8 / 32] & 1792u) {
    // optional float udp_ping_var = 9;
    if (has_udp_ping_var()) {
      total_size += 1 + 4;
    }

    // optional float tcp_ping_avg = 10;
    if (has_tcp_ping_avg()) {
      total_size += 1 + 4;
    }

    // optional float tcp_ping_var = 11;
    if (has_tcp_ping_var()) {
      total_size += 1 + 4;
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Ping::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MumbleProto.Ping)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Ping* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Ping>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MumbleProto.Ping)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MumbleProto.Ping)
    MergeFrom(*source);
  }
}

void Ping::MergeFrom(const Ping& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MumbleProto.Ping)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_timestamp()) {
      set_timestamp(from.timestamp());
    }
    if (from.has_good()) {
      set_good(from.good());
    }
    if (from.has_late()) {
      set_late(from.late());
    }
    if (from.has_lost()) {
      set_lost(from.lost());
    }
    if (from.has_resync()) {
      set_resync(from.resync());
    }
    if (from.has_udp_packets()) {
      set_udp_packets(from.udp_packets());
    }
    if (from.has_tcp_packets()) {
      set_tcp_packets(from.tcp_packets());
    }
    if (from.has_udp_ping_avg()) {
      set_udp_ping_avg(from.udp_ping_avg());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_udp_ping_var()) {
      set_udp_ping_var(from.udp_ping_var());
    }
    if (from.has_tcp_ping_avg()) {
      set_tcp_ping_avg(from.tcp_ping_avg());
    }
    if (from.has_tcp_ping_var()) {
      set_tcp_ping_var(from.tcp_ping_var());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void Ping::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MumbleProto.Ping)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Ping::CopyFrom(const Ping& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MumbleProto.Ping)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Ping::IsInitialized() const {

  return true;
}

void Ping::Swap(Ping* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Ping::InternalSwap(Ping* other) {
  std::swap(timestamp_, other->timestamp_);
  std::swap(good_, other->good_);
  std::swap(late_, other->late_);
  std::swap(lost_, other->lost_);
  std::swap(resync_, other->resync_);
  std::swap(udp_packets_, other->udp_packets_);
  std::swap(tcp_packets_, other->tcp_packets_);
  std::swap(udp_ping_avg_, other->udp_ping_avg_);
  std::swap(udp_ping_var_, other->udp_ping_var_);
  std::swap(tcp_ping_avg_, other->tcp_ping_avg_);
  std::swap(tcp_ping_var_, other->tcp_ping_var_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Ping::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Ping_descriptor_;
  metadata.reflection = Ping_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Ping

// optional uint64 timestamp = 1;
bool Ping::has_timestamp() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Ping::set_has_timestamp() {
  _has_bits_[0] |= 0x00000001u;
}
void Ping::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00000001u;
}
void Ping::clear_timestamp() {
  timestamp_ = GOOGLE_ULONGLONG(0);
  clear_has_timestamp();
}
 ::google::protobuf::uint64 Ping::timestamp() const {
  // @@protoc_insertion_point(field_get:MumbleProto.Ping.timestamp)
  return timestamp_;
}
 void Ping::set_timestamp(::google::protobuf::uint64 value) {
  set_has_timestamp();
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:MumbleProto.Ping.timestamp)
}

// optional uint32 good = 2;
bool Ping::has_good() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Ping::set_has_good() {
  _has_bits_[0] |= 0x00000002u;
}
void Ping::clear_has_good() {
  _has_bits_[0] &= ~0x00000002u;
}
void Ping::clear_good() {
  good_ = 0u;
  clear_has_good();
}
 ::google::protobuf::uint32 Ping::good() const {
  // @@protoc_insertion_point(field_get:MumbleProto.Ping.good)
  return good_;
}
 void Ping::set_good(::google::protobuf::uint32 value) {
  set_has_good();
  good_ = value;
  // @@protoc_insertion_point(field_set:MumbleProto.Ping.good)
}

// optional uint32 late = 3;
bool Ping::has_late() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Ping::set_has_late() {
  _has_bits_[0] |= 0x00000004u;
}
void Ping::clear_has_late() {
  _has_bits_[0] &= ~0x00000004u;
}
void Ping::clear_late() {
  late_ = 0u;
  clear_has_late();
}
 ::google::protobuf::uint32 Ping::late() const {
  // @@protoc_insertion_point(field_get:MumbleProto.Ping.late)
  return late_;
}
 void Ping::set_late(::google::protobuf::uint32 value) {
  set_has_late();
  late_ = value;
  // @@protoc_insertion_point(field_set:MumbleProto.Ping.late)
}

// optional uint32 lost = 4;
bool Ping::has_lost() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void Ping::set_has_lost() {
  _has_bits_[0] |= 0x00000008u;
}
void Ping::clear_has_lost() {
  _has_bits_[0] &= ~0x00000008u;
}
void Ping::clear_lost() {
  lost_ = 0u;
  clear_has_lost();
}
 ::google::protobuf::uint32 Ping::lost() const {
  // @@protoc_insertion_point(field_get:MumbleProto.Ping.lost)
  return lost_;
}
 void Ping::set_lost(::google::protobuf::uint32 value) {
  set_has_lost();
  lost_ = value;
  // @@protoc_insertion_point(field_set:MumbleProto.Ping.lost)
}

// optional uint32 resync = 5;
bool Ping::has_resync() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void Ping::set_has_resync() {
  _has_bits_[0] |= 0x00000010u;
}
void Ping::clear_has_resync() {
  _has_bits_[0] &= ~0x00000010u;
}
void Ping::clear_resync() {
  resync_ = 0u;
  clear_has_resync();
}
 ::google::protobuf::uint32 Ping::resync() const {
  // @@protoc_insertion_point(field_get:MumbleProto.Ping.resync)
  return resync_;
}
 void Ping::set_resync(::google::protobuf::uint32 value) {
  set_has_resync();
  resync_ = value;
  // @@protoc_insertion_point(field_set:MumbleProto.Ping.resync)
}

// optional uint32 udp_packets = 6;
bool Ping::has_udp_packets() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void Ping::set_has_udp_packets() {
  _has_bits_[0] |= 0x00000020u;
}
void Ping::clear_has_udp_packets() {
  _has_bits_[0] &= ~0x00000020u;
}
void Ping::clear_udp_packets() {
  udp_packets_ = 0u;
  clear_has_udp_packets();
}
 ::google::protobuf::uint32 Ping::udp_packets() const {
  // @@protoc_insertion_point(field_get:MumbleProto.Ping.udp_packets)
  return udp_packets_;
}
 void Ping::set_udp_packets(::google::protobuf::uint32 value) {
  set_has_udp_packets();
  udp_packets_ = value;
  // @@protoc_insertion_point(field_set:MumbleProto.Ping.udp_packets)
}

// optional uint32 tcp_packets = 7;
bool Ping::has_tcp_packets() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void Ping::set_has_tcp_packets() {
  _has_bits_[0] |= 0x00000040u;
}
void Ping::clear_has_tcp_packets() {
  _has_bits_[0] &= ~0x00000040u;
}
void Ping::clear_tcp_packets() {
  tcp_packets_ = 0u;
  clear_has_tcp_packets();
}
 ::google::protobuf::uint32 Ping::tcp_packets() const {
  // @@protoc_insertion_point(field_get:MumbleProto.Ping.tcp_packets)
  return tcp_packets_;
}
 void Ping::set_tcp_packets(::google::protobuf::uint32 value) {
  set_has_tcp_packets();
  tcp_packets_ = value;
  // @@protoc_insertion_point(field_set:MumbleProto.Ping.tcp_packets)
}

// optional float udp_ping_avg = 8;
bool Ping::has_udp_ping_avg() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void Ping::set_has_udp_ping_avg() {
  _has_bits_[0] |= 0x00000080u;
}
void Ping::clear_has_udp_ping_avg() {
  _has_bits_[0] &= ~0x00000080u;
}
void Ping::clear_udp_ping_avg() {
  udp_ping_avg_ = 0;
  clear_has_udp_ping_avg();
}
 float Ping::udp_ping_avg() const {
  // @@protoc_insertion_point(field_get:MumbleProto.Ping.udp_ping_avg)
  return udp_ping_avg_;
}
 void Ping::set_udp_ping_avg(float value) {
  set_has_udp_ping_avg();
  udp_ping_avg_ = value;
  // @@protoc_insertion_point(field_set:MumbleProto.Ping.udp_ping_avg)
}

// optional float udp_ping_var = 9;
bool Ping::has_udp_ping_var() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void Ping::set_has_udp_ping_var() {
  _has_bits_[0] |= 0x00000100u;
}
void Ping::clear_has_udp_ping_var() {
  _has_bits_[0] &= ~0x00000100u;
}
void Ping::clear_udp_ping_var() {
  udp_ping_var_ = 0;
  clear_has_udp_ping_var();
}
 float Ping::udp_ping_var() const {
  // @@protoc_insertion_point(field_get:MumbleProto.Ping.udp_ping_var)
  return udp_ping_var_;
}
 void Ping::set_udp_ping_var(float value) {
  set_has_udp_ping_var();
  udp_ping_var_ = value;
  // @@protoc_insertion_point(field_set:MumbleProto.Ping.udp_ping_var)
}

// optional float tcp_ping_avg = 10;
bool Ping::has_tcp_ping_avg() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void Ping::set_has_tcp_ping_avg() {
  _has_bits_[0] |= 0x00000200u;
}
void Ping::clear_has_tcp_ping_avg() {
  _has_bits_[0] &= ~0x00000200u;
}
void Ping::clear_tcp_ping_avg() {
  tcp_ping_avg_ = 0;
  clear_has_tcp_ping_avg();
}
 float Ping::tcp_ping_avg() const {
  // @@protoc_insertion_point(field_get:MumbleProto.Ping.tcp_ping_avg)
  return tcp_ping_avg_;
}
 void Ping::set_tcp_ping_avg(float value) {
  set_has_tcp_ping_avg();
  tcp_ping_avg_ = value;
  // @@protoc_insertion_point(field_set:MumbleProto.Ping.tcp_ping_avg)
}

// optional float tcp_ping_var = 11;
bool Ping::has_tcp_ping_var() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void Ping::set_has_tcp_ping_var() {
  _has_bits_[0] |= 0x00000400u;
}
void Ping::clear_has_tcp_ping_var() {
  _has_bits_[0] &= ~0x00000400u;
}
void Ping::clear_tcp_ping_var() {
  tcp_ping_var_ = 0;
  clear_has_tcp_ping_var();
}
 float Ping::tcp_ping_var() const {
  // @@protoc_insertion_point(field_get:MumbleProto.Ping.tcp_ping_var)
  return tcp_ping_var_;
}
 void Ping::set_tcp_ping_var(float value) {
  set_has_tcp_ping_var();
  tcp_ping_var_ = value;
  // @@protoc_insertion_point(field_set:MumbleProto.Ping.tcp_ping_var)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

const ::google::protobuf::EnumDescriptor* Reject_RejectType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Reject_RejectType_descriptor_;
}
bool Reject_RejectType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Reject_RejectType Reject::None;
const Reject_RejectType Reject::WrongVersion;
const Reject_RejectType Reject::InvalidUsername;
const Reject_RejectType Reject::WrongUserPW;
const Reject_RejectType Reject::WrongServerPW;
const Reject_RejectType Reject::UsernameInUse;
const Reject_RejectType Reject::ServerFull;
const Reject_RejectType Reject::NoCertificate;
const Reject_RejectType Reject::AuthenticatorFail;
const Reject_RejectType Reject::RejectType_MIN;
const Reject_RejectType Reject::RejectType_MAX;
const int Reject::RejectType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Reject::kTypeFieldNumber;
const int Reject::kReasonFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Reject::Reject()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MumbleProto.Reject)
}

void Reject::InitAsDefaultInstance() {
}

Reject::Reject(const Reject& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MumbleProto.Reject)
}

void Reject::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  type_ = 0;
  reason_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Reject::~Reject() {
  // @@protoc_insertion_point(destructor:MumbleProto.Reject)
  SharedDtor();
}

void Reject::SharedDtor() {
  reason_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void Reject::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Reject::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Reject_descriptor_;
}

const Reject& Reject::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Mumble_2eproto();
  return *default_instance_;
}

Reject* Reject::default_instance_ = NULL;

Reject* Reject::New(::google::protobuf::Arena* arena) const {
  Reject* n = new Reject;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Reject::Clear() {
// @@protoc_insertion_point(message_clear_start:MumbleProto.Reject)
  if (_has_bits_[0 / 32] & 3u) {
    type_ = 0;
    if (has_reason()) {
      reason_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Reject::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MumbleProto.Reject)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .MumbleProto.Reject.RejectType type = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MumbleProto::Reject_RejectType_IsValid(value)) {
            set_type(static_cast< ::MumbleProto::Reject_RejectType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_reason;
        break;
      }

      // optional string reason = 2;
      case 2: {
        if (tag == 18) {
         parse_reason:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_reason()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->reason().data(), this->reason().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "MumbleProto.Reject.reason");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MumbleProto.Reject)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MumbleProto.Reject)
  return false;
#undef DO_
}

void Reject::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MumbleProto.Reject)
  // optional .MumbleProto.Reject.RejectType type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional string reason = 2;
  if (has_reason()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->reason().data(), this->reason().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "MumbleProto.Reject.reason");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->reason(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MumbleProto.Reject)
}

::google::protobuf::uint8* Reject::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MumbleProto.Reject)
  // optional .MumbleProto.Reject.RejectType type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // optional string reason = 2;
  if (has_reason()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->reason().data(), this->reason().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "MumbleProto.Reject.reason");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->reason(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MumbleProto.Reject)
  return target;
}

int Reject::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:MumbleProto.Reject)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 3u) {
    // optional .MumbleProto.Reject.RejectType type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional string reason = 2;
    if (has_reason()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->reason());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Reject::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MumbleProto.Reject)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Reject* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Reject>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MumbleProto.Reject)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MumbleProto.Reject)
    MergeFrom(*source);
  }
}

void Reject::MergeFrom(const Reject& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MumbleProto.Reject)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_reason()) {
      set_has_reason();
      reason_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.reason_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void Reject::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MumbleProto.Reject)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Reject::CopyFrom(const Reject& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MumbleProto.Reject)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Reject::IsInitialized() const {

  return true;
}

void Reject::Swap(Reject* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Reject::InternalSwap(Reject* other) {
  std::swap(type_, other->type_);
  reason_.Swap(&other->reason_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Reject::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Reject_descriptor_;
  metadata.reflection = Reject_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Reject

// optional .MumbleProto.Reject.RejectType type = 1;
bool Reject::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Reject::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
void Reject::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
void Reject::clear_type() {
  type_ = 0;
  clear_has_type();
}
 ::MumbleProto::Reject_RejectType Reject::type() const {
  // @@protoc_insertion_point(field_get:MumbleProto.Reject.type)
  return static_cast< ::MumbleProto::Reject_RejectType >(type_);
}
 void Reject::set_type(::MumbleProto::Reject_RejectType value) {
  assert(::MumbleProto::Reject_RejectType_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:MumbleProto.Reject.type)
}

// optional string reason = 2;
bool Reject::has_reason() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Reject::set_has_reason() {
  _has_bits_[0] |= 0x00000002u;
}
void Reject::clear_has_reason() {
  _has_bits_[0] &= ~0x00000002u;
}
void Reject::clear_reason() {
  reason_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_reason();
}
 const ::std::string& Reject::reason() const {
  // @@protoc_insertion_point(field_get:MumbleProto.Reject.reason)
  return reason_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Reject::set_reason(const ::std::string& value) {
  set_has_reason();
  reason_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:MumbleProto.Reject.reason)
}
 void Reject::set_reason(const char* value) {
  set_has_reason();
  reason_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:MumbleProto.Reject.reason)
}
 void Reject::set_reason(const char* value, size_t size) {
  set_has_reason();
  reason_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:MumbleProto.Reject.reason)
}
 ::std::string* Reject::mutable_reason() {
  set_has_reason();
  // @@protoc_insertion_point(field_mutable:MumbleProto.Reject.reason)
  return reason_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Reject::release_reason() {
  // @@protoc_insertion_point(field_release:MumbleProto.Reject.reason)
  clear_has_reason();
  return reason_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Reject::set_allocated_reason(::std::string* reason) {
  if (reason != NULL) {
    set_has_reason();
  } else {
    clear_has_reason();
  }
  reason_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), reason);
  // @@protoc_insertion_point(field_set_allocated:MumbleProto.Reject.reason)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ServerSync::kSessionFieldNumber;
const int ServerSync::kMaxBandwidthFieldNumber;
const int ServerSync::kWelcomeTextFieldNumber;
const int ServerSync::kPermissionsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ServerSync::ServerSync()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MumbleProto.ServerSync)
}

void ServerSync::InitAsDefaultInstance() {
}

ServerSync::ServerSync(const ServerSync& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MumbleProto.ServerSync)
}

void ServerSync::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  session_ = 0u;
  max_bandwidth_ = 0u;
  welcome_text_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  permissions_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ServerSync::~ServerSync() {
  // @@protoc_insertion_point(destructor:MumbleProto.ServerSync)
  SharedDtor();
}

void ServerSync::SharedDtor() {
  welcome_text_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void ServerSync::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ServerSync::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ServerSync_descriptor_;
}

const ServerSync& ServerSync::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Mumble_2eproto();
  return *default_instance_;
}

ServerSync* ServerSync::default_instance_ = NULL;

ServerSync* ServerSync::New(::google::protobuf::Arena* arena) const {
  ServerSync* n = new ServerSync;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ServerSync::Clear() {
// @@protoc_insertion_point(message_clear_start:MumbleProto.ServerSync)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(ServerSync, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<ServerSync*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 15u) {
    ZR_(session_, max_bandwidth_);
    if (has_welcome_text()) {
      welcome_text_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    permissions_ = GOOGLE_ULONGLONG(0);
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool ServerSync::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MumbleProto.ServerSync)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 session = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &session_)));
          set_has_session();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_max_bandwidth;
        break;
      }

      // optional uint32 max_bandwidth = 2;
      case 2: {
        if (tag == 16) {
         parse_max_bandwidth:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &max_bandwidth_)));
          set_has_max_bandwidth();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_welcome_text;
        break;
      }

      // optional string welcome_text = 3;
      case 3: {
        if (tag == 26) {
         parse_welcome_text:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_welcome_text()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->welcome_text().data(), this->welcome_text().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "MumbleProto.ServerSync.welcome_text");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_permissions;
        break;
      }

      // optional uint64 permissions = 4;
      case 4: {
        if (tag == 32) {
         parse_permissions:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &permissions_)));
          set_has_permissions();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MumbleProto.ServerSync)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MumbleProto.ServerSync)
  return false;
#undef DO_
}

void ServerSync::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MumbleProto.ServerSync)
  // optional uint32 session = 1;
  if (has_session()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->session(), output);
  }

  // optional uint32 max_bandwidth = 2;
  if (has_max_bandwidth()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->max_bandwidth(), output);
  }

  // optional string welcome_text = 3;
  if (has_welcome_text()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->welcome_text().data(), this->welcome_text().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "MumbleProto.ServerSync.welcome_text");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->welcome_text(), output);
  }

  // optional uint64 permissions = 4;
  if (has_permissions()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->permissions(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MumbleProto.ServerSync)
}

::google::protobuf::uint8* ServerSync::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MumbleProto.ServerSync)
  // optional uint32 session = 1;
  if (has_session()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->session(), target);
  }

  // optional uint32 max_bandwidth = 2;
  if (has_max_bandwidth()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->max_bandwidth(), target);
  }

  // optional string welcome_text = 3;
  if (has_welcome_text()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->welcome_text().data(), this->welcome_text().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "MumbleProto.ServerSync.welcome_text");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->welcome_text(), target);
  }

  // optional uint64 permissions = 4;
  if (has_permissions()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->permissions(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MumbleProto.ServerSync)
  return target;
}

int ServerSync::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:MumbleProto.ServerSync)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 15u) {
    // optional uint32 session = 1;
    if (has_session()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->session());
    }

    // optional uint32 max_bandwidth = 2;
    if (has_max_bandwidth()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->max_bandwidth());
    }

    // optional string welcome_text = 3;
    if (has_welcome_text()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->welcome_text());
    }

    // optional uint64 permissions = 4;
    if (has_permissions()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->permissions());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ServerSync::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MumbleProto.ServerSync)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const ServerSync* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ServerSync>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MumbleProto.ServerSync)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MumbleProto.ServerSync)
    MergeFrom(*source);
  }
}

void ServerSync::MergeFrom(const ServerSync& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MumbleProto.ServerSync)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_session()) {
      set_session(from.session());
    }
    if (from.has_max_bandwidth()) {
      set_max_bandwidth(from.max_bandwidth());
    }
    if (from.has_welcome_text()) {
      set_has_welcome_text();
      welcome_text_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.welcome_text_);
    }
    if (from.has_permissions()) {
      set_permissions(from.permissions());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void ServerSync::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MumbleProto.ServerSync)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServerSync::CopyFrom(const ServerSync& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MumbleProto.ServerSync)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerSync::IsInitialized() const {

  return true;
}

void ServerSync::Swap(ServerSync* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ServerSync::InternalSwap(ServerSync* other) {
  std::swap(session_, other->session_);
  std::swap(max_bandwidth_, other->max_bandwidth_);
  welcome_text_.Swap(&other->welcome_text_);
  std::swap(permissions_, other->permissions_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ServerSync::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ServerSync_descriptor_;
  metadata.reflection = ServerSync_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ServerSync

// optional uint32 session = 1;
bool ServerSync::has_session() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ServerSync::set_has_session() {
  _has_bits_[0] |= 0x00000001u;
}
void ServerSync::clear_has_session() {
  _has_bits_[0] &= ~0x00000001u;
}
void ServerSync::clear_session() {
  session_ = 0u;
  clear_has_session();
}
 ::google::protobuf::uint32 ServerSync::session() const {
  // @@protoc_insertion_point(field_get:MumbleProto.ServerSync.session)
  return session_;
}
 void ServerSync::set_session(::google::protobuf::uint32 value) {
  set_has_session();
  session_ = value;
  // @@protoc_insertion_point(field_set:MumbleProto.ServerSync.session)
}

// optional uint32 max_bandwidth = 2;
bool ServerSync::has_max_bandwidth() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ServerSync::set_has_max_bandwidth() {
  _has_bits_[0] |= 0x00000002u;
}
void ServerSync::clear_has_max_bandwidth() {
  _has_bits_[0] &= ~0x00000002u;
}
void ServerSync::clear_max_bandwidth() {
  max_bandwidth_ = 0u;
  clear_has_max_bandwidth();
}
 ::google::protobuf::uint32 ServerSync::max_bandwidth() const {
  // @@protoc_insertion_point(field_get:MumbleProto.ServerSync.max_bandwidth)
  return max_bandwidth_;
}
 void ServerSync::set_max_bandwidth(::google::protobuf::uint32 value) {
  set_has_max_bandwidth();
  max_bandwidth_ = value;
  // @@protoc_insertion_point(field_set:MumbleProto.ServerSync.max_bandwidth)
}

// optional string welcome_text = 3;
bool ServerSync::has_welcome_text() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void ServerSync::set_has_welcome_text() {
  _has_bits_[0] |= 0x00000004u;
}
void ServerSync::clear_has_welcome_text() {
  _has_bits_[0] &= ~0x00000004u;
}
void ServerSync::clear_welcome_text() {
  welcome_text_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_welcome_text();
}
 const ::std::string& ServerSync::welcome_text() const {
  // @@protoc_insertion_point(field_get:MumbleProto.ServerSync.welcome_text)
  return welcome_text_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ServerSync::set_welcome_text(const ::std::string& value) {
  set_has_welcome_text();
  welcome_text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:MumbleProto.ServerSync.welcome_text)
}
 void ServerSync::set_welcome_text(const char* value) {
  set_has_welcome_text();
  welcome_text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:MumbleProto.ServerSync.welcome_text)
}
 void ServerSync::set_welcome_text(const char* value, size_t size) {
  set_has_welcome_text();
  welcome_text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:MumbleProto.ServerSync.welcome_text)
}
 ::std::string* ServerSync::mutable_welcome_text() {
  set_has_welcome_text();
  // @@protoc_insertion_point(field_mutable:MumbleProto.ServerSync.welcome_text)
  return welcome_text_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ServerSync::release_welcome_text() {
  // @@protoc_insertion_point(field_release:MumbleProto.ServerSync.welcome_text)
  clear_has_welcome_text();
  return welcome_text_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ServerSync::set_allocated_welcome_text(::std::string* welcome_text) {
  if (welcome_text != NULL) {
    set_has_welcome_text();
  } else {
    clear_has_welcome_text();
  }
  welcome_text_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), welcome_text);
  // @@protoc_insertion_point(field_set_allocated:MumbleProto.ServerSync.welcome_text)
}

// optional uint64 permissions = 4;
bool ServerSync::has_permissions() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void ServerSync::set_has_permissions() {
  _has_bits_[0] |= 0x00000008u;
}
void ServerSync::clear_has_permissions() {
  _has_bits_[0] &= ~0x00000008u;
}
void ServerSync::clear_permissions() {
  permissions_ = GOOGLE_ULONGLONG(0);
  clear_has_permissions();
}
 ::google::protobuf::uint64 ServerSync::permissions() const {
  // @@protoc_insertion_point(field_get:MumbleProto.ServerSync.permissions)
  return permissions_;
}
 void ServerSync::set_permissions(::google::protobuf::uint64 value) {
  set_has_permissions();
  permissions_ = value;
  // @@protoc_insertion_point(field_set:MumbleProto.ServerSync.permissions)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ChannelRemove::kChannelIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ChannelRemove::ChannelRemove()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MumbleProto.ChannelRemove)
}

void ChannelRemove::InitAsDefaultInstance() {
}

ChannelRemove::ChannelRemove(const ChannelRemove& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MumbleProto.ChannelRemove)
}

void ChannelRemove::SharedCtor() {
  _cached_size_ = 0;
  channel_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ChannelRemove::~ChannelRemove() {
  // @@protoc_insertion_point(destructor:MumbleProto.ChannelRemove)
  SharedDtor();
}

void ChannelRemove::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ChannelRemove::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChannelRemove::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ChannelRemove_descriptor_;
}

const ChannelRemove& ChannelRemove::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Mumble_2eproto();
  return *default_instance_;
}

ChannelRemove* ChannelRemove::default_instance_ = NULL;

ChannelRemove* ChannelRemove::New(::google::protobuf::Arena* arena) const {
  ChannelRemove* n = new ChannelRemove;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ChannelRemove::Clear() {
// @@protoc_insertion_point(message_clear_start:MumbleProto.ChannelRemove)
  channel_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool ChannelRemove::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MumbleProto.ChannelRemove)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 channel_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &channel_id_)));
          set_has_channel_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MumbleProto.ChannelRemove)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MumbleProto.ChannelRemove)
  return false;
#undef DO_
}

void ChannelRemove::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MumbleProto.ChannelRemove)
  // required uint32 channel_id = 1;
  if (has_channel_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->channel_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MumbleProto.ChannelRemove)
}

::google::protobuf::uint8* ChannelRemove::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MumbleProto.ChannelRemove)
  // required uint32 channel_id = 1;
  if (has_channel_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->channel_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MumbleProto.ChannelRemove)
  return target;
}

int ChannelRemove::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:MumbleProto.ChannelRemove)
  int total_size = 0;

  // required uint32 channel_id = 1;
  if (has_channel_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->channel_id());
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChannelRemove::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MumbleProto.ChannelRemove)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const ChannelRemove* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ChannelRemove>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MumbleProto.ChannelRemove)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MumbleProto.ChannelRemove)
    MergeFrom(*source);
  }
}

void ChannelRemove::MergeFrom(const ChannelRemove& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MumbleProto.ChannelRemove)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_channel_id()) {
      set_channel_id(from.channel_id());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void ChannelRemove::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MumbleProto.ChannelRemove)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChannelRemove::CopyFrom(const ChannelRemove& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MumbleProto.ChannelRemove)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChannelRemove::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ChannelRemove::Swap(ChannelRemove* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ChannelRemove::InternalSwap(ChannelRemove* other) {
  std::swap(channel_id_, other->channel_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ChannelRemove::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ChannelRemove_descriptor_;
  metadata.reflection = ChannelRemove_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ChannelRemove

// required uint32 channel_id = 1;
bool ChannelRemove::has_channel_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ChannelRemove::set_has_channel_id() {
  _has_bits_[0] |= 0x00000001u;
}
void ChannelRemove::clear_has_channel_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void ChannelRemove::clear_channel_id() {
  channel_id_ = 0u;
  clear_has_channel_id();
}
 ::google::protobuf::uint32 ChannelRemove::channel_id() const {
  // @@protoc_insertion_point(field_get:MumbleProto.ChannelRemove.channel_id)
  return channel_id_;
}
 void ChannelRemove::set_channel_id(::google::protobuf::uint32 value) {
  set_has_channel_id();
  channel_id_ = value;
  // @@protoc_insertion_point(field_set:MumbleProto.ChannelRemove.channel_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ChannelState::kChannelIdFieldNumber;
const int ChannelState::kParentFieldNumber;
const int ChannelState::kNameFieldNumber;
const int ChannelState::kLinksFieldNumber;
const int ChannelState::kDescriptionFieldNumber;
const int ChannelState::kLinksAddFieldNumber;
const int ChannelState::kLinksRemoveFieldNumber;
const int ChannelState::kTemporaryFieldNumber;
const int ChannelState::kPositionFieldNumber;
const int ChannelState::kDescriptionHashFieldNumber;
const int ChannelState::kMaxUsersFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ChannelState::ChannelState()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MumbleProto.ChannelState)
}

void ChannelState::InitAsDefaultInstance() {
}

ChannelState::ChannelState(const ChannelState& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MumbleProto.ChannelState)
}

void ChannelState::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  channel_id_ = 0u;
  parent_ = 0u;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  description_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  temporary_ = false;
  position_ = 0;
  description_hash_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  max_users_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ChannelState::~ChannelState() {
  // @@protoc_insertion_point(destructor:MumbleProto.ChannelState)
  SharedDtor();
}

void ChannelState::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  description_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  description_hash_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void ChannelState::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChannelState::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ChannelState_descriptor_;
}

const ChannelState& ChannelState::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Mumble_2eproto();
  return *default_instance_;
}

ChannelState* ChannelState::default_instance_ = NULL;

ChannelState* ChannelState::New(::google::protobuf::Arena* arena) const {
  ChannelState* n = new ChannelState;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ChannelState::Clear() {
// @@protoc_insertion_point(message_clear_start:MumbleProto.ChannelState)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(ChannelState, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<ChannelState*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 151u) {
    ZR_(channel_id_, parent_);
    if (has_name()) {
      name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_description()) {
      description_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    temporary_ = false;
  }
  if (_has_bits_[8 / 32] & 1792u) {
    position_ = 0;
    if (has_description_hash()) {
      description_hash_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    max_users_ = 0u;
  }

#undef ZR_HELPER_
#undef ZR_

  links_.Clear();
  links_add_.Clear();
  links_remove_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool ChannelState::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MumbleProto.ChannelState)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 channel_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &channel_id_)));
          set_has_channel_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_parent;
        break;
      }

      // optional uint32 parent = 2;
      case 2: {
        if (tag == 16) {
         parse_parent:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &parent_)));
          set_has_parent();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_name;
        break;
      }

      // optional string name = 3;
      case 3: {
        if (tag == 26) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "MumbleProto.ChannelState.name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_links;
        break;
      }

      // repeated uint32 links = 4;
      case 4: {
        if (tag == 32) {
         parse_links:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 32, input, this->mutable_links())));
        } else if (tag == 34) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_links())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_links;
        if (input->ExpectTag(42)) goto parse_description;
        break;
      }

      // optional string description = 5;
      case 5: {
        if (tag == 42) {
         parse_description:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_description()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->description().data(), this->description().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "MumbleProto.ChannelState.description");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_links_add;
        break;
      }

      // repeated uint32 links_add = 6;
      case 6: {
        if (tag == 48) {
         parse_links_add:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 48, input, this->mutable_links_add())));
        } else if (tag == 50) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_links_add())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_links_add;
        if (input->ExpectTag(56)) goto parse_links_remove;
        break;
      }

      // repeated uint32 links_remove = 7;
      case 7: {
        if (tag == 56) {
         parse_links_remove:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 56, input, this->mutable_links_remove())));
        } else if (tag == 58) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_links_remove())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_links_remove;
        if (input->ExpectTag(64)) goto parse_temporary;
        break;
      }

      // optional bool temporary = 8 [default = false];
      case 8: {
        if (tag == 64) {
         parse_temporary:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &temporary_)));
          set_has_temporary();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_position;
        break;
      }

      // optional int32 position = 9 [default = 0];
      case 9: {
        if (tag == 72) {
         parse_position:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &position_)));
          set_has_position();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_description_hash;
        break;
      }

      // optional bytes description_hash = 10;
      case 10: {
        if (tag == 82) {
         parse_description_hash:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_description_hash()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_max_users;
        break;
      }

      // optional uint32 max_users = 11;
      case 11: {
        if (tag == 88) {
         parse_max_users:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &max_users_)));
          set_has_max_users();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MumbleProto.ChannelState)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MumbleProto.ChannelState)
  return false;
#undef DO_
}

void ChannelState::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MumbleProto.ChannelState)
  // optional uint32 channel_id = 1;
  if (has_channel_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->channel_id(), output);
  }

  // optional uint32 parent = 2;
  if (has_parent()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->parent(), output);
  }

  // optional string name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "MumbleProto.ChannelState.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->name(), output);
  }

  // repeated uint32 links = 4;
  for (int i = 0; i < this->links_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      4, this->links(i), output);
  }

  // optional string description = 5;
  if (has_description()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->description().data(), this->description().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "MumbleProto.ChannelState.description");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->description(), output);
  }

  // repeated uint32 links_add = 6;
  for (int i = 0; i < this->links_add_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      6, this->links_add(i), output);
  }

  // repeated uint32 links_remove = 7;
  for (int i = 0; i < this->links_remove_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      7, this->links_remove(i), output);
  }

  // optional bool temporary = 8 [default = false];
  if (has_temporary()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->temporary(), output);
  }

  // optional int32 position = 9 [default = 0];
  if (has_position()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->position(), output);
  }

  // optional bytes description_hash = 10;
  if (has_description_hash()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      10, this->description_hash(), output);
  }

  // optional uint32 max_users = 11;
  if (has_max_users()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->max_users(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MumbleProto.ChannelState)
}

::google::protobuf::uint8* ChannelState::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MumbleProto.ChannelState)
  // optional uint32 channel_id = 1;
  if (has_channel_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->channel_id(), target);
  }

  // optional uint32 parent = 2;
  if (has_parent()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->parent(), target);
  }

  // optional string name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "MumbleProto.ChannelState.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->name(), target);
  }

  // repeated uint32 links = 4;
  for (int i = 0; i < this->links_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(4, this->links(i), target);
  }

  // optional string description = 5;
  if (has_description()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->description().data(), this->description().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "MumbleProto.ChannelState.description");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->description(), target);
  }

  // repeated uint32 links_add = 6;
  for (int i = 0; i < this->links_add_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(6, this->links_add(i), target);
  }

  // repeated uint32 links_remove = 7;
  for (int i = 0; i < this->links_remove_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(7, this->links_remove(i), target);
  }

  // optional bool temporary = 8 [default = false];
  if (has_temporary()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->temporary(), target);
  }

  // optional int32 position = 9 [default = 0];
  if (has_position()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->position(), target);
  }

  // optional bytes description_hash = 10;
  if (has_description_hash()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        10, this->description_hash(), target);
  }

  // optional uint32 max_users = 11;
  if (has_max_users()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->max_users(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MumbleProto.ChannelState)
  return target;
}

int ChannelState::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:MumbleProto.ChannelState)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 151u) {
    // optional uint32 channel_id = 1;
    if (has_channel_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->channel_id());
    }

    // optional uint32 parent = 2;
    if (has_parent()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->parent());
    }

    // optional string name = 3;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string description = 5;
    if (has_description()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->description());
    }

    // optional bool temporary = 8 [default = false];
    if (has_temporary()) {
      total_size += 1 + 1;
    }

  }
  if (_has_bits_[8 / 32] & 1792u) {
    // optional int32 position = 9 [default = 0];
    if (has_position()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->position());
    }

    // optional bytes description_hash = 10;
    if (has_description_hash()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->description_hash());
    }

    // optional uint32 max_users = 11;
    if (has_max_users()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->max_users());
    }

  }
  // repeated uint32 links = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->links_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->links(i));
    }
    total_size += 1 * this->links_size() + data_size;
  }

  // repeated uint32 links_add = 6;
  {
    int data_size = 0;
    for (int i = 0; i < this->links_add_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->links_add(i));
    }
    total_size += 1 * this->links_add_size() + data_size;
  }

  // repeated uint32 links_remove = 7;
  {
    int data_size = 0;
    for (int i = 0; i < this->links_remove_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->links_remove(i));
    }
    total_size += 1 * this->links_remove_size() + data_size;
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChannelState::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MumbleProto.ChannelState)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const ChannelState* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ChannelState>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MumbleProto.ChannelState)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MumbleProto.ChannelState)
    MergeFrom(*source);
  }
}

void ChannelState::MergeFrom(const ChannelState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MumbleProto.ChannelState)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  links_.MergeFrom(from.links_);
  links_add_.MergeFrom(from.links_add_);
  links_remove_.MergeFrom(from.links_remove_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_channel_id()) {
      set_channel_id(from.channel_id());
    }
    if (from.has_parent()) {
      set_parent(from.parent());
    }
    if (from.has_name()) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (from.has_description()) {
      set_has_description();
      description_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.description_);
    }
    if (from.has_temporary()) {
      set_temporary(from.temporary());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_position()) {
      set_position(from.position());
    }
    if (from.has_description_hash()) {
      set_has_description_hash();
      description_hash_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.description_hash_);
    }
    if (from.has_max_users()) {
      set_max_users(from.max_users());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void ChannelState::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MumbleProto.ChannelState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChannelState::CopyFrom(const ChannelState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MumbleProto.ChannelState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChannelState::IsInitialized() const {

  return true;
}

void ChannelState::Swap(ChannelState* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ChannelState::InternalSwap(ChannelState* other) {
  std::swap(channel_id_, other->channel_id_);
  std::swap(parent_, other->parent_);
  name_.Swap(&other->name_);
  links_.UnsafeArenaSwap(&other->links_);
  description_.Swap(&other->description_);
  links_add_.UnsafeArenaSwap(&other->links_add_);
  links_remove_.UnsafeArenaSwap(&other->links_remove_);
  std::swap(temporary_, other->temporary_);
  std::swap(position_, other->position_);
  description_hash_.Swap(&other->description_hash_);
  std::swap(max_users_, other->max_users_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ChannelState::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ChannelState_descriptor_;
  metadata.reflection = ChannelState_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ChannelState

// optional uint32 channel_id = 1;
bool ChannelState::has_channel_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ChannelState::set_has_channel_id() {
  _has_bits_[0] |= 0x00000001u;
}
void ChannelState::clear_has_channel_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void ChannelState::clear_channel_id() {
  channel_id_ = 0u;
  clear_has_channel_id();
}
 ::google::protobuf::uint32 ChannelState::channel_id() const {
  // @@protoc_insertion_point(field_get:MumbleProto.ChannelState.channel_id)
  return channel_id_;
}
 void ChannelState::set_channel_id(::google::protobuf::uint32 value) {
  set_has_channel_id();
  channel_id_ = value;
  // @@protoc_insertion_point(field_set:MumbleProto.ChannelState.channel_id)
}

// optional uint32 parent = 2;
bool ChannelState::has_parent() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ChannelState::set_has_parent() {
  _has_bits_[0] |= 0x00000002u;
}
void ChannelState::clear_has_parent() {
  _has_bits_[0] &= ~0x00000002u;
}
void ChannelState::clear_parent() {
  parent_ = 0u;
  clear_has_parent();
}
 ::google::protobuf::uint32 ChannelState::parent() const {
  // @@protoc_insertion_point(field_get:MumbleProto.ChannelState.parent)
  return parent_;
}
 void ChannelState::set_parent(::google::protobuf::uint32 value) {
  set_has_parent();
  parent_ = value;
  // @@protoc_insertion_point(field_set:MumbleProto.ChannelState.parent)
}

// optional string name = 3;
bool ChannelState::has_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void ChannelState::set_has_name() {
  _has_bits_[0] |= 0x00000004u;
}
void ChannelState::clear_has_name() {
  _has_bits_[0] &= ~0x00000004u;
}
void ChannelState::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
 const ::std::string& ChannelState::name() const {
  // @@protoc_insertion_point(field_get:MumbleProto.ChannelState.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ChannelState::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:MumbleProto.ChannelState.name)
}
 void ChannelState::set_name(const char* value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:MumbleProto.ChannelState.name)
}
 void ChannelState::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:MumbleProto.ChannelState.name)
}
 ::std::string* ChannelState::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:MumbleProto.ChannelState.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ChannelState::release_name() {
  // @@protoc_insertion_point(field_release:MumbleProto.ChannelState.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ChannelState::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:MumbleProto.ChannelState.name)
}

// repeated uint32 links = 4;
int ChannelState::links_size() const {
  return links_.size();
}
void ChannelState::clear_links() {
  links_.Clear();
}
 ::google::protobuf::uint32 ChannelState::links(int index) const {
  // @@protoc_insertion_point(field_get:MumbleProto.ChannelState.links)
  return links_.Get(index);
}
 void ChannelState::set_links(int index, ::google::protobuf::uint32 value) {
  links_.Set(index, value);
  // @@protoc_insertion_point(field_set:MumbleProto.ChannelState.links)
}
 void ChannelState::add_links(::google::protobuf::uint32 value) {
  links_.Add(value);
  // @@protoc_insertion_point(field_add:MumbleProto.ChannelState.links)
}
 const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
ChannelState::links() const {
  // @@protoc_insertion_point(field_list:MumbleProto.ChannelState.links)
  return links_;
}
 ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
ChannelState::mutable_links() {
  // @@protoc_insertion_point(field_mutable_list:MumbleProto.ChannelState.links)
  return &links_;
}

// optional string description = 5;
bool ChannelState::has_description() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void ChannelState::set_has_description() {
  _has_bits_[0] |= 0x00000010u;
}
void ChannelState::clear_has_description() {
  _has_bits_[0] &= ~0x00000010u;
}
void ChannelState::clear_description() {
  description_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_description();
}
 const ::std::string& ChannelState::description() const {
  // @@protoc_insertion_point(field_get:MumbleProto.ChannelState.description)
  return description_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ChannelState::set_description(const ::std::string& value) {
  set_has_description();
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:MumbleProto.ChannelState.description)
}
 void ChannelState::set_description(const char* value) {
  set_has_description();
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:MumbleProto.ChannelState.description)
}
 void ChannelState::set_description(const char* value, size_t size) {
  set_has_description();
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:MumbleProto.ChannelState.description)
}
 ::std::string* ChannelState::mutable_description() {
  set_has_description();
  // @@protoc_insertion_point(field_mutable:MumbleProto.ChannelState.description)
  return description_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ChannelState::release_description() {
  // @@protoc_insertion_point(field_release:MumbleProto.ChannelState.description)
  clear_has_description();
  return description_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ChannelState::set_allocated_description(::std::string* description) {
  if (description != NULL) {
    set_has_description();
  } else {
    clear_has_description();
  }
  description_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), description);
  // @@protoc_insertion_point(field_set_allocated:MumbleProto.ChannelState.description)
}

// repeated uint32 links_add = 6;
int ChannelState::links_add_size() const {
  return links_add_.size();
}
void ChannelState::clear_links_add() {
  links_add_.Clear();
}
 ::google::protobuf::uint32 ChannelState::links_add(int index) const {
  // @@protoc_insertion_point(field_get:MumbleProto.ChannelState.links_add)
  return links_add_.Get(index);
}
 void ChannelState::set_links_add(int index, ::google::protobuf::uint32 value) {
  links_add_.Set(index, value);
  // @@protoc_insertion_point(field_set:MumbleProto.ChannelState.links_add)
}
 void ChannelState::add_links_add(::google::protobuf::uint32 value) {
  links_add_.Add(value);
  // @@protoc_insertion_point(field_add:MumbleProto.ChannelState.links_add)
}
 const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
ChannelState::links_add() const {
  // @@protoc_insertion_point(field_list:MumbleProto.ChannelState.links_add)
  return links_add_;
}
 ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
ChannelState::mutable_links_add() {
  // @@protoc_insertion_point(field_mutable_list:MumbleProto.ChannelState.links_add)
  return &links_add_;
}

// repeated uint32 links_remove = 7;
int ChannelState::links_remove_size() const {
  return links_remove_.size();
}
void ChannelState::clear_links_remove() {
  links_remove_.Clear();
}
 ::google::protobuf::uint32 ChannelState::links_remove(int index) const {
  // @@protoc_insertion_point(field_get:MumbleProto.ChannelState.links_remove)
  return links_remove_.Get(index);
}
 void ChannelState::set_links_remove(int index, ::google::protobuf::uint32 value) {
  links_remove_.Set(index, value);
  // @@protoc_insertion_point(field_set:MumbleProto.ChannelState.links_remove)
}
 void ChannelState::add_links_remove(::google::protobuf::uint32 value) {
  links_remove_.Add(value);
  // @@protoc_insertion_point(field_add:MumbleProto.ChannelState.links_remove)
}
 const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
ChannelState::links_remove() const {
  // @@protoc_insertion_point(field_list:MumbleProto.ChannelState.links_remove)
  return links_remove_;
}
 ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
ChannelState::mutable_links_remove() {
  // @@protoc_insertion_point(field_mutable_list:MumbleProto.ChannelState.links_remove)
  return &links_remove_;
}

// optional bool temporary = 8 [default = false];
bool ChannelState::has_temporary() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void ChannelState::set_has_temporary() {
  _has_bits_[0] |= 0x00000080u;
}
void ChannelState::clear_has_temporary() {
  _has_bits_[0] &= ~0x00000080u;
}
void ChannelState::clear_temporary() {
  temporary_ = false;
  clear_has_temporary();
}
 bool ChannelState::temporary() const {
  // @@protoc_insertion_point(field_get:MumbleProto.ChannelState.temporary)
  return temporary_;
}
 void ChannelState::set_temporary(bool value) {
  set_has_temporary();
  temporary_ = value;
  // @@protoc_insertion_point(field_set:MumbleProto.ChannelState.temporary)
}

// optional int32 position = 9 [default = 0];
bool ChannelState::has_position() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void ChannelState::set_has_position() {
  _has_bits_[0] |= 0x00000100u;
}
void ChannelState::clear_has_position() {
  _has_bits_[0] &= ~0x00000100u;
}
void ChannelState::clear_position() {
  position_ = 0;
  clear_has_position();
}
 ::google::protobuf::int32 ChannelState::position() const {
  // @@protoc_insertion_point(field_get:MumbleProto.ChannelState.position)
  return position_;
}
 void ChannelState::set_position(::google::protobuf::int32 value) {
  set_has_position();
  position_ = value;
  // @@protoc_insertion_point(field_set:MumbleProto.ChannelState.position)
}

// optional bytes description_hash = 10;
bool ChannelState::has_description_hash() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void ChannelState::set_has_description_hash() {
  _has_bits_[0] |= 0x00000200u;
}
void ChannelState::clear_has_description_hash() {
  _has_bits_[0] &= ~0x00000200u;
}
void ChannelState::clear_description_hash() {
  description_hash_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_description_hash();
}
 const ::std::string& ChannelState::description_hash() const {
  // @@protoc_insertion_point(field_get:MumbleProto.ChannelState.description_hash)
  return description_hash_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ChannelState::set_description_hash(const ::std::string& value) {
  set_has_description_hash();
  description_hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:MumbleProto.ChannelState.description_hash)
}
 void ChannelState::set_description_hash(const char* value) {
  set_has_description_hash();
  description_hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:MumbleProto.ChannelState.description_hash)
}
 void ChannelState::set_description_hash(const void* value, size_t size) {
  set_has_description_hash();
  description_hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:MumbleProto.ChannelState.description_hash)
}
 ::std::string* ChannelState::mutable_description_hash() {
  set_has_description_hash();
  // @@protoc_insertion_point(field_mutable:MumbleProto.ChannelState.description_hash)
  return description_hash_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ChannelState::release_description_hash() {
  // @@protoc_insertion_point(field_release:MumbleProto.ChannelState.description_hash)
  clear_has_description_hash();
  return description_hash_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ChannelState::set_allocated_description_hash(::std::string* description_hash) {
  if (description_hash != NULL) {
    set_has_description_hash();
  } else {
    clear_has_description_hash();
  }
  description_hash_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), description_hash);
  // @@protoc_insertion_point(field_set_allocated:MumbleProto.ChannelState.description_hash)
}

// optional uint32 max_users = 11;
bool ChannelState::has_max_users() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void ChannelState::set_has_max_users() {
  _has_bits_[0] |= 0x00000400u;
}
void ChannelState::clear_has_max_users() {
  _has_bits_[0] &= ~0x00000400u;
}
void ChannelState::clear_max_users() {
  max_users_ = 0u;
  clear_has_max_users();
}
 ::google::protobuf::uint32 ChannelState::max_users() const {
  // @@protoc_insertion_point(field_get:MumbleProto.ChannelState.max_users)
  return max_users_;
}
 void ChannelState::set_max_users(::google::protobuf::uint32 value) {
  set_has_max_users();
  max_users_ = value;
  // @@protoc_insertion_point(field_set:MumbleProto.ChannelState.max_users)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UserRemove::kSessionFieldNumber;
const int UserRemove::kActorFieldNumber;
const int UserRemove::kReasonFieldNumber;
const int UserRemove::kBanFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UserRemove::UserRemove()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MumbleProto.UserRemove)
}

void UserRemove::InitAsDefaultInstance() {
}

UserRemove::UserRemove(const UserRemove& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MumbleProto.UserRemove)
}

void UserRemove::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  session_ = 0u;
  actor_ = 0u;
  reason_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ban_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UserRemove::~UserRemove() {
  // @@protoc_insertion_point(destructor:MumbleProto.UserRemove)
  SharedDtor();
}

void UserRemove::SharedDtor() {
  reason_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void UserRemove::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UserRemove::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UserRemove_descriptor_;
}

const UserRemove& UserRemove::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Mumble_2eproto();
  return *default_instance_;
}

UserRemove* UserRemove::default_instance_ = NULL;

UserRemove* UserRemove::New(::google::protobuf::Arena* arena) const {
  UserRemove* n = new UserRemove;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void UserRemove::Clear() {
// @@protoc_insertion_point(message_clear_start:MumbleProto.UserRemove)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(UserRemove, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<UserRemove*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 15u) {
    ZR_(session_, actor_);
    if (has_reason()) {
      reason_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    ban_ = false;
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool UserRemove::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MumbleProto.UserRemove)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 session = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &session_)));
          set_has_session();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_actor;
        break;
      }

      // optional uint32 actor = 2;
      case 2: {
        if (tag == 16) {
         parse_actor:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &actor_)));
          set_has_actor();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_reason;
        break;
      }

      // optional string reason = 3;
      case 3: {
        if (tag == 26) {
         parse_reason:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_reason()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->reason().data(), this->reason().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "MumbleProto.UserRemove.reason");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_ban;
        break;
      }

      // optional bool ban = 4;
      case 4: {
        if (tag == 32) {
         parse_ban:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &ban_)));
          set_has_ban();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MumbleProto.UserRemove)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MumbleProto.UserRemove)
  return false;
#undef DO_
}

void UserRemove::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MumbleProto.UserRemove)
  // required uint32 session = 1;
  if (has_session()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->session(), output);
  }

  // optional uint32 actor = 2;
  if (has_actor()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->actor(), output);
  }

  // optional string reason = 3;
  if (has_reason()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->reason().data(), this->reason().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "MumbleProto.UserRemove.reason");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->reason(), output);
  }

  // optional bool ban = 4;
  if (has_ban()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->ban(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MumbleProto.UserRemove)
}

::google::protobuf::uint8* UserRemove::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MumbleProto.UserRemove)
  // required uint32 session = 1;
  if (has_session()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->session(), target);
  }

  // optional uint32 actor = 2;
  if (has_actor()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->actor(), target);
  }

  // optional string reason = 3;
  if (has_reason()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->reason().data(), this->reason().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "MumbleProto.UserRemove.reason");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->reason(), target);
  }

  // optional bool ban = 4;
  if (has_ban()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->ban(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MumbleProto.UserRemove)
  return target;
}

int UserRemove::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:MumbleProto.UserRemove)
  int total_size = 0;

  // required uint32 session = 1;
  if (has_session()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->session());
  }
  if (_has_bits_[1 / 32] & 14u) {
    // optional uint32 actor = 2;
    if (has_actor()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->actor());
    }

    // optional string reason = 3;
    if (has_reason()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->reason());
    }

    // optional bool ban = 4;
    if (has_ban()) {
      total_size += 1 + 1;
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserRemove::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MumbleProto.UserRemove)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const UserRemove* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const UserRemove>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MumbleProto.UserRemove)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MumbleProto.UserRemove)
    MergeFrom(*source);
  }
}

void UserRemove::MergeFrom(const UserRemove& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MumbleProto.UserRemove)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_session()) {
      set_session(from.session());
    }
    if (from.has_actor()) {
      set_actor(from.actor());
    }
    if (from.has_reason()) {
      set_has_reason();
      reason_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.reason_);
    }
    if (from.has_ban()) {
      set_ban(from.ban());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void UserRemove::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MumbleProto.UserRemove)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserRemove::CopyFrom(const UserRemove& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MumbleProto.UserRemove)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserRemove::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void UserRemove::Swap(UserRemove* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UserRemove::InternalSwap(UserRemove* other) {
  std::swap(session_, other->session_);
  std::swap(actor_, other->actor_);
  reason_.Swap(&other->reason_);
  std::swap(ban_, other->ban_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata UserRemove::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UserRemove_descriptor_;
  metadata.reflection = UserRemove_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// UserRemove

// required uint32 session = 1;
bool UserRemove::has_session() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void UserRemove::set_has_session() {
  _has_bits_[0] |= 0x00000001u;
}
void UserRemove::clear_has_session() {
  _has_bits_[0] &= ~0x00000001u;
}
void UserRemove::clear_session() {
  session_ = 0u;
  clear_has_session();
}
 ::google::protobuf::uint32 UserRemove::session() const {
  // @@protoc_insertion_point(field_get:MumbleProto.UserRemove.session)
  return session_;
}
 void UserRemove::set_session(::google::protobuf::uint32 value) {
  set_has_session();
  session_ = value;
  // @@protoc_insertion_point(field_set:MumbleProto.UserRemove.session)
}

// optional uint32 actor = 2;
bool UserRemove::has_actor() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void UserRemove::set_has_actor() {
  _has_bits_[0] |= 0x00000002u;
}
void UserRemove::clear_has_actor() {
  _has_bits_[0] &= ~0x00000002u;
}
void UserRemove::clear_actor() {
  actor_ = 0u;
  clear_has_actor();
}
 ::google::protobuf::uint32 UserRemove::actor() const {
  // @@protoc_insertion_point(field_get:MumbleProto.UserRemove.actor)
  return actor_;
}
 void UserRemove::set_actor(::google::protobuf::uint32 value) {
  set_has_actor();
  actor_ = value;
  // @@protoc_insertion_point(field_set:MumbleProto.UserRemove.actor)
}

// optional string reason = 3;
bool UserRemove::has_reason() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void UserRemove::set_has_reason() {
  _has_bits_[0] |= 0x00000004u;
}
void UserRemove::clear_has_reason() {
  _has_bits_[0] &= ~0x00000004u;
}
void UserRemove::clear_reason() {
  reason_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_reason();
}
 const ::std::string& UserRemove::reason() const {
  // @@protoc_insertion_point(field_get:MumbleProto.UserRemove.reason)
  return reason_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void UserRemove::set_reason(const ::std::string& value) {
  set_has_reason();
  reason_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:MumbleProto.UserRemove.reason)
}
 void UserRemove::set_reason(const char* value) {
  set_has_reason();
  reason_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:MumbleProto.UserRemove.reason)
}
 void UserRemove::set_reason(const char* value, size_t size) {
  set_has_reason();
  reason_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:MumbleProto.UserRemove.reason)
}
 ::std::string* UserRemove::mutable_reason() {
  set_has_reason();
  // @@protoc_insertion_point(field_mutable:MumbleProto.UserRemove.reason)
  return reason_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* UserRemove::release_reason() {
  // @@protoc_insertion_point(field_release:MumbleProto.UserRemove.reason)
  clear_has_reason();
  return reason_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void UserRemove::set_allocated_reason(::std::string* reason) {
  if (reason != NULL) {
    set_has_reason();
  } else {
    clear_has_reason();
  }
  reason_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), reason);
  // @@protoc_insertion_point(field_set_allocated:MumbleProto.UserRemove.reason)
}

// optional bool ban = 4;
bool UserRemove::has_ban() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void UserRemove::set_has_ban() {
  _has_bits_[0] |= 0x00000008u;
}
void UserRemove::clear_has_ban() {
  _has_bits_[0] &= ~0x00000008u;
}
void UserRemove::clear_ban() {
  ban_ = false;
  clear_has_ban();
}
 bool UserRemove::ban() const {
  // @@protoc_insertion_point(field_get:MumbleProto.UserRemove.ban)
  return ban_;
}
 void UserRemove::set_ban(bool value) {
  set_has_ban();
  ban_ = value;
  // @@protoc_insertion_point(field_set:MumbleProto.UserRemove.ban)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UserState::kSessionFieldNumber;
const int UserState::kActorFieldNumber;
const int UserState::kNameFieldNumber;
const int UserState::kUserIdFieldNumber;
const int UserState::kChannelIdFieldNumber;
const int UserState::kMuteFieldNumber;
const int UserState::kDeafFieldNumber;
const int UserState::kSuppressFieldNumber;
const int UserState::kSelfMuteFieldNumber;
const int UserState::kSelfDeafFieldNumber;
const int UserState::kTextureFieldNumber;
const int UserState::kPluginContextFieldNumber;
const int UserState::kPluginIdentityFieldNumber;
const int UserState::kCommentFieldNumber;
const int UserState::kHashFieldNumber;
const int UserState::kCommentHashFieldNumber;
const int UserState::kTextureHashFieldNumber;
const int UserState::kPrioritySpeakerFieldNumber;
const int UserState::kRecordingFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UserState::UserState()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MumbleProto.UserState)
}

void UserState::InitAsDefaultInstance() {
}

UserState::UserState(const UserState& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MumbleProto.UserState)
}

void UserState::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  session_ = 0u;
  actor_ = 0u;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  user_id_ = 0u;
  channel_id_ = 0u;
  mute_ = false;
  deaf_ = false;
  suppress_ = false;
  self_mute_ = false;
  self_deaf_ = false;
  texture_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  plugin_context_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  plugin_identity_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  comment_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  hash_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  comment_hash_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  texture_hash_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  priority_speaker_ = false;
  recording_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UserState::~UserState() {
  // @@protoc_insertion_point(destructor:MumbleProto.UserState)
  SharedDtor();
}

void UserState::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  texture_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  plugin_context_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  plugin_identity_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  comment_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  hash_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  comment_hash_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  texture_hash_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void UserState::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UserState::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UserState_descriptor_;
}

const UserState& UserState::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Mumble_2eproto();
  return *default_instance_;
}

UserState* UserState::default_instance_ = NULL;

UserState* UserState::New(::google::protobuf::Arena* arena) const {
  UserState* n = new UserState;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void UserState::Clear() {
// @@protoc_insertion_point(message_clear_start:MumbleProto.UserState)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(UserState, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<UserState*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 255u) {
    ZR_(session_, actor_);
    ZR_(user_id_, channel_id_);
    ZR_(mute_, suppress_);
    if (has_name()) {
      name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  if (_has_bits_[8 / 32] & 65280u) {
    ZR_(self_mute_, self_deaf_);
    if (has_texture()) {
      texture_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_plugin_context()) {
      plugin_context_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_plugin_identity()) {
      plugin_identity_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_comment()) {
      comment_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_hash()) {
      hash_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_comment_hash()) {
      comment_hash_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  if (_has_bits_[16 / 32] & 458752u) {
    ZR_(priority_speaker_, recording_);
    if (has_texture_hash()) {
      texture_hash_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool UserState::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MumbleProto.UserState)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 session = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &session_)));
          set_has_session();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_actor;
        break;
      }

      // optional uint32 actor = 2;
      case 2: {
        if (tag == 16) {
         parse_actor:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &actor_)));
          set_has_actor();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_name;
        break;
      }

      // optional string name = 3;
      case 3: {
        if (tag == 26) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "MumbleProto.UserState.name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_user_id;
        break;
      }

      // optional uint32 user_id = 4;
      case 4: {
        if (tag == 32) {
         parse_user_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_channel_id;
        break;
      }

      // optional uint32 channel_id = 5;
      case 5: {
        if (tag == 40) {
         parse_channel_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &channel_id_)));
          set_has_channel_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_mute;
        break;
      }

      // optional bool mute = 6;
      case 6: {
        if (tag == 48) {
         parse_mute:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &mute_)));
          set_has_mute();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_deaf;
        break;
      }

      // optional bool deaf = 7;
      case 7: {
        if (tag == 56) {
         parse_deaf:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &deaf_)));
          set_has_deaf();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_suppress;
        break;
      }

      // optional bool suppress = 8;
      case 8: {
        if (tag == 64) {
         parse_suppress:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &suppress_)));
          set_has_suppress();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_self_mute;
        break;
      }

      // optional bool self_mute = 9;
      case 9: {
        if (tag == 72) {
         parse_self_mute:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &self_mute_)));
          set_has_self_mute();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_self_deaf;
        break;
      }

      // optional bool self_deaf = 10;
      case 10: {
        if (tag == 80) {
         parse_self_deaf:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &self_deaf_)));
          set_has_self_deaf();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_texture;
        break;
      }

      // optional bytes texture = 11;
      case 11: {
        if (tag == 90) {
         parse_texture:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_texture()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_plugin_context;
        break;
      }

      // optional bytes plugin_context = 12;
      case 12: {
        if (tag == 98) {
         parse_plugin_context:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_plugin_context()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(106)) goto parse_plugin_identity;
        break;
      }

      // optional string plugin_identity = 13;
      case 13: {
        if (tag == 106) {
         parse_plugin_identity:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_plugin_identity()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->plugin_identity().data(), this->plugin_identity().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "MumbleProto.UserState.plugin_identity");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(114)) goto parse_comment;
        break;
      }

      // optional string comment = 14;
      case 14: {
        if (tag == 114) {
         parse_comment:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_comment()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->comment().data(), this->comment().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "MumbleProto.UserState.comment");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(122)) goto parse_hash;
        break;
      }

      // optional string hash = 15;
      case 15: {
        if (tag == 122) {
         parse_hash:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_hash()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->hash().data(), this->hash().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "MumbleProto.UserState.hash");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(130)) goto parse_comment_hash;
        break;
      }

      // optional bytes comment_hash = 16;
      case 16: {
        if (tag == 130) {
         parse_comment_hash:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_comment_hash()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(138)) goto parse_texture_hash;
        break;
      }

      // optional bytes texture_hash = 17;
      case 17: {
        if (tag == 138) {
         parse_texture_hash:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_texture_hash()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(144)) goto parse_priority_speaker;
        break;
      }

      // optional bool priority_speaker = 18;
      case 18: {
        if (tag == 144) {
         parse_priority_speaker:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &priority_speaker_)));
          set_has_priority_speaker();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(152)) goto parse_recording;
        break;
      }

      // optional bool recording = 19;
      case 19: {
        if (tag == 152) {
         parse_recording:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &recording_)));
          set_has_recording();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MumbleProto.UserState)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MumbleProto.UserState)
  return false;
#undef DO_
}

void UserState::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MumbleProto.UserState)
  // optional uint32 session = 1;
  if (has_session()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->session(), output);
  }

  // optional uint32 actor = 2;
  if (has_actor()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->actor(), output);
  }

  // optional string name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "MumbleProto.UserState.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->name(), output);
  }

  // optional uint32 user_id = 4;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->user_id(), output);
  }

  // optional uint32 channel_id = 5;
  if (has_channel_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->channel_id(), output);
  }

  // optional bool mute = 6;
  if (has_mute()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->mute(), output);
  }

  // optional bool deaf = 7;
  if (has_deaf()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->deaf(), output);
  }

  // optional bool suppress = 8;
  if (has_suppress()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->suppress(), output);
  }

  // optional bool self_mute = 9;
  if (has_self_mute()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->self_mute(), output);
  }

  // optional bool self_deaf = 10;
  if (has_self_deaf()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(10, this->self_deaf(), output);
  }

  // optional bytes texture = 11;
  if (has_texture()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      11, this->texture(), output);
  }

  // optional bytes plugin_context = 12;
  if (has_plugin_context()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      12, this->plugin_context(), output);
  }

  // optional string plugin_identity = 13;
  if (has_plugin_identity()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->plugin_identity().data(), this->plugin_identity().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "MumbleProto.UserState.plugin_identity");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      13, this->plugin_identity(), output);
  }

  // optional string comment = 14;
  if (has_comment()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->comment().data(), this->comment().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "MumbleProto.UserState.comment");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      14, this->comment(), output);
  }

  // optional string hash = 15;
  if (has_hash()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->hash().data(), this->hash().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "MumbleProto.UserState.hash");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      15, this->hash(), output);
  }

  // optional bytes comment_hash = 16;
  if (has_comment_hash()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      16, this->comment_hash(), output);
  }

  // optional bytes texture_hash = 17;
  if (has_texture_hash()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      17, this->texture_hash(), output);
  }

  // optional bool priority_speaker = 18;
  if (has_priority_speaker()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(18, this->priority_speaker(), output);
  }

  // optional bool recording = 19;
  if (has_recording()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(19, this->recording(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MumbleProto.UserState)
}

::google::protobuf::uint8* UserState::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MumbleProto.UserState)
  // optional uint32 session = 1;
  if (has_session()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->session(), target);
  }

  // optional uint32 actor = 2;
  if (has_actor()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->actor(), target);
  }

  // optional string name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "MumbleProto.UserState.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->name(), target);
  }

  // optional uint32 user_id = 4;
  if (has_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->user_id(), target);
  }

  // optional uint32 channel_id = 5;
  if (has_channel_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->channel_id(), target);
  }

  // optional bool mute = 6;
  if (has_mute()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->mute(), target);
  }

  // optional bool deaf = 7;
  if (has_deaf()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->deaf(), target);
  }

  // optional bool suppress = 8;
  if (has_suppress()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->suppress(), target);
  }

  // optional bool self_mute = 9;
  if (has_self_mute()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->self_mute(), target);
  }

  // optional bool self_deaf = 10;
  if (has_self_deaf()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(10, this->self_deaf(), target);
  }

  // optional bytes texture = 11;
  if (has_texture()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        11, this->texture(), target);
  }

  // optional bytes plugin_context = 12;
  if (has_plugin_context()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        12, this->plugin_context(), target);
  }

  // optional string plugin_identity = 13;
  if (has_plugin_identity()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->plugin_identity().data(), this->plugin_identity().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "MumbleProto.UserState.plugin_identity");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        13, this->plugin_identity(), target);
  }

  // optional string comment = 14;
  if (has_comment()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->comment().data(), this->comment().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "MumbleProto.UserState.comment");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        14, this->comment(), target);
  }

  // optional string hash = 15;
  if (has_hash()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->hash().data(), this->hash().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "MumbleProto.UserState.hash");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        15, this->hash(), target);
  }

  // optional bytes comment_hash = 16;
  if (has_comment_hash()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        16, this->comment_hash(), target);
  }

  // optional bytes texture_hash = 17;
  if (has_texture_hash()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        17, this->texture_hash(), target);
  }

  // optional bool priority_speaker = 18;
  if (has_priority_speaker()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(18, this->priority_speaker(), target);
  }

  // optional bool recording = 19;
  if (has_recording()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(19, this->recording(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MumbleProto.UserState)
  return target;
}

int UserState::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:MumbleProto.UserState)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 255u) {
    // optional uint32 session = 1;
    if (has_session()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->session());
    }

    // optional uint32 actor = 2;
    if (has_actor()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->actor());
    }

    // optional string name = 3;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional uint32 user_id = 4;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->user_id());
    }

    // optional uint32 channel_id = 5;
    if (has_channel_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->channel_id());
    }

    // optional bool mute = 6;
    if (has_mute()) {
      total_size += 1 + 1;
    }

    // optional bool deaf = 7;
    if (has_deaf()) {
      total_size += 1 + 1;
    }

    // optional bool suppress = 8;
    if (has_suppress()) {
      total_size += 1 + 1;
    }

  }
  if (_has_bits_[8 / 32] & 65280u) {
    // optional bool self_mute = 9;
    if (has_self_mute()) {
      total_size += 1 + 1;
    }

    // optional bool self_deaf = 10;
    if (has_self_deaf()) {
      total_size += 1 + 1;
    }

    // optional bytes texture = 11;
    if (has_texture()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->texture());
    }

    // optional bytes plugin_context = 12;
    if (has_plugin_context()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->plugin_context());
    }

    // optional string plugin_identity = 13;
    if (has_plugin_identity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->plugin_identity());
    }

    // optional string comment = 14;
    if (has_comment()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->comment());
    }

    // optional string hash = 15;
    if (has_hash()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->hash());
    }

    // optional bytes comment_hash = 16;
    if (has_comment_hash()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->comment_hash());
    }

  }
  if (_has_bits_[16 / 32] & 458752u) {
    // optional bytes texture_hash = 17;
    if (has_texture_hash()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->texture_hash());
    }

    // optional bool priority_speaker = 18;
    if (has_priority_speaker()) {
      total_size += 2 + 1;
    }

    // optional bool recording = 19;
    if (has_recording()) {
      total_size += 2 + 1;
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserState::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MumbleProto.UserState)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const UserState* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const UserState>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MumbleProto.UserState)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MumbleProto.UserState)
    MergeFrom(*source);
  }
}

void UserState::MergeFrom(const UserState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MumbleProto.UserState)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_session()) {
      set_session(from.session());
    }
    if (from.has_actor()) {
      set_actor(from.actor());
    }
    if (from.has_name()) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_channel_id()) {
      set_channel_id(from.channel_id());
    }
    if (from.has_mute()) {
      set_mute(from.mute());
    }
    if (from.has_deaf()) {
      set_deaf(from.deaf());
    }
    if (from.has_suppress()) {
      set_suppress(from.suppress());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_self_mute()) {
      set_self_mute(from.self_mute());
    }
    if (from.has_self_deaf()) {
      set_self_deaf(from.self_deaf());
    }
    if (from.has_texture()) {
      set_has_texture();
      texture_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.texture_);
    }
    if (from.has_plugin_context()) {
      set_has_plugin_context();
      plugin_context_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.plugin_context_);
    }
    if (from.has_plugin_identity()) {
      set_has_plugin_identity();
      plugin_identity_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.plugin_identity_);
    }
    if (from.has_comment()) {
      set_has_comment();
      comment_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.comment_);
    }
    if (from.has_hash()) {
      set_has_hash();
      hash_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.hash_);
    }
    if (from.has_comment_hash()) {
      set_has_comment_hash();
      comment_hash_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.comment_hash_);
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_texture_hash()) {
      set_has_texture_hash();
      texture_hash_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.texture_hash_);
    }
    if (from.has_priority_speaker()) {
      set_priority_speaker(from.priority_speaker());
    }
    if (from.has_recording()) {
      set_recording(from.recording());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void UserState::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MumbleProto.UserState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserState::CopyFrom(const UserState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MumbleProto.UserState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserState::IsInitialized() const {

  return true;
}

void UserState::Swap(UserState* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UserState::InternalSwap(UserState* other) {
  std::swap(session_, other->session_);
  std::swap(actor_, other->actor_);
  name_.Swap(&other->name_);
  std::swap(user_id_, other->user_id_);
  std::swap(channel_id_, other->channel_id_);
  std::swap(mute_, other->mute_);
  std::swap(deaf_, other->deaf_);
  std::swap(suppress_, other->suppress_);
  std::swap(self_mute_, other->self_mute_);
  std::swap(self_deaf_, other->self_deaf_);
  texture_.Swap(&other->texture_);
  plugin_context_.Swap(&other->plugin_context_);
  plugin_identity_.Swap(&other->plugin_identity_);
  comment_.Swap(&other->comment_);
  hash_.Swap(&other->hash_);
  comment_hash_.Swap(&other->comment_hash_);
  texture_hash_.Swap(&other->texture_hash_);
  std::swap(priority_speaker_, other->priority_speaker_);
  std::swap(recording_, other->recording_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata UserState::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UserState_descriptor_;
  metadata.reflection = UserState_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// UserState

// optional uint32 session = 1;
bool UserState::has_session() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void UserState::set_has_session() {
  _has_bits_[0] |= 0x00000001u;
}
void UserState::clear_has_session() {
  _has_bits_[0] &= ~0x00000001u;
}
void UserState::clear_session() {
  session_ = 0u;
  clear_has_session();
}
 ::google::protobuf::uint32 UserState::session() const {
  // @@protoc_insertion_point(field_get:MumbleProto.UserState.session)
  return session_;
}
 void UserState::set_session(::google::protobuf::uint32 value) {
  set_has_session();
  session_ = value;
  // @@protoc_insertion_point(field_set:MumbleProto.UserState.session)
}

// optional uint32 actor = 2;
bool UserState::has_actor() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void UserState::set_has_actor() {
  _has_bits_[0] |= 0x00000002u;
}
void UserState::clear_has_actor() {
  _has_bits_[0] &= ~0x00000002u;
}
void UserState::clear_actor() {
  actor_ = 0u;
  clear_has_actor();
}
 ::google::protobuf::uint32 UserState::actor() const {
  // @@protoc_insertion_point(field_get:MumbleProto.UserState.actor)
  return actor_;
}
 void UserState::set_actor(::google::protobuf::uint32 value) {
  set_has_actor();
  actor_ = value;
  // @@protoc_insertion_point(field_set:MumbleProto.UserState.actor)
}

// optional string name = 3;
bool UserState::has_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void UserState::set_has_name() {
  _has_bits_[0] |= 0x00000004u;
}
void UserState::clear_has_name() {
  _has_bits_[0] &= ~0x00000004u;
}
void UserState::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
 const ::std::string& UserState::name() const {
  // @@protoc_insertion_point(field_get:MumbleProto.UserState.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void UserState::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:MumbleProto.UserState.name)
}
 void UserState::set_name(const char* value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:MumbleProto.UserState.name)
}
 void UserState::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:MumbleProto.UserState.name)
}
 ::std::string* UserState::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:MumbleProto.UserState.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* UserState::release_name() {
  // @@protoc_insertion_point(field_release:MumbleProto.UserState.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void UserState::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:MumbleProto.UserState.name)
}

// optional uint32 user_id = 4;
bool UserState::has_user_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void UserState::set_has_user_id() {
  _has_bits_[0] |= 0x00000008u;
}
void UserState::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000008u;
}
void UserState::clear_user_id() {
  user_id_ = 0u;
  clear_has_user_id();
}
 ::google::protobuf::uint32 UserState::user_id() const {
  // @@protoc_insertion_point(field_get:MumbleProto.UserState.user_id)
  return user_id_;
}
 void UserState::set_user_id(::google::protobuf::uint32 value) {
  set_has_user_id();
  user_id_ = value;
  // @@protoc_insertion_point(field_set:MumbleProto.UserState.user_id)
}

// optional uint32 channel_id = 5;
bool UserState::has_channel_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void UserState::set_has_channel_id() {
  _has_bits_[0] |= 0x00000010u;
}
void UserState::clear_has_channel_id() {
  _has_bits_[0] &= ~0x00000010u;
}
void UserState::clear_channel_id() {
  channel_id_ = 0u;
  clear_has_channel_id();
}
 ::google::protobuf::uint32 UserState::channel_id() const {
  // @@protoc_insertion_point(field_get:MumbleProto.UserState.channel_id)
  return channel_id_;
}
 void UserState::set_channel_id(::google::protobuf::uint32 value) {
  set_has_channel_id();
  channel_id_ = value;
  // @@protoc_insertion_point(field_set:MumbleProto.UserState.channel_id)
}

// optional bool mute = 6;
bool UserState::has_mute() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void UserState::set_has_mute() {
  _has_bits_[0] |= 0x00000020u;
}
void UserState::clear_has_mute() {
  _has_bits_[0] &= ~0x00000020u;
}
void UserState::clear_mute() {
  mute_ = false;
  clear_has_mute();
}
 bool UserState::mute() const {
  // @@protoc_insertion_point(field_get:MumbleProto.UserState.mute)
  return mute_;
}
 void UserState::set_mute(bool value) {
  set_has_mute();
  mute_ = value;
  // @@protoc_insertion_point(field_set:MumbleProto.UserState.mute)
}

// optional bool deaf = 7;
bool UserState::has_deaf() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void UserState::set_has_deaf() {
  _has_bits_[0] |= 0x00000040u;
}
void UserState::clear_has_deaf() {
  _has_bits_[0] &= ~0x00000040u;
}
void UserState::clear_deaf() {
  deaf_ = false;
  clear_has_deaf();
}
 bool UserState::deaf() const {
  // @@protoc_insertion_point(field_get:MumbleProto.UserState.deaf)
  return deaf_;
}
 void UserState::set_deaf(bool value) {
  set_has_deaf();
  deaf_ = value;
  // @@protoc_insertion_point(field_set:MumbleProto.UserState.deaf)
}

// optional bool suppress = 8;
bool UserState::has_suppress() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void UserState::set_has_suppress() {
  _has_bits_[0] |= 0x00000080u;
}
void UserState::clear_has_suppress() {
  _has_bits_[0] &= ~0x00000080u;
}
void UserState::clear_suppress() {
  suppress_ = false;
  clear_has_suppress();
}
 bool UserState::suppress() const {
  // @@protoc_insertion_point(field_get:MumbleProto.UserState.suppress)
  return suppress_;
}
 void UserState::set_suppress(bool value) {
  set_has_suppress();
  suppress_ = value;
  // @@protoc_insertion_point(field_set:MumbleProto.UserState.suppress)
}

// optional bool self_mute = 9;
bool UserState::has_self_mute() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void UserState::set_has_self_mute() {
  _has_bits_[0] |= 0x00000100u;
}
void UserState::clear_has_self_mute() {
  _has_bits_[0] &= ~0x00000100u;
}
void UserState::clear_self_mute() {
  self_mute_ = false;
  clear_has_self_mute();
}
 bool UserState::self_mute() const {
  // @@protoc_insertion_point(field_get:MumbleProto.UserState.self_mute)
  return self_mute_;
}
 void UserState::set_self_mute(bool value) {
  set_has_self_mute();
  self_mute_ = value;
  // @@protoc_insertion_point(field_set:MumbleProto.UserState.self_mute)
}

// optional bool self_deaf = 10;
bool UserState::has_self_deaf() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void UserState::set_has_self_deaf() {
  _has_bits_[0] |= 0x00000200u;
}
void UserState::clear_has_self_deaf() {
  _has_bits_[0] &= ~0x00000200u;
}
void UserState::clear_self_deaf() {
  self_deaf_ = false;
  clear_has_self_deaf();
}
 bool UserState::self_deaf() const {
  // @@protoc_insertion_point(field_get:MumbleProto.UserState.self_deaf)
  return self_deaf_;
}
 void UserState::set_self_deaf(bool value) {
  set_has_self_deaf();
  self_deaf_ = value;
  // @@protoc_insertion_point(field_set:MumbleProto.UserState.self_deaf)
}

// optional bytes texture = 11;
bool UserState::has_texture() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void UserState::set_has_texture() {
  _has_bits_[0] |= 0x00000400u;
}
void UserState::clear_has_texture() {
  _has_bits_[0] &= ~0x00000400u;
}
void UserState::clear_texture() {
  texture_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_texture();
}
 const ::std::string& UserState::texture() const {
  // @@protoc_insertion_point(field_get:MumbleProto.UserState.texture)
  return texture_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void UserState::set_texture(const ::std::string& value) {
  set_has_texture();
  texture_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:MumbleProto.UserState.texture)
}
 void UserState::set_texture(const char* value) {
  set_has_texture();
  texture_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:MumbleProto.UserState.texture)
}
 void UserState::set_texture(const void* value, size_t size) {
  set_has_texture();
  texture_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:MumbleProto.UserState.texture)
}
 ::std::string* UserState::mutable_texture() {
  set_has_texture();
  // @@protoc_insertion_point(field_mutable:MumbleProto.UserState.texture)
  return texture_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* UserState::release_texture() {
  // @@protoc_insertion_point(field_release:MumbleProto.UserState.texture)
  clear_has_texture();
  return texture_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void UserState::set_allocated_texture(::std::string* texture) {
  if (texture != NULL) {
    set_has_texture();
  } else {
    clear_has_texture();
  }
  texture_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), texture);
  // @@protoc_insertion_point(field_set_allocated:MumbleProto.UserState.texture)
}

// optional bytes plugin_context = 12;
bool UserState::has_plugin_context() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void UserState::set_has_plugin_context() {
  _has_bits_[0] |= 0x00000800u;
}
void UserState::clear_has_plugin_context() {
  _has_bits_[0] &= ~0x00000800u;
}
void UserState::clear_plugin_context() {
  plugin_context_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_plugin_context();
}
 const ::std::string& UserState::plugin_context() const {
  // @@protoc_insertion_point(field_get:MumbleProto.UserState.plugin_context)
  return plugin_context_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void UserState::set_plugin_context(const ::std::string& value) {
  set_has_plugin_context();
  plugin_context_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:MumbleProto.UserState.plugin_context)
}
 void UserState::set_plugin_context(const char* value) {
  set_has_plugin_context();
  plugin_context_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:MumbleProto.UserState.plugin_context)
}
 void UserState::set_plugin_context(const void* value, size_t size) {
  set_has_plugin_context();
  plugin_context_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:MumbleProto.UserState.plugin_context)
}
 ::std::string* UserState::mutable_plugin_context() {
  set_has_plugin_context();
  // @@protoc_insertion_point(field_mutable:MumbleProto.UserState.plugin_context)
  return plugin_context_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* UserState::release_plugin_context() {
  // @@protoc_insertion_point(field_release:MumbleProto.UserState.plugin_context)
  clear_has_plugin_context();
  return plugin_context_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void UserState::set_allocated_plugin_context(::std::string* plugin_context) {
  if (plugin_context != NULL) {
    set_has_plugin_context();
  } else {
    clear_has_plugin_context();
  }
  plugin_context_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), plugin_context);
  // @@protoc_insertion_point(field_set_allocated:MumbleProto.UserState.plugin_context)
}

// optional string plugin_identity = 13;
bool UserState::has_plugin_identity() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void UserState::set_has_plugin_identity() {
  _has_bits_[0] |= 0x00001000u;
}
void UserState::clear_has_plugin_identity() {
  _has_bits_[0] &= ~0x00001000u;
}
void UserState::clear_plugin_identity() {
  plugin_identity_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_plugin_identity();
}
 const ::std::string& UserState::plugin_identity() const {
  // @@protoc_insertion_point(field_get:MumbleProto.UserState.plugin_identity)
  return plugin_identity_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void UserState::set_plugin_identity(const ::std::string& value) {
  set_has_plugin_identity();
  plugin_identity_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:MumbleProto.UserState.plugin_identity)
}
 void UserState::set_plugin_identity(const char* value) {
  set_has_plugin_identity();
  plugin_identity_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:MumbleProto.UserState.plugin_identity)
}
 void UserState::set_plugin_identity(const char* value, size_t size) {
  set_has_plugin_identity();
  plugin_identity_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:MumbleProto.UserState.plugin_identity)
}
 ::std::string* UserState::mutable_plugin_identity() {
  set_has_plugin_identity();
  // @@protoc_insertion_point(field_mutable:MumbleProto.UserState.plugin_identity)
  return plugin_identity_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* UserState::release_plugin_identity() {
  // @@protoc_insertion_point(field_release:MumbleProto.UserState.plugin_identity)
  clear_has_plugin_identity();
  return plugin_identity_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void UserState::set_allocated_plugin_identity(::std::string* plugin_identity) {
  if (plugin_identity != NULL) {
    set_has_plugin_identity();
  } else {
    clear_has_plugin_identity();
  }
  plugin_identity_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), plugin_identity);
  // @@protoc_insertion_point(field_set_allocated:MumbleProto.UserState.plugin_identity)
}

// optional string comment = 14;
bool UserState::has_comment() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
void UserState::set_has_comment() {
  _has_bits_[0] |= 0x00002000u;
}
void UserState::clear_has_comment() {
  _has_bits_[0] &= ~0x00002000u;
}
void UserState::clear_comment() {
  comment_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_comment();
}
 const ::std::string& UserState::comment() const {
  // @@protoc_insertion_point(field_get:MumbleProto.UserState.comment)
  return comment_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void UserState::set_comment(const ::std::string& value) {
  set_has_comment();
  comment_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:MumbleProto.UserState.comment)
}
 void UserState::set_comment(const char* value) {
  set_has_comment();
  comment_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:MumbleProto.UserState.comment)
}
 void UserState::set_comment(const char* value, size_t size) {
  set_has_comment();
  comment_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:MumbleProto.UserState.comment)
}
 ::std::string* UserState::mutable_comment() {
  set_has_comment();
  // @@protoc_insertion_point(field_mutable:MumbleProto.UserState.comment)
  return comment_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* UserState::release_comment() {
  // @@protoc_insertion_point(field_release:MumbleProto.UserState.comment)
  clear_has_comment();
  return comment_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void UserState::set_allocated_comment(::std::string* comment) {
  if (comment != NULL) {
    set_has_comment();
  } else {
    clear_has_comment();
  }
  comment_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), comment);
  // @@protoc_insertion_point(field_set_allocated:MumbleProto.UserState.comment)
}

// optional string hash = 15;
bool UserState::has_hash() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
void UserState::set_has_hash() {
  _has_bits_[0] |= 0x00004000u;
}
void UserState::clear_has_hash() {
  _has_bits_[0] &= ~0x00004000u;
}
void UserState::clear_hash() {
  hash_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_hash();
}
 const ::std::string& UserState::hash() const {
  // @@protoc_insertion_point(field_get:MumbleProto.UserState.hash)
  return hash_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void UserState::set_hash(const ::std::string& value) {
  set_has_hash();
  hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:MumbleProto.UserState.hash)
}
 void UserState::set_hash(const char* value) {
  set_has_hash();
  hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:MumbleProto.UserState.hash)
}
 void UserState::set_hash(const char* value, size_t size) {
  set_has_hash();
  hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:MumbleProto.UserState.hash)
}
 ::std::string* UserState::mutable_hash() {
  set_has_hash();
  // @@protoc_insertion_point(field_mutable:MumbleProto.UserState.hash)
  return hash_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* UserState::release_hash() {
  // @@protoc_insertion_point(field_release:MumbleProto.UserState.hash)
  clear_has_hash();
  return hash_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void UserState::set_allocated_hash(::std::string* hash) {
  if (hash != NULL) {
    set_has_hash();
  } else {
    clear_has_hash();
  }
  hash_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), hash);
  // @@protoc_insertion_point(field_set_allocated:MumbleProto.UserState.hash)
}

// optional bytes comment_hash = 16;
bool UserState::has_comment_hash() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
void UserState::set_has_comment_hash() {
  _has_bits_[0] |= 0x00008000u;
}
void UserState::clear_has_comment_hash() {
  _has_bits_[0] &= ~0x00008000u;
}
void UserState::clear_comment_hash() {
  comment_hash_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_comment_hash();
}
 const ::std::string& UserState::comment_hash() const {
  // @@protoc_insertion_point(field_get:MumbleProto.UserState.comment_hash)
  return comment_hash_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void UserState::set_comment_hash(const ::std::string& value) {
  set_has_comment_hash();
  comment_hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:MumbleProto.UserState.comment_hash)
}
 void UserState::set_comment_hash(const char* value) {
  set_has_comment_hash();
  comment_hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:MumbleProto.UserState.comment_hash)
}
 void UserState::set_comment_hash(const void* value, size_t size) {
  set_has_comment_hash();
  comment_hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:MumbleProto.UserState.comment_hash)
}
 ::std::string* UserState::mutable_comment_hash() {
  set_has_comment_hash();
  // @@protoc_insertion_point(field_mutable:MumbleProto.UserState.comment_hash)
  return comment_hash_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* UserState::release_comment_hash() {
  // @@protoc_insertion_point(field_release:MumbleProto.UserState.comment_hash)
  clear_has_comment_hash();
  return comment_hash_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void UserState::set_allocated_comment_hash(::std::string* comment_hash) {
  if (comment_hash != NULL) {
    set_has_comment_hash();
  } else {
    clear_has_comment_hash();
  }
  comment_hash_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), comment_hash);
  // @@protoc_insertion_point(field_set_allocated:MumbleProto.UserState.comment_hash)
}

// optional bytes texture_hash = 17;
bool UserState::has_texture_hash() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
void UserState::set_has_texture_hash() {
  _has_bits_[0] |= 0x00010000u;
}
void UserState::clear_has_texture_hash() {
  _has_bits_[0] &= ~0x00010000u;
}
void UserState::clear_texture_hash() {
  texture_hash_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_texture_hash();
}
 const ::std::string& UserState::texture_hash() const {
  // @@protoc_insertion_point(field_get:MumbleProto.UserState.texture_hash)
  return texture_hash_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void UserState::set_texture_hash(const ::std::string& value) {
  set_has_texture_hash();
  texture_hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:MumbleProto.UserState.texture_hash)
}
 void UserState::set_texture_hash(const char* value) {
  set_has_texture_hash();
  texture_hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:MumbleProto.UserState.texture_hash)
}
 void UserState::set_texture_hash(const void* value, size_t size) {
  set_has_texture_hash();
  texture_hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:MumbleProto.UserState.texture_hash)
}
 ::std::string* UserState::mutable_texture_hash() {
  set_has_texture_hash();
  // @@protoc_insertion_point(field_mutable:MumbleProto.UserState.texture_hash)
  return texture_hash_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* UserState::release_texture_hash() {
  // @@protoc_insertion_point(field_release:MumbleProto.UserState.texture_hash)
  clear_has_texture_hash();
  return texture_hash_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void UserState::set_allocated_texture_hash(::std::string* texture_hash) {
  if (texture_hash != NULL) {
    set_has_texture_hash();
  } else {
    clear_has_texture_hash();
  }
  texture_hash_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), texture_hash);
  // @@protoc_insertion_point(field_set_allocated:MumbleProto.UserState.texture_hash)
}

// optional bool priority_speaker = 18;
bool UserState::has_priority_speaker() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
void UserState::set_has_priority_speaker() {
  _has_bits_[0] |= 0x00020000u;
}
void UserState::clear_has_priority_speaker() {
  _has_bits_[0] &= ~0x00020000u;
}
void UserState::clear_priority_speaker() {
  priority_speaker_ = false;
  clear_has_priority_speaker();
}
 bool UserState::priority_speaker() const {
  // @@protoc_insertion_point(field_get:MumbleProto.UserState.priority_speaker)
  return priority_speaker_;
}
 void UserState::set_priority_speaker(bool value) {
  set_has_priority_speaker();
  priority_speaker_ = value;
  // @@protoc_insertion_point(field_set:MumbleProto.UserState.priority_speaker)
}

// optional bool recording = 19;
bool UserState::has_recording() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
void UserState::set_has_recording() {
  _has_bits_[0] |= 0x00040000u;
}
void UserState::clear_has_recording() {
  _has_bits_[0] &= ~0x00040000u;
}
void UserState::clear_recording() {
  recording_ = false;
  clear_has_recording();
}
 bool UserState::recording() const {
  // @@protoc_insertion_point(field_get:MumbleProto.UserState.recording)
  return recording_;
}
 void UserState::set_recording(bool value) {
  set_has_recording();
  recording_ = value;
  // @@protoc_insertion_point(field_set:MumbleProto.UserState.recording)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BanList_BanEntry::kAddressFieldNumber;
const int BanList_BanEntry::kMaskFieldNumber;
const int BanList_BanEntry::kNameFieldNumber;
const int BanList_BanEntry::kHashFieldNumber;
const int BanList_BanEntry::kReasonFieldNumber;
const int BanList_BanEntry::kStartFieldNumber;
const int BanList_BanEntry::kDurationFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BanList_BanEntry::BanList_BanEntry()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MumbleProto.BanList.BanEntry)
}

void BanList_BanEntry::InitAsDefaultInstance() {
}

BanList_BanEntry::BanList_BanEntry(const BanList_BanEntry& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MumbleProto.BanList.BanEntry)
}

void BanList_BanEntry::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  address_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mask_ = 0u;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  hash_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  reason_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  start_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  duration_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BanList_BanEntry::~BanList_BanEntry() {
  // @@protoc_insertion_point(destructor:MumbleProto.BanList.BanEntry)
  SharedDtor();
}

void BanList_BanEntry::SharedDtor() {
  address_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  hash_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  reason_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  start_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void BanList_BanEntry::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BanList_BanEntry::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BanList_BanEntry_descriptor_;
}

const BanList_BanEntry& BanList_BanEntry::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Mumble_2eproto();
  return *default_instance_;
}

BanList_BanEntry* BanList_BanEntry::default_instance_ = NULL;

BanList_BanEntry* BanList_BanEntry::New(::google::protobuf::Arena* arena) const {
  BanList_BanEntry* n = new BanList_BanEntry;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BanList_BanEntry::Clear() {
// @@protoc_insertion_point(message_clear_start:MumbleProto.BanList.BanEntry)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(BanList_BanEntry, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<BanList_BanEntry*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 127u) {
    ZR_(mask_, duration_);
    if (has_address()) {
      address_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_name()) {
      name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_hash()) {
      hash_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_reason()) {
      reason_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_start()) {
      start_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool BanList_BanEntry::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MumbleProto.BanList.BanEntry)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes address = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_address()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_mask;
        break;
      }

      // required uint32 mask = 2;
      case 2: {
        if (tag == 16) {
         parse_mask:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mask_)));
          set_has_mask();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_name;
        break;
      }

      // optional string name = 3;
      case 3: {
        if (tag == 26) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "MumbleProto.BanList.BanEntry.name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_hash;
        break;
      }

      // optional string hash = 4;
      case 4: {
        if (tag == 34) {
         parse_hash:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_hash()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->hash().data(), this->hash().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "MumbleProto.BanList.BanEntry.hash");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_reason;
        break;
      }

      // optional string reason = 5;
      case 5: {
        if (tag == 42) {
         parse_reason:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_reason()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->reason().data(), this->reason().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "MumbleProto.BanList.BanEntry.reason");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_start;
        break;
      }

      // optional string start = 6;
      case 6: {
        if (tag == 50) {
         parse_start:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_start()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->start().data(), this->start().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "MumbleProto.BanList.BanEntry.start");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_duration;
        break;
      }

      // optional uint32 duration = 7;
      case 7: {
        if (tag == 56) {
         parse_duration:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &duration_)));
          set_has_duration();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MumbleProto.BanList.BanEntry)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MumbleProto.BanList.BanEntry)
  return false;
#undef DO_
}

void BanList_BanEntry::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MumbleProto.BanList.BanEntry)
  // required bytes address = 1;
  if (has_address()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->address(), output);
  }

  // required uint32 mask = 2;
  if (has_mask()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->mask(), output);
  }

  // optional string name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "MumbleProto.BanList.BanEntry.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->name(), output);
  }

  // optional string hash = 4;
  if (has_hash()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->hash().data(), this->hash().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "MumbleProto.BanList.BanEntry.hash");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->hash(), output);
  }

  // optional string reason = 5;
  if (has_reason()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->reason().data(), this->reason().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "MumbleProto.BanList.BanEntry.reason");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->reason(), output);
  }

  // optional string start = 6;
  if (has_start()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->start().data(), this->start().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "MumbleProto.BanList.BanEntry.start");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->start(), output);
  }

  // optional uint32 duration = 7;
  if (has_duration()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->duration(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MumbleProto.BanList.BanEntry)
}

::google::protobuf::uint8* BanList_BanEntry::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MumbleProto.BanList.BanEntry)
  // required bytes address = 1;
  if (has_address()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->address(), target);
  }

  // required uint32 mask = 2;
  if (has_mask()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->mask(), target);
  }

  // optional string name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "MumbleProto.BanList.BanEntry.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->name(), target);
  }

  // optional string hash = 4;
  if (has_hash()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->hash().data(), this->hash().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "MumbleProto.BanList.BanEntry.hash");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->hash(), target);
  }

  // optional string reason = 5;
  if (has_reason()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->reason().data(), this->reason().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "MumbleProto.BanList.BanEntry.reason");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->reason(), target);
  }

  // optional string start = 6;
  if (has_start()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->start().data(), this->start().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "MumbleProto.BanList.BanEntry.start");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->start(), target);
  }

  // optional uint32 duration = 7;
  if (has_duration()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->duration(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MumbleProto.BanList.BanEntry)
  return target;
}

int BanList_BanEntry::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:MumbleProto.BanList.BanEntry)
  int total_size = 0;

  if (has_address()) {
    // required bytes address = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->address());
  }

  if (has_mask()) {
    // required uint32 mask = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->mask());
  }

  return total_size;
}
int BanList_BanEntry::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:MumbleProto.BanList.BanEntry)
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required bytes address = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->address());

    // required uint32 mask = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->mask());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_has_bits_[2 / 32] & 124u) {
    // optional string name = 3;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string hash = 4;
    if (has_hash()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->hash());
    }

    // optional string reason = 5;
    if (has_reason()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->reason());
    }

    // optional string start = 6;
    if (has_start()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->start());
    }

    // optional uint32 duration = 7;
    if (has_duration()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->duration());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BanList_BanEntry::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MumbleProto.BanList.BanEntry)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const BanList_BanEntry* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const BanList_BanEntry>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MumbleProto.BanList.BanEntry)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MumbleProto.BanList.BanEntry)
    MergeFrom(*source);
  }
}

void BanList_BanEntry::MergeFrom(const BanList_BanEntry& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MumbleProto.BanList.BanEntry)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_address()) {
      set_has_address();
      address_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.address_);
    }
    if (from.has_mask()) {
      set_mask(from.mask());
    }
    if (from.has_name()) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (from.has_hash()) {
      set_has_hash();
      hash_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.hash_);
    }
    if (from.has_reason()) {
      set_has_reason();
      reason_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.reason_);
    }
    if (from.has_start()) {
      set_has_start();
      start_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.start_);
    }
    if (from.has_duration()) {
      set_duration(from.duration());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void BanList_BanEntry::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MumbleProto.BanList.BanEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BanList_BanEntry::CopyFrom(const BanList_BanEntry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MumbleProto.BanList.BanEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BanList_BanEntry::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void BanList_BanEntry::Swap(BanList_BanEntry* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BanList_BanEntry::InternalSwap(BanList_BanEntry* other) {
  address_.Swap(&other->address_);
  std::swap(mask_, other->mask_);
  name_.Swap(&other->name_);
  hash_.Swap(&other->hash_);
  reason_.Swap(&other->reason_);
  start_.Swap(&other->start_);
  std::swap(duration_, other->duration_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BanList_BanEntry::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BanList_BanEntry_descriptor_;
  metadata.reflection = BanList_BanEntry_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BanList::kBansFieldNumber;
const int BanList::kQueryFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BanList::BanList()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MumbleProto.BanList)
}

void BanList::InitAsDefaultInstance() {
}

BanList::BanList(const BanList& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MumbleProto.BanList)
}

void BanList::SharedCtor() {
  _cached_size_ = 0;
  query_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BanList::~BanList() {
  // @@protoc_insertion_point(destructor:MumbleProto.BanList)
  SharedDtor();
}

void BanList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BanList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BanList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BanList_descriptor_;
}

const BanList& BanList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Mumble_2eproto();
  return *default_instance_;
}

BanList* BanList::default_instance_ = NULL;

BanList* BanList::New(::google::protobuf::Arena* arena) const {
  BanList* n = new BanList;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BanList::Clear() {
// @@protoc_insertion_point(message_clear_start:MumbleProto.BanList)
  query_ = false;
  bans_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool BanList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MumbleProto.BanList)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .MumbleProto.BanList.BanEntry bans = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_bans:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_bans()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_bans;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(16)) goto parse_query;
        break;
      }

      // optional bool query = 2 [default = false];
      case 2: {
        if (tag == 16) {
         parse_query:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &query_)));
          set_has_query();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MumbleProto.BanList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MumbleProto.BanList)
  return false;
#undef DO_
}

void BanList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MumbleProto.BanList)
  // repeated .MumbleProto.BanList.BanEntry bans = 1;
  for (unsigned int i = 0, n = this->bans_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->bans(i), output);
  }

  // optional bool query = 2 [default = false];
  if (has_query()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->query(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MumbleProto.BanList)
}

::google::protobuf::uint8* BanList::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MumbleProto.BanList)
  // repeated .MumbleProto.BanList.BanEntry bans = 1;
  for (unsigned int i = 0, n = this->bans_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->bans(i), false, target);
  }

  // optional bool query = 2 [default = false];
  if (has_query()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->query(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MumbleProto.BanList)
  return target;
}

int BanList::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:MumbleProto.BanList)
  int total_size = 0;

  // optional bool query = 2 [default = false];
  if (has_query()) {
    total_size += 1 + 1;
  }

  // repeated .MumbleProto.BanList.BanEntry bans = 1;
  total_size += 1 * this->bans_size();
  for (int i = 0; i < this->bans_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->bans(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BanList::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MumbleProto.BanList)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const BanList* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const BanList>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MumbleProto.BanList)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MumbleProto.BanList)
    MergeFrom(*source);
  }
}

void BanList::MergeFrom(const BanList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MumbleProto.BanList)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  bans_.MergeFrom(from.bans_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_query()) {
      set_query(from.query());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void BanList::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MumbleProto.BanList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BanList::CopyFrom(const BanList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MumbleProto.BanList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BanList::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->bans())) return false;
  return true;
}

void BanList::Swap(BanList* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BanList::InternalSwap(BanList* other) {
  bans_.UnsafeArenaSwap(&other->bans_);
  std::swap(query_, other->query_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BanList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BanList_descriptor_;
  metadata.reflection = BanList_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// BanList_BanEntry

// required bytes address = 1;
bool BanList_BanEntry::has_address() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void BanList_BanEntry::set_has_address() {
  _has_bits_[0] |= 0x00000001u;
}
void BanList_BanEntry::clear_has_address() {
  _has_bits_[0] &= ~0x00000001u;
}
void BanList_BanEntry::clear_address() {
  address_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_address();
}
 const ::std::string& BanList_BanEntry::address() const {
  // @@protoc_insertion_point(field_get:MumbleProto.BanList.BanEntry.address)
  return address_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BanList_BanEntry::set_address(const ::std::string& value) {
  set_has_address();
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:MumbleProto.BanList.BanEntry.address)
}
 void BanList_BanEntry::set_address(const char* value) {
  set_has_address();
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:MumbleProto.BanList.BanEntry.address)
}
 void BanList_BanEntry::set_address(const void* value, size_t size) {
  set_has_address();
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:MumbleProto.BanList.BanEntry.address)
}
 ::std::string* BanList_BanEntry::mutable_address() {
  set_has_address();
  // @@protoc_insertion_point(field_mutable:MumbleProto.BanList.BanEntry.address)
  return address_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* BanList_BanEntry::release_address() {
  // @@protoc_insertion_point(field_release:MumbleProto.BanList.BanEntry.address)
  clear_has_address();
  return address_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BanList_BanEntry::set_allocated_address(::std::string* address) {
  if (address != NULL) {
    set_has_address();
  } else {
    clear_has_address();
  }
  address_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), address);
  // @@protoc_insertion_point(field_set_allocated:MumbleProto.BanList.BanEntry.address)
}

// required uint32 mask = 2;
bool BanList_BanEntry::has_mask() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void BanList_BanEntry::set_has_mask() {
  _has_bits_[0] |= 0x00000002u;
}
void BanList_BanEntry::clear_has_mask() {
  _has_bits_[0] &= ~0x00000002u;
}
void BanList_BanEntry::clear_mask() {
  mask_ = 0u;
  clear_has_mask();
}
 ::google::protobuf::uint32 BanList_BanEntry::mask() const {
  // @@protoc_insertion_point(field_get:MumbleProto.BanList.BanEntry.mask)
  return mask_;
}
 void BanList_BanEntry::set_mask(::google::protobuf::uint32 value) {
  set_has_mask();
  mask_ = value;
  // @@protoc_insertion_point(field_set:MumbleProto.BanList.BanEntry.mask)
}

// optional string name = 3;
bool BanList_BanEntry::has_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void BanList_BanEntry::set_has_name() {
  _has_bits_[0] |= 0x00000004u;
}
void BanList_BanEntry::clear_has_name() {
  _has_bits_[0] &= ~0x00000004u;
}
void BanList_BanEntry::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
 const ::std::string& BanList_BanEntry::name() const {
  // @@protoc_insertion_point(field_get:MumbleProto.BanList.BanEntry.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BanList_BanEntry::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:MumbleProto.BanList.BanEntry.name)
}
 void BanList_BanEntry::set_name(const char* value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:MumbleProto.BanList.BanEntry.name)
}
 void BanList_BanEntry::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:MumbleProto.BanList.BanEntry.name)
}
 ::std::string* BanList_BanEntry::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:MumbleProto.BanList.BanEntry.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* BanList_BanEntry::release_name() {
  // @@protoc_insertion_point(field_release:MumbleProto.BanList.BanEntry.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BanList_BanEntry::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:MumbleProto.BanList.BanEntry.name)
}

// optional string hash = 4;
bool BanList_BanEntry::has_hash() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void BanList_BanEntry::set_has_hash() {
  _has_bits_[0] |= 0x00000008u;
}
void BanList_BanEntry::clear_has_hash() {
  _has_bits_[0] &= ~0x00000008u;
}
void BanList_BanEntry::clear_hash() {
  hash_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_hash();
}
 const ::std::string& BanList_BanEntry::hash() const {
  // @@protoc_insertion_point(field_get:MumbleProto.BanList.BanEntry.hash)
  return hash_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BanList_BanEntry::set_hash(const ::std::string& value) {
  set_has_hash();
  hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:MumbleProto.BanList.BanEntry.hash)
}
 void BanList_BanEntry::set_hash(const char* value) {
  set_has_hash();
  hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:MumbleProto.BanList.BanEntry.hash)
}
 void BanList_BanEntry::set_hash(const char* value, size_t size) {
  set_has_hash();
  hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:MumbleProto.BanList.BanEntry.hash)
}
 ::std::string* BanList_BanEntry::mutable_hash() {
  set_has_hash();
  // @@protoc_insertion_point(field_mutable:MumbleProto.BanList.BanEntry.hash)
  return hash_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* BanList_BanEntry::release_hash() {
  // @@protoc_insertion_point(field_release:MumbleProto.BanList.BanEntry.hash)
  clear_has_hash();
  return hash_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BanList_BanEntry::set_allocated_hash(::std::string* hash) {
  if (hash != NULL) {
    set_has_hash();
  } else {
    clear_has_hash();
  }
  hash_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), hash);
  // @@protoc_insertion_point(field_set_allocated:MumbleProto.BanList.BanEntry.hash)
}

// optional string reason = 5;
bool BanList_BanEntry::has_reason() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void BanList_BanEntry::set_has_reason() {
  _has_bits_[0] |= 0x00000010u;
}
void BanList_BanEntry::clear_has_reason() {
  _has_bits_[0] &= ~0x00000010u;
}
void BanList_BanEntry::clear_reason() {
  reason_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_reason();
}
 const ::std::string& BanList_BanEntry::reason() const {
  // @@protoc_insertion_point(field_get:MumbleProto.BanList.BanEntry.reason)
  return reason_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BanList_BanEntry::set_reason(const ::std::string& value) {
  set_has_reason();
  reason_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:MumbleProto.BanList.BanEntry.reason)
}
 void BanList_BanEntry::set_reason(const char* value) {
  set_has_reason();
  reason_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:MumbleProto.BanList.BanEntry.reason)
}
 void BanList_BanEntry::set_reason(const char* value, size_t size) {
  set_has_reason();
  reason_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:MumbleProto.BanList.BanEntry.reason)
}
 ::std::string* BanList_BanEntry::mutable_reason() {
  set_has_reason();
  // @@protoc_insertion_point(field_mutable:MumbleProto.BanList.BanEntry.reason)
  return reason_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* BanList_BanEntry::release_reason() {
  // @@protoc_insertion_point(field_release:MumbleProto.BanList.BanEntry.reason)
  clear_has_reason();
  return reason_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BanList_BanEntry::set_allocated_reason(::std::string* reason) {
  if (reason != NULL) {
    set_has_reason();
  } else {
    clear_has_reason();
  }
  reason_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), reason);
  // @@protoc_insertion_point(field_set_allocated:MumbleProto.BanList.BanEntry.reason)
}

// optional string start = 6;
bool BanList_BanEntry::has_start() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void BanList_BanEntry::set_has_start() {
  _has_bits_[0] |= 0x00000020u;
}
void BanList_BanEntry::clear_has_start() {
  _has_bits_[0] &= ~0x00000020u;
}
void BanList_BanEntry::clear_start() {
  start_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_start();
}
 const ::std::string& BanList_BanEntry::start() const {
  // @@protoc_insertion_point(field_get:MumbleProto.BanList.BanEntry.start)
  return start_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BanList_BanEntry::set_start(const ::std::string& value) {
  set_has_start();
  start_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:MumbleProto.BanList.BanEntry.start)
}
 void BanList_BanEntry::set_start(const char* value) {
  set_has_start();
  start_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:MumbleProto.BanList.BanEntry.start)
}
 void BanList_BanEntry::set_start(const char* value, size_t size) {
  set_has_start();
  start_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:MumbleProto.BanList.BanEntry.start)
}
 ::std::string* BanList_BanEntry::mutable_start() {
  set_has_start();
  // @@protoc_insertion_point(field_mutable:MumbleProto.BanList.BanEntry.start)
  return start_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* BanList_BanEntry::release_start() {
  // @@protoc_insertion_point(field_release:MumbleProto.BanList.BanEntry.start)
  clear_has_start();
  return start_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BanList_BanEntry::set_allocated_start(::std::string* start) {
  if (start != NULL) {
    set_has_start();
  } else {
    clear_has_start();
  }
  start_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), start);
  // @@protoc_insertion_point(field_set_allocated:MumbleProto.BanList.BanEntry.start)
}

// optional uint32 duration = 7;
bool BanList_BanEntry::has_duration() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void BanList_BanEntry::set_has_duration() {
  _has_bits_[0] |= 0x00000040u;
}
void BanList_BanEntry::clear_has_duration() {
  _has_bits_[0] &= ~0x00000040u;
}
void BanList_BanEntry::clear_duration() {
  duration_ = 0u;
  clear_has_duration();
}
 ::google::protobuf::uint32 BanList_BanEntry::duration() const {
  // @@protoc_insertion_point(field_get:MumbleProto.BanList.BanEntry.duration)
  return duration_;
}
 void BanList_BanEntry::set_duration(::google::protobuf::uint32 value) {
  set_has_duration();
  duration_ = value;
  // @@protoc_insertion_point(field_set:MumbleProto.BanList.BanEntry.duration)
}

// -------------------------------------------------------------------

// BanList

// repeated .MumbleProto.BanList.BanEntry bans = 1;
int BanList::bans_size() const {
  return bans_.size();
}
void BanList::clear_bans() {
  bans_.Clear();
}
const ::MumbleProto::BanList_BanEntry& BanList::bans(int index) const {
  // @@protoc_insertion_point(field_get:MumbleProto.BanList.bans)
  return bans_.Get(index);
}
::MumbleProto::BanList_BanEntry* BanList::mutable_bans(int index) {
  // @@protoc_insertion_point(field_mutable:MumbleProto.BanList.bans)
  return bans_.Mutable(index);
}
::MumbleProto::BanList_BanEntry* BanList::add_bans() {
  // @@protoc_insertion_point(field_add:MumbleProto.BanList.bans)
  return bans_.Add();
}
::google::protobuf::RepeatedPtrField< ::MumbleProto::BanList_BanEntry >*
BanList::mutable_bans() {
  // @@protoc_insertion_point(field_mutable_list:MumbleProto.BanList.bans)
  return &bans_;
}
const ::google::protobuf::RepeatedPtrField< ::MumbleProto::BanList_BanEntry >&
BanList::bans() const {
  // @@protoc_insertion_point(field_list:MumbleProto.BanList.bans)
  return bans_;
}

// optional bool query = 2 [default = false];
bool BanList::has_query() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void BanList::set_has_query() {
  _has_bits_[0] |= 0x00000002u;
}
void BanList::clear_has_query() {
  _has_bits_[0] &= ~0x00000002u;
}
void BanList::clear_query() {
  query_ = false;
  clear_has_query();
}
 bool BanList::query() const {
  // @@protoc_insertion_point(field_get:MumbleProto.BanList.query)
  return query_;
}
 void BanList::set_query(bool value) {
  set_has_query();
  query_ = value;
  // @@protoc_insertion_point(field_set:MumbleProto.BanList.query)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TextMessage::kActorFieldNumber;
const int TextMessage::kSessionFieldNumber;
const int TextMessage::kChannelIdFieldNumber;
const int TextMessage::kTreeIdFieldNumber;
const int TextMessage::kMessageFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TextMessage::TextMessage()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MumbleProto.TextMessage)
}

void TextMessage::InitAsDefaultInstance() {
}

TextMessage::TextMessage(const TextMessage& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MumbleProto.TextMessage)
}

void TextMessage::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  actor_ = 0u;
  message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TextMessage::~TextMessage() {
  // @@protoc_insertion_point(destructor:MumbleProto.TextMessage)
  SharedDtor();
}

void TextMessage::SharedDtor() {
  message_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void TextMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TextMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TextMessage_descriptor_;
}

const TextMessage& TextMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Mumble_2eproto();
  return *default_instance_;
}

TextMessage* TextMessage::default_instance_ = NULL;

TextMessage* TextMessage::New(::google::protobuf::Arena* arena) const {
  TextMessage* n = new TextMessage;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TextMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:MumbleProto.TextMessage)
  if (_has_bits_[0 / 32] & 17u) {
    actor_ = 0u;
    if (has_message()) {
      message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  session_.Clear();
  channel_id_.Clear();
  tree_id_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool TextMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MumbleProto.TextMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 actor = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &actor_)));
          set_has_actor();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_session;
        break;
      }

      // repeated uint32 session = 2;
      case 2: {
        if (tag == 16) {
         parse_session:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 16, input, this->mutable_session())));
        } else if (tag == 18) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_session())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_session;
        if (input->ExpectTag(24)) goto parse_channel_id;
        break;
      }

      // repeated uint32 channel_id = 3;
      case 3: {
        if (tag == 24) {
         parse_channel_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 24, input, this->mutable_channel_id())));
        } else if (tag == 26) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_channel_id())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_channel_id;
        if (input->ExpectTag(32)) goto parse_tree_id;
        break;
      }

      // repeated uint32 tree_id = 4;
      case 4: {
        if (tag == 32) {
         parse_tree_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 32, input, this->mutable_tree_id())));
        } else if (tag == 34) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_tree_id())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_tree_id;
        if (input->ExpectTag(42)) goto parse_message;
        break;
      }

      // required string message = 5;
      case 5: {
        if (tag == 42) {
         parse_message:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_message()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->message().data(), this->message().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "MumbleProto.TextMessage.message");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MumbleProto.TextMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MumbleProto.TextMessage)
  return false;
#undef DO_
}

void TextMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MumbleProto.TextMessage)
  // optional uint32 actor = 1;
  if (has_actor()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->actor(), output);
  }

  // repeated uint32 session = 2;
  for (int i = 0; i < this->session_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      2, this->session(i), output);
  }

  // repeated uint32 channel_id = 3;
  for (int i = 0; i < this->channel_id_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      3, this->channel_id(i), output);
  }

  // repeated uint32 tree_id = 4;
  for (int i = 0; i < this->tree_id_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      4, this->tree_id(i), output);
  }

  // required string message = 5;
  if (has_message()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->message().data(), this->message().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "MumbleProto.TextMessage.message");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->message(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MumbleProto.TextMessage)
}

::google::protobuf::uint8* TextMessage::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MumbleProto.TextMessage)
  // optional uint32 actor = 1;
  if (has_actor()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->actor(), target);
  }

  // repeated uint32 session = 2;
  for (int i = 0; i < this->session_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(2, this->session(i), target);
  }

  // repeated uint32 channel_id = 3;
  for (int i = 0; i < this->channel_id_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(3, this->channel_id(i), target);
  }

  // repeated uint32 tree_id = 4;
  for (int i = 0; i < this->tree_id_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(4, this->tree_id(i), target);
  }

  // required string message = 5;
  if (has_message()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->message().data(), this->message().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "MumbleProto.TextMessage.message");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->message(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MumbleProto.TextMessage)
  return target;
}

int TextMessage::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:MumbleProto.TextMessage)
  int total_size = 0;

  // required string message = 5;
  if (has_message()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->message());
  }
  // optional uint32 actor = 1;
  if (has_actor()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->actor());
  }

  // repeated uint32 session = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->session_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->session(i));
    }
    total_size += 1 * this->session_size() + data_size;
  }

  // repeated uint32 channel_id = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->channel_id_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->channel_id(i));
    }
    total_size += 1 * this->channel_id_size() + data_size;
  }

  // repeated uint32 tree_id = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->tree_id_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->tree_id(i));
    }
    total_size += 1 * this->tree_id_size() + data_size;
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TextMessage::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MumbleProto.TextMessage)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const TextMessage* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const TextMessage>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MumbleProto.TextMessage)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MumbleProto.TextMessage)
    MergeFrom(*source);
  }
}

void TextMessage::MergeFrom(const TextMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MumbleProto.TextMessage)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  session_.MergeFrom(from.session_);
  channel_id_.MergeFrom(from.channel_id_);
  tree_id_.MergeFrom(from.tree_id_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_actor()) {
      set_actor(from.actor());
    }
    if (from.has_message()) {
      set_has_message();
      message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.message_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void TextMessage::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MumbleProto.TextMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TextMessage::CopyFrom(const TextMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MumbleProto.TextMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TextMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000010) != 0x00000010) return false;

  return true;
}

void TextMessage::Swap(TextMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TextMessage::InternalSwap(TextMessage* other) {
  std::swap(actor_, other->actor_);
  session_.UnsafeArenaSwap(&other->session_);
  channel_id_.UnsafeArenaSwap(&other->channel_id_);
  tree_id_.UnsafeArenaSwap(&other->tree_id_);
  message_.Swap(&other->message_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TextMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TextMessage_descriptor_;
  metadata.reflection = TextMessage_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TextMessage

// optional uint32 actor = 1;
bool TextMessage::has_actor() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void TextMessage::set_has_actor() {
  _has_bits_[0] |= 0x00000001u;
}
void TextMessage::clear_has_actor() {
  _has_bits_[0] &= ~0x00000001u;
}
void TextMessage::clear_actor() {
  actor_ = 0u;
  clear_has_actor();
}
 ::google::protobuf::uint32 TextMessage::actor() const {
  // @@protoc_insertion_point(field_get:MumbleProto.TextMessage.actor)
  return actor_;
}
 void TextMessage::set_actor(::google::protobuf::uint32 value) {
  set_has_actor();
  actor_ = value;
  // @@protoc_insertion_point(field_set:MumbleProto.TextMessage.actor)
}

// repeated uint32 session = 2;
int TextMessage::session_size() const {
  return session_.size();
}
void TextMessage::clear_session() {
  session_.Clear();
}
 ::google::protobuf::uint32 TextMessage::session(int index) const {
  // @@protoc_insertion_point(field_get:MumbleProto.TextMessage.session)
  return session_.Get(index);
}
 void TextMessage::set_session(int index, ::google::protobuf::uint32 value) {
  session_.Set(index, value);
  // @@protoc_insertion_point(field_set:MumbleProto.TextMessage.session)
}
 void TextMessage::add_session(::google::protobuf::uint32 value) {
  session_.Add(value);
  // @@protoc_insertion_point(field_add:MumbleProto.TextMessage.session)
}
 const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
TextMessage::session() const {
  // @@protoc_insertion_point(field_list:MumbleProto.TextMessage.session)
  return session_;
}
 ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
TextMessage::mutable_session() {
  // @@protoc_insertion_point(field_mutable_list:MumbleProto.TextMessage.session)
  return &session_;
}

// repeated uint32 channel_id = 3;
int TextMessage::channel_id_size() const {
  return channel_id_.size();
}
void TextMessage::clear_channel_id() {
  channel_id_.Clear();
}
 ::google::protobuf::uint32 TextMessage::channel_id(int index) const {
  // @@protoc_insertion_point(field_get:MumbleProto.TextMessage.channel_id)
  return channel_id_.Get(index);
}
 void TextMessage::set_channel_id(int index, ::google::protobuf::uint32 value) {
  channel_id_.Set(index, value);
  // @@protoc_insertion_point(field_set:MumbleProto.TextMessage.channel_id)
}
 void TextMessage::add_channel_id(::google::protobuf::uint32 value) {
  channel_id_.Add(value);
  // @@protoc_insertion_point(field_add:MumbleProto.TextMessage.channel_id)
}
 const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
TextMessage::channel_id() const {
  // @@protoc_insertion_point(field_list:MumbleProto.TextMessage.channel_id)
  return channel_id_;
}
 ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
TextMessage::mutable_channel_id() {
  // @@protoc_insertion_point(field_mutable_list:MumbleProto.TextMessage.channel_id)
  return &channel_id_;
}

// repeated uint32 tree_id = 4;
int TextMessage::tree_id_size() const {
  return tree_id_.size();
}
void TextMessage::clear_tree_id() {
  tree_id_.Clear();
}
 ::google::protobuf::uint32 TextMessage::tree_id(int index) const {
  // @@protoc_insertion_point(field_get:MumbleProto.TextMessage.tree_id)
  return tree_id_.Get(index);
}
 void TextMessage::set_tree_id(int index, ::google::protobuf::uint32 value) {
  tree_id_.Set(index, value);
  // @@protoc_insertion_point(field_set:MumbleProto.TextMessage.tree_id)
}
 void TextMessage::add_tree_id(::google::protobuf::uint32 value) {
  tree_id_.Add(value);
  // @@protoc_insertion_point(field_add:MumbleProto.TextMessage.tree_id)
}
 const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
TextMessage::tree_id() const {
  // @@protoc_insertion_point(field_list:MumbleProto.TextMessage.tree_id)
  return tree_id_;
}
 ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
TextMessage::mutable_tree_id() {
  // @@protoc_insertion_point(field_mutable_list:MumbleProto.TextMessage.tree_id)
  return &tree_id_;
}

// required string message = 5;
bool TextMessage::has_message() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void TextMessage::set_has_message() {
  _has_bits_[0] |= 0x00000010u;
}
void TextMessage::clear_has_message() {
  _has_bits_[0] &= ~0x00000010u;
}
void TextMessage::clear_message() {
  message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_message();
}
 const ::std::string& TextMessage::message() const {
  // @@protoc_insertion_point(field_get:MumbleProto.TextMessage.message)
  return message_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void TextMessage::set_message(const ::std::string& value) {
  set_has_message();
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:MumbleProto.TextMessage.message)
}
 void TextMessage::set_message(const char* value) {
  set_has_message();
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:MumbleProto.TextMessage.message)
}
 void TextMessage::set_message(const char* value, size_t size) {
  set_has_message();
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:MumbleProto.TextMessage.message)
}
 ::std::string* TextMessage::mutable_message() {
  set_has_message();
  // @@protoc_insertion_point(field_mutable:MumbleProto.TextMessage.message)
  return message_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* TextMessage::release_message() {
  // @@protoc_insertion_point(field_release:MumbleProto.TextMessage.message)
  clear_has_message();
  return message_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void TextMessage::set_allocated_message(::std::string* message) {
  if (message != NULL) {
    set_has_message();
  } else {
    clear_has_message();
  }
  message_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), message);
  // @@protoc_insertion_point(field_set_allocated:MumbleProto.TextMessage.message)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

const ::google::protobuf::EnumDescriptor* PermissionDenied_DenyType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PermissionDenied_DenyType_descriptor_;
}
bool PermissionDenied_DenyType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const PermissionDenied_DenyType PermissionDenied::Text;
const PermissionDenied_DenyType PermissionDenied::Permission;
const PermissionDenied_DenyType PermissionDenied::SuperUser;
const PermissionDenied_DenyType PermissionDenied::ChannelName;
const PermissionDenied_DenyType PermissionDenied::TextTooLong;
const PermissionDenied_DenyType PermissionDenied::H9K;
const PermissionDenied_DenyType PermissionDenied::TemporaryChannel;
const PermissionDenied_DenyType PermissionDenied::MissingCertificate;
const PermissionDenied_DenyType PermissionDenied::UserName;
const PermissionDenied_DenyType PermissionDenied::ChannelFull;
const PermissionDenied_DenyType PermissionDenied::NestingLimit;
const PermissionDenied_DenyType PermissionDenied::DenyType_MIN;
const PermissionDenied_DenyType PermissionDenied::DenyType_MAX;
const int PermissionDenied::DenyType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PermissionDenied::kPermissionFieldNumber;
const int PermissionDenied::kChannelIdFieldNumber;
const int PermissionDenied::kSessionFieldNumber;
const int PermissionDenied::kReasonFieldNumber;
const int PermissionDenied::kTypeFieldNumber;
const int PermissionDenied::kNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PermissionDenied::PermissionDenied()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MumbleProto.PermissionDenied)
}

void PermissionDenied::InitAsDefaultInstance() {
}

PermissionDenied::PermissionDenied(const PermissionDenied& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MumbleProto.PermissionDenied)
}

void PermissionDenied::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  permission_ = 0u;
  channel_id_ = 0u;
  session_ = 0u;
  reason_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PermissionDenied::~PermissionDenied() {
  // @@protoc_insertion_point(destructor:MumbleProto.PermissionDenied)
  SharedDtor();
}

void PermissionDenied::SharedDtor() {
  reason_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void PermissionDenied::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PermissionDenied::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PermissionDenied_descriptor_;
}

const PermissionDenied& PermissionDenied::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Mumble_2eproto();
  return *default_instance_;
}

PermissionDenied* PermissionDenied::default_instance_ = NULL;

PermissionDenied* PermissionDenied::New(::google::protobuf::Arena* arena) const {
  PermissionDenied* n = new PermissionDenied;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PermissionDenied::Clear() {
// @@protoc_insertion_point(message_clear_start:MumbleProto.PermissionDenied)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(PermissionDenied, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<PermissionDenied*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 63u) {
    ZR_(permission_, channel_id_);
    ZR_(session_, type_);
    if (has_reason()) {
      reason_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_name()) {
      name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool PermissionDenied::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MumbleProto.PermissionDenied)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 permission = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &permission_)));
          set_has_permission();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_channel_id;
        break;
      }

      // optional uint32 channel_id = 2;
      case 2: {
        if (tag == 16) {
         parse_channel_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &channel_id_)));
          set_has_channel_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_session;
        break;
      }

      // optional uint32 session = 3;
      case 3: {
        if (tag == 24) {
         parse_session:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &session_)));
          set_has_session();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_reason;
        break;
      }

      // optional string reason = 4;
      case 4: {
        if (tag == 34) {
         parse_reason:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_reason()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->reason().data(), this->reason().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "MumbleProto.PermissionDenied.reason");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_type;
        break;
      }

      // optional .MumbleProto.PermissionDenied.DenyType type = 5;
      case 5: {
        if (tag == 40) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MumbleProto::PermissionDenied_DenyType_IsValid(value)) {
            set_type(static_cast< ::MumbleProto::PermissionDenied_DenyType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(5, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_name;
        break;
      }

      // optional string name = 6;
      case 6: {
        if (tag == 50) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "MumbleProto.PermissionDenied.name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MumbleProto.PermissionDenied)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MumbleProto.PermissionDenied)
  return false;
#undef DO_
}

void PermissionDenied::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MumbleProto.PermissionDenied)
  // optional uint32 permission = 1;
  if (has_permission()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->permission(), output);
  }

  // optional uint32 channel_id = 2;
  if (has_channel_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->channel_id(), output);
  }

  // optional uint32 session = 3;
  if (has_session()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->session(), output);
  }

  // optional string reason = 4;
  if (has_reason()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->reason().data(), this->reason().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "MumbleProto.PermissionDenied.reason");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->reason(), output);
  }

  // optional .MumbleProto.PermissionDenied.DenyType type = 5;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->type(), output);
  }

  // optional string name = 6;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "MumbleProto.PermissionDenied.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->name(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MumbleProto.PermissionDenied)
}

::google::protobuf::uint8* PermissionDenied::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MumbleProto.PermissionDenied)
  // optional uint32 permission = 1;
  if (has_permission()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->permission(), target);
  }

  // optional uint32 channel_id = 2;
  if (has_channel_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->channel_id(), target);
  }

  // optional uint32 session = 3;
  if (has_session()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->session(), target);
  }

  // optional string reason = 4;
  if (has_reason()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->reason().data(), this->reason().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "MumbleProto.PermissionDenied.reason");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->reason(), target);
  }

  // optional .MumbleProto.PermissionDenied.DenyType type = 5;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->type(), target);
  }

  // optional string name = 6;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "MumbleProto.PermissionDenied.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->name(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MumbleProto.PermissionDenied)
  return target;
}

int PermissionDenied::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:MumbleProto.PermissionDenied)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 63u) {
    // optional uint32 permission = 1;
    if (has_permission()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->permission());
    }

    // optional uint32 channel_id = 2;
    if (has_channel_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->channel_id());
    }

    // optional uint32 session = 3;
    if (has_session()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->session());
    }

    // optional string reason = 4;
    if (has_reason()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->reason());
    }

    // optional .MumbleProto.PermissionDenied.DenyType type = 5;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional string name = 6;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PermissionDenied::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MumbleProto.PermissionDenied)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const PermissionDenied* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const PermissionDenied>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MumbleProto.PermissionDenied)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MumbleProto.PermissionDenied)
    MergeFrom(*source);
  }
}

void PermissionDenied::MergeFrom(const PermissionDenied& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MumbleProto.PermissionDenied)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_permission()) {
      set_permission(from.permission());
    }
    if (from.has_channel_id()) {
      set_channel_id(from.channel_id());
    }
    if (from.has_session()) {
      set_session(from.session());
    }
    if (from.has_reason()) {
      set_has_reason();
      reason_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.reason_);
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_name()) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void PermissionDenied::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MumbleProto.PermissionDenied)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PermissionDenied::CopyFrom(const PermissionDenied& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MumbleProto.PermissionDenied)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PermissionDenied::IsInitialized() const {

  return true;
}

void PermissionDenied::Swap(PermissionDenied* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PermissionDenied::InternalSwap(PermissionDenied* other) {
  std::swap(permission_, other->permission_);
  std::swap(channel_id_, other->channel_id_);
  std::swap(session_, other->session_);
  reason_.Swap(&other->reason_);
  std::swap(type_, other->type_);
  name_.Swap(&other->name_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PermissionDenied::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PermissionDenied_descriptor_;
  metadata.reflection = PermissionDenied_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PermissionDenied

// optional uint32 permission = 1;
bool PermissionDenied::has_permission() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void PermissionDenied::set_has_permission() {
  _has_bits_[0] |= 0x00000001u;
}
void PermissionDenied::clear_has_permission() {
  _has_bits_[0] &= ~0x00000001u;
}
void PermissionDenied::clear_permission() {
  permission_ = 0u;
  clear_has_permission();
}
 ::google::protobuf::uint32 PermissionDenied::permission() const {
  // @@protoc_insertion_point(field_get:MumbleProto.PermissionDenied.permission)
  return permission_;
}
 void PermissionDenied::set_permission(::google::protobuf::uint32 value) {
  set_has_permission();
  permission_ = value;
  // @@protoc_insertion_point(field_set:MumbleProto.PermissionDenied.permission)
}

// optional uint32 channel_id = 2;
bool PermissionDenied::has_channel_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void PermissionDenied::set_has_channel_id() {
  _has_bits_[0] |= 0x00000002u;
}
void PermissionDenied::clear_has_channel_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void PermissionDenied::clear_channel_id() {
  channel_id_ = 0u;
  clear_has_channel_id();
}
 ::google::protobuf::uint32 PermissionDenied::channel_id() const {
  // @@protoc_insertion_point(field_get:MumbleProto.PermissionDenied.channel_id)
  return channel_id_;
}
 void PermissionDenied::set_channel_id(::google::protobuf::uint32 value) {
  set_has_channel_id();
  channel_id_ = value;
  // @@protoc_insertion_point(field_set:MumbleProto.PermissionDenied.channel_id)
}

// optional uint32 session = 3;
bool PermissionDenied::has_session() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void PermissionDenied::set_has_session() {
  _has_bits_[0] |= 0x00000004u;
}
void PermissionDenied::clear_has_session() {
  _has_bits_[0] &= ~0x00000004u;
}
void PermissionDenied::clear_session() {
  session_ = 0u;
  clear_has_session();
}
 ::google::protobuf::uint32 PermissionDenied::session() const {
  // @@protoc_insertion_point(field_get:MumbleProto.PermissionDenied.session)
  return session_;
}
 void PermissionDenied::set_session(::google::protobuf::uint32 value) {
  set_has_session();
  session_ = value;
  // @@protoc_insertion_point(field_set:MumbleProto.PermissionDenied.session)
}

// optional string reason = 4;
bool PermissionDenied::has_reason() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void PermissionDenied::set_has_reason() {
  _has_bits_[0] |= 0x00000008u;
}
void PermissionDenied::clear_has_reason() {
  _has_bits_[0] &= ~0x00000008u;
}
void PermissionDenied::clear_reason() {
  reason_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_reason();
}
 const ::std::string& PermissionDenied::reason() const {
  // @@protoc_insertion_point(field_get:MumbleProto.PermissionDenied.reason)
  return reason_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PermissionDenied::set_reason(const ::std::string& value) {
  set_has_reason();
  reason_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:MumbleProto.PermissionDenied.reason)
}
 void PermissionDenied::set_reason(const char* value) {
  set_has_reason();
  reason_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:MumbleProto.PermissionDenied.reason)
}
 void PermissionDenied::set_reason(const char* value, size_t size) {
  set_has_reason();
  reason_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:MumbleProto.PermissionDenied.reason)
}
 ::std::string* PermissionDenied::mutable_reason() {
  set_has_reason();
  // @@protoc_insertion_point(field_mutable:MumbleProto.PermissionDenied.reason)
  return reason_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* PermissionDenied::release_reason() {
  // @@protoc_insertion_point(field_release:MumbleProto.PermissionDenied.reason)
  clear_has_reason();
  return reason_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PermissionDenied::set_allocated_reason(::std::string* reason) {
  if (reason != NULL) {
    set_has_reason();
  } else {
    clear_has_reason();
  }
  reason_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), reason);
  // @@protoc_insertion_point(field_set_allocated:MumbleProto.PermissionDenied.reason)
}

// optional .MumbleProto.PermissionDenied.DenyType type = 5;
bool PermissionDenied::has_type() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void PermissionDenied::set_has_type() {
  _has_bits_[0] |= 0x00000010u;
}
void PermissionDenied::clear_has_type() {
  _has_bits_[0] &= ~0x00000010u;
}
void PermissionDenied::clear_type() {
  type_ = 0;
  clear_has_type();
}
 ::MumbleProto::PermissionDenied_DenyType PermissionDenied::type() const {
  // @@protoc_insertion_point(field_get:MumbleProto.PermissionDenied.type)
  return static_cast< ::MumbleProto::PermissionDenied_DenyType >(type_);
}
 void PermissionDenied::set_type(::MumbleProto::PermissionDenied_DenyType value) {
  assert(::MumbleProto::PermissionDenied_DenyType_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:MumbleProto.PermissionDenied.type)
}

// optional string name = 6;
bool PermissionDenied::has_name() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void PermissionDenied::set_has_name() {
  _has_bits_[0] |= 0x00000020u;
}
void PermissionDenied::clear_has_name() {
  _has_bits_[0] &= ~0x00000020u;
}
void PermissionDenied::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
 const ::std::string& PermissionDenied::name() const {
  // @@protoc_insertion_point(field_get:MumbleProto.PermissionDenied.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PermissionDenied::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:MumbleProto.PermissionDenied.name)
}
 void PermissionDenied::set_name(const char* value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:MumbleProto.PermissionDenied.name)
}
 void PermissionDenied::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:MumbleProto.PermissionDenied.name)
}
 ::std::string* PermissionDenied::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:MumbleProto.PermissionDenied.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* PermissionDenied::release_name() {
  // @@protoc_insertion_point(field_release:MumbleProto.PermissionDenied.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PermissionDenied::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:MumbleProto.PermissionDenied.name)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ACL_ChanGroup::kNameFieldNumber;
const int ACL_ChanGroup::kInheritedFieldNumber;
const int ACL_ChanGroup::kInheritFieldNumber;
const int ACL_ChanGroup::kInheritableFieldNumber;
const int ACL_ChanGroup::kAddFieldNumber;
const int ACL_ChanGroup::kRemoveFieldNumber;
const int ACL_ChanGroup::kInheritedMembersFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ACL_ChanGroup::ACL_ChanGroup()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MumbleProto.ACL.ChanGroup)
}

void ACL_ChanGroup::InitAsDefaultInstance() {
}

ACL_ChanGroup::ACL_ChanGroup(const ACL_ChanGroup& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MumbleProto.ACL.ChanGroup)
}

void ACL_ChanGroup::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  inherited_ = true;
  inherit_ = true;
  inheritable_ = true;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ACL_ChanGroup::~ACL_ChanGroup() {
  // @@protoc_insertion_point(destructor:MumbleProto.ACL.ChanGroup)
  SharedDtor();
}

void ACL_ChanGroup::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void ACL_ChanGroup::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ACL_ChanGroup::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ACL_ChanGroup_descriptor_;
}

const ACL_ChanGroup& ACL_ChanGroup::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Mumble_2eproto();
  return *default_instance_;
}

ACL_ChanGroup* ACL_ChanGroup::default_instance_ = NULL;

ACL_ChanGroup* ACL_ChanGroup::New(::google::protobuf::Arena* arena) const {
  ACL_ChanGroup* n = new ACL_ChanGroup;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ACL_ChanGroup::Clear() {
// @@protoc_insertion_point(message_clear_start:MumbleProto.ACL.ChanGroup)
  if (_has_bits_[0 / 32] & 15u) {
    if (has_name()) {
      name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    inherited_ = true;
    inherit_ = true;
    inheritable_ = true;
  }
  add_.Clear();
  remove_.Clear();
  inherited_members_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool ACL_ChanGroup::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MumbleProto.ACL.ChanGroup)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "MumbleProto.ACL.ChanGroup.name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_inherited;
        break;
      }

      // optional bool inherited = 2 [default = true];
      case 2: {
        if (tag == 16) {
         parse_inherited:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &inherited_)));
          set_has_inherited();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_inherit;
        break;
      }

      // optional bool inherit = 3 [default = true];
      case 3: {
        if (tag == 24) {
         parse_inherit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &inherit_)));
          set_has_inherit();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_inheritable;
        break;
      }

      // optional bool inheritable = 4 [default = true];
      case 4: {
        if (tag == 32) {
         parse_inheritable:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &inheritable_)));
          set_has_inheritable();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_add;
        break;
      }

      // repeated uint32 add = 5;
      case 5: {
        if (tag == 40) {
         parse_add:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 40, input, this->mutable_add())));
        } else if (tag == 42) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_add())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_add;
        if (input->ExpectTag(48)) goto parse_remove;
        break;
      }

      // repeated uint32 remove = 6;
      case 6: {
        if (tag == 48) {
         parse_remove:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 48, input, this->mutable_remove())));
        } else if (tag == 50) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_remove())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_remove;
        if (input->ExpectTag(56)) goto parse_inherited_members;
        break;
      }

      // repeated uint32 inherited_members = 7;
      case 7: {
        if (tag == 56) {
         parse_inherited_members:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 56, input, this->mutable_inherited_members())));
        } else if (tag == 58) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_inherited_members())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_inherited_members;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MumbleProto.ACL.ChanGroup)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MumbleProto.ACL.ChanGroup)
  return false;
#undef DO_
}

void ACL_ChanGroup::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MumbleProto.ACL.ChanGroup)
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "MumbleProto.ACL.ChanGroup.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // optional bool inherited = 2 [default = true];
  if (has_inherited()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->inherited(), output);
  }

  // optional bool inherit = 3 [default = true];
  if (has_inherit()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->inherit(), output);
  }

  // optional bool inheritable = 4 [default = true];
  if (has_inheritable()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->inheritable(), output);
  }

  // repeated uint32 add = 5;
  for (int i = 0; i < this->add_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      5, this->add(i), output);
  }

  // repeated uint32 remove = 6;
  for (int i = 0; i < this->remove_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      6, this->remove(i), output);
  }

  // repeated uint32 inherited_members = 7;
  for (int i = 0; i < this->inherited_members_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      7, this->inherited_members(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MumbleProto.ACL.ChanGroup)
}

::google::protobuf::uint8* ACL_ChanGroup::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MumbleProto.ACL.ChanGroup)
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "MumbleProto.ACL.ChanGroup.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional bool inherited = 2 [default = true];
  if (has_inherited()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->inherited(), target);
  }

  // optional bool inherit = 3 [default = true];
  if (has_inherit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->inherit(), target);
  }

  // optional bool inheritable = 4 [default = true];
  if (has_inheritable()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->inheritable(), target);
  }

  // repeated uint32 add = 5;
  for (int i = 0; i < this->add_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(5, this->add(i), target);
  }

  // repeated uint32 remove = 6;
  for (int i = 0; i < this->remove_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(6, this->remove(i), target);
  }

  // repeated uint32 inherited_members = 7;
  for (int i = 0; i < this->inherited_members_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(7, this->inherited_members(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MumbleProto.ACL.ChanGroup)
  return target;
}

int ACL_ChanGroup::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:MumbleProto.ACL.ChanGroup)
  int total_size = 0;

  // required string name = 1;
  if (has_name()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }
  if (_has_bits_[1 / 32] & 14u) {
    // optional bool inherited = 2 [default = true];
    if (has_inherited()) {
      total_size += 1 + 1;
    }

    // optional bool inherit = 3 [default = true];
    if (has_inherit()) {
      total_size += 1 + 1;
    }

    // optional bool inheritable = 4 [default = true];
    if (has_inheritable()) {
      total_size += 1 + 1;
    }

  }
  // repeated uint32 add = 5;
  {
    int data_size = 0;
    for (int i = 0; i < this->add_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->add(i));
    }
    total_size += 1 * this->add_size() + data_size;
  }

  // repeated uint32 remove = 6;
  {
    int data_size = 0;
    for (int i = 0; i < this->remove_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->remove(i));
    }
    total_size += 1 * this->remove_size() + data_size;
  }

  // repeated uint32 inherited_members = 7;
  {
    int data_size = 0;
    for (int i = 0; i < this->inherited_members_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->inherited_members(i));
    }
    total_size += 1 * this->inherited_members_size() + data_size;
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ACL_ChanGroup::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MumbleProto.ACL.ChanGroup)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const ACL_ChanGroup* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ACL_ChanGroup>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MumbleProto.ACL.ChanGroup)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MumbleProto.ACL.ChanGroup)
    MergeFrom(*source);
  }
}

void ACL_ChanGroup::MergeFrom(const ACL_ChanGroup& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MumbleProto.ACL.ChanGroup)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  add_.MergeFrom(from.add_);
  remove_.MergeFrom(from.remove_);
  inherited_members_.MergeFrom(from.inherited_members_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (from.has_inherited()) {
      set_inherited(from.inherited());
    }
    if (from.has_inherit()) {
      set_inherit(from.inherit());
    }
    if (from.has_inheritable()) {
      set_inheritable(from.inheritable());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void ACL_ChanGroup::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MumbleProto.ACL.ChanGroup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ACL_ChanGroup::CopyFrom(const ACL_ChanGroup& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MumbleProto.ACL.ChanGroup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ACL_ChanGroup::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ACL_ChanGroup::Swap(ACL_ChanGroup* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ACL_ChanGroup::InternalSwap(ACL_ChanGroup* other) {
  name_.Swap(&other->name_);
  std::swap(inherited_, other->inherited_);
  std::swap(inherit_, other->inherit_);
  std::swap(inheritable_, other->inheritable_);
  add_.UnsafeArenaSwap(&other->add_);
  remove_.UnsafeArenaSwap(&other->remove_);
  inherited_members_.UnsafeArenaSwap(&other->inherited_members_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ACL_ChanGroup::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ACL_ChanGroup_descriptor_;
  metadata.reflection = ACL_ChanGroup_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ACL_ChanACL::kApplyHereFieldNumber;
const int ACL_ChanACL::kApplySubsFieldNumber;
const int ACL_ChanACL::kInheritedFieldNumber;
const int ACL_ChanACL::kUserIdFieldNumber;
const int ACL_ChanACL::kGroupFieldNumber;
const int ACL_ChanACL::kGrantFieldNumber;
const int ACL_ChanACL::kDenyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ACL_ChanACL::ACL_ChanACL()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MumbleProto.ACL.ChanACL)
}

void ACL_ChanACL::InitAsDefaultInstance() {
}

ACL_ChanACL::ACL_ChanACL(const ACL_ChanACL& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MumbleProto.ACL.ChanACL)
}

void ACL_ChanACL::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  apply_here_ = true;
  apply_subs_ = true;
  inherited_ = true;
  user_id_ = 0u;
  group_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  grant_ = 0u;
  deny_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ACL_ChanACL::~ACL_ChanACL() {
  // @@protoc_insertion_point(destructor:MumbleProto.ACL.ChanACL)
  SharedDtor();
}

void ACL_ChanACL::SharedDtor() {
  group_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void ACL_ChanACL::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ACL_ChanACL::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ACL_ChanACL_descriptor_;
}

const ACL_ChanACL& ACL_ChanACL::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Mumble_2eproto();
  return *default_instance_;
}

ACL_ChanACL* ACL_ChanACL::default_instance_ = NULL;

ACL_ChanACL* ACL_ChanACL::New(::google::protobuf::Arena* arena) const {
  ACL_ChanACL* n = new ACL_ChanACL;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ACL_ChanACL::Clear() {
// @@protoc_insertion_point(message_clear_start:MumbleProto.ACL.ChanACL)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(ACL_ChanACL, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<ACL_ChanACL*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 127u) {
    ZR_(grant_, deny_);
    apply_here_ = true;
    apply_subs_ = true;
    inherited_ = true;
    user_id_ = 0u;
    if (has_group()) {
      group_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool ACL_ChanACL::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MumbleProto.ACL.ChanACL)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool apply_here = 1 [default = true];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &apply_here_)));
          set_has_apply_here();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_apply_subs;
        break;
      }

      // optional bool apply_subs = 2 [default = true];
      case 2: {
        if (tag == 16) {
         parse_apply_subs:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &apply_subs_)));
          set_has_apply_subs();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_inherited;
        break;
      }

      // optional bool inherited = 3 [default = true];
      case 3: {
        if (tag == 24) {
         parse_inherited:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &inherited_)));
          set_has_inherited();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_user_id;
        break;
      }

      // optional uint32 user_id = 4;
      case 4: {
        if (tag == 32) {
         parse_user_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_group;
        break;
      }

      // optional string group = 5;
      case 5: {
        if (tag == 42) {
         parse_group:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_group()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->group().data(), this->group().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "MumbleProto.ACL.ChanACL.group");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_grant;
        break;
      }

      // optional uint32 grant = 6;
      case 6: {
        if (tag == 48) {
         parse_grant:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &grant_)));
          set_has_grant();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_deny;
        break;
      }

      // optional uint32 deny = 7;
      case 7: {
        if (tag == 56) {
         parse_deny:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &deny_)));
          set_has_deny();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MumbleProto.ACL.ChanACL)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MumbleProto.ACL.ChanACL)
  return false;
#undef DO_
}

void ACL_ChanACL::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MumbleProto.ACL.ChanACL)
  // optional bool apply_here = 1 [default = true];
  if (has_apply_here()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->apply_here(), output);
  }

  // optional bool apply_subs = 2 [default = true];
  if (has_apply_subs()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->apply_subs(), output);
  }

  // optional bool inherited = 3 [default = true];
  if (has_inherited()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->inherited(), output);
  }

  // optional uint32 user_id = 4;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->user_id(), output);
  }

  // optional string group = 5;
  if (has_group()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->group().data(), this->group().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "MumbleProto.ACL.ChanACL.group");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->group(), output);
  }

  // optional uint32 grant = 6;
  if (has_grant()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->grant(), output);
  }

  // optional uint32 deny = 7;
  if (has_deny()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->deny(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MumbleProto.ACL.ChanACL)
}

::google::protobuf::uint8* ACL_ChanACL::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MumbleProto.ACL.ChanACL)
  // optional bool apply_here = 1 [default = true];
  if (has_apply_here()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->apply_here(), target);
  }

  // optional bool apply_subs = 2 [default = true];
  if (has_apply_subs()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->apply_subs(), target);
  }

  // optional bool inherited = 3 [default = true];
  if (has_inherited()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->inherited(), target);
  }

  // optional uint32 user_id = 4;
  if (has_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->user_id(), target);
  }

  // optional string group = 5;
  if (has_group()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->group().data(), this->group().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "MumbleProto.ACL.ChanACL.group");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->group(), target);
  }

  // optional uint32 grant = 6;
  if (has_grant()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->grant(), target);
  }

  // optional uint32 deny = 7;
  if (has_deny()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->deny(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MumbleProto.ACL.ChanACL)
  return target;
}

int ACL_ChanACL::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:MumbleProto.ACL.ChanACL)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 127u) {
    // optional bool apply_here = 1 [default = true];
    if (has_apply_here()) {
      total_size += 1 + 1;
    }

    // optional bool apply_subs = 2 [default = true];
    if (has_apply_subs()) {
      total_size += 1 + 1;
    }

    // optional bool inherited = 3 [default = true];
    if (has_inherited()) {
      total_size += 1 + 1;
    }

    // optional uint32 user_id = 4;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->user_id());
    }

    // optional string group = 5;
    if (has_group()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->group());
    }

    // optional uint32 grant = 6;
    if (has_grant()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->grant());
    }

    // optional uint32 deny = 7;
    if (has_deny()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->deny());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ACL_ChanACL::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MumbleProto.ACL.ChanACL)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const ACL_ChanACL* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ACL_ChanACL>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MumbleProto.ACL.ChanACL)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MumbleProto.ACL.ChanACL)
    MergeFrom(*source);
  }
}

void ACL_ChanACL::MergeFrom(const ACL_ChanACL& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MumbleProto.ACL.ChanACL)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_apply_here()) {
      set_apply_here(from.apply_here());
    }
    if (from.has_apply_subs()) {
      set_apply_subs(from.apply_subs());
    }
    if (from.has_inherited()) {
      set_inherited(from.inherited());
    }
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_group()) {
      set_has_group();
      group_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.group_);
    }
    if (from.has_grant()) {
      set_grant(from.grant());
    }
    if (from.has_deny()) {
      set_deny(from.deny());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void ACL_ChanACL::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MumbleProto.ACL.ChanACL)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ACL_ChanACL::CopyFrom(const ACL_ChanACL& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MumbleProto.ACL.ChanACL)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ACL_ChanACL::IsInitialized() const {

  return true;
}

void ACL_ChanACL::Swap(ACL_ChanACL* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ACL_ChanACL::InternalSwap(ACL_ChanACL* other) {
  std::swap(apply_here_, other->apply_here_);
  std::swap(apply_subs_, other->apply_subs_);
  std::swap(inherited_, other->inherited_);
  std::swap(user_id_, other->user_id_);
  group_.Swap(&other->group_);
  std::swap(grant_, other->grant_);
  std::swap(deny_, other->deny_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ACL_ChanACL::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ACL_ChanACL_descriptor_;
  metadata.reflection = ACL_ChanACL_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ACL::kChannelIdFieldNumber;
const int ACL::kInheritAclsFieldNumber;
const int ACL::kGroupsFieldNumber;
const int ACL::kAclsFieldNumber;
const int ACL::kQueryFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ACL::ACL()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MumbleProto.ACL)
}

void ACL::InitAsDefaultInstance() {
}

ACL::ACL(const ACL& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MumbleProto.ACL)
}

void ACL::SharedCtor() {
  _cached_size_ = 0;
  channel_id_ = 0u;
  inherit_acls_ = true;
  query_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ACL::~ACL() {
  // @@protoc_insertion_point(destructor:MumbleProto.ACL)
  SharedDtor();
}

void ACL::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ACL::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ACL::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ACL_descriptor_;
}

const ACL& ACL::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Mumble_2eproto();
  return *default_instance_;
}

ACL* ACL::default_instance_ = NULL;

ACL* ACL::New(::google::protobuf::Arena* arena) const {
  ACL* n = new ACL;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ACL::Clear() {
// @@protoc_insertion_point(message_clear_start:MumbleProto.ACL)
  if (_has_bits_[0 / 32] & 19u) {
    channel_id_ = 0u;
    inherit_acls_ = true;
    query_ = false;
  }
  groups_.Clear();
  acls_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool ACL::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MumbleProto.ACL)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 channel_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &channel_id_)));
          set_has_channel_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_inherit_acls;
        break;
      }

      // optional bool inherit_acls = 2 [default = true];
      case 2: {
        if (tag == 16) {
         parse_inherit_acls:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &inherit_acls_)));
          set_has_inherit_acls();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_groups;
        break;
      }

      // repeated .MumbleProto.ACL.ChanGroup groups = 3;
      case 3: {
        if (tag == 26) {
         parse_groups:
          DO_(input->IncrementRecursionDepth());
         parse_loop_groups:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_groups()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_loop_groups;
        if (input->ExpectTag(34)) goto parse_loop_acls;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .MumbleProto.ACL.ChanACL acls = 4;
      case 4: {
        if (tag == 34) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_acls:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_acls()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_loop_acls;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(40)) goto parse_query;
        break;
      }

      // optional bool query = 5 [default = false];
      case 5: {
        if (tag == 40) {
         parse_query:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &query_)));
          set_has_query();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MumbleProto.ACL)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MumbleProto.ACL)
  return false;
#undef DO_
}

void ACL::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MumbleProto.ACL)
  // required uint32 channel_id = 1;
  if (has_channel_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->channel_id(), output);
  }

  // optional bool inherit_acls = 2 [default = true];
  if (has_inherit_acls()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->inherit_acls(), output);
  }

  // repeated .MumbleProto.ACL.ChanGroup groups = 3;
  for (unsigned int i = 0, n = this->groups_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->groups(i), output);
  }

  // repeated .MumbleProto.ACL.ChanACL acls = 4;
  for (unsigned int i = 0, n = this->acls_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->acls(i), output);
  }

  // optional bool query = 5 [default = false];
  if (has_query()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->query(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MumbleProto.ACL)
}

::google::protobuf::uint8* ACL::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MumbleProto.ACL)
  // required uint32 channel_id = 1;
  if (has_channel_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->channel_id(), target);
  }

  // optional bool inherit_acls = 2 [default = true];
  if (has_inherit_acls()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->inherit_acls(), target);
  }

  // repeated .MumbleProto.ACL.ChanGroup groups = 3;
  for (unsigned int i = 0, n = this->groups_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->groups(i), false, target);
  }

  // repeated .MumbleProto.ACL.ChanACL acls = 4;
  for (unsigned int i = 0, n = this->acls_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, this->acls(i), false, target);
  }

  // optional bool query = 5 [default = false];
  if (has_query()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->query(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MumbleProto.ACL)
  return target;
}

int ACL::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:MumbleProto.ACL)
  int total_size = 0;

  // required uint32 channel_id = 1;
  if (has_channel_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->channel_id());
  }
  if (_has_bits_[1 / 32] & 18u) {
    // optional bool inherit_acls = 2 [default = true];
    if (has_inherit_acls()) {
      total_size += 1 + 1;
    }

    // optional bool query = 5 [default = false];
    if (has_query()) {
      total_size += 1 + 1;
    }

  }
  // repeated .MumbleProto.ACL.ChanGroup groups = 3;
  total_size += 1 * this->groups_size();
  for (int i = 0; i < this->groups_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->groups(i));
  }

  // repeated .MumbleProto.ACL.ChanACL acls = 4;
  total_size += 1 * this->acls_size();
  for (int i = 0; i < this->acls_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->acls(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ACL::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MumbleProto.ACL)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const ACL* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ACL>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MumbleProto.ACL)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MumbleProto.ACL)
    MergeFrom(*source);
  }
}

void ACL::MergeFrom(const ACL& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MumbleProto.ACL)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  groups_.MergeFrom(from.groups_);
  acls_.MergeFrom(from.acls_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_channel_id()) {
      set_channel_id(from.channel_id());
    }
    if (from.has_inherit_acls()) {
      set_inherit_acls(from.inherit_acls());
    }
    if (from.has_query()) {
      set_query(from.query());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void ACL::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MumbleProto.ACL)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ACL::CopyFrom(const ACL& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MumbleProto.ACL)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ACL::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->groups())) return false;
  return true;
}

void ACL::Swap(ACL* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ACL::InternalSwap(ACL* other) {
  std::swap(channel_id_, other->channel_id_);
  std::swap(inherit_acls_, other->inherit_acls_);
  groups_.UnsafeArenaSwap(&other->groups_);
  acls_.UnsafeArenaSwap(&other->acls_);
  std::swap(query_, other->query_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ACL::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ACL_descriptor_;
  metadata.reflection = ACL_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ACL_ChanGroup

// required string name = 1;
bool ACL_ChanGroup::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ACL_ChanGroup::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
void ACL_ChanGroup::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void ACL_ChanGroup::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
 const ::std::string& ACL_ChanGroup::name() const {
  // @@protoc_insertion_point(field_get:MumbleProto.ACL.ChanGroup.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ACL_ChanGroup::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:MumbleProto.ACL.ChanGroup.name)
}
 void ACL_ChanGroup::set_name(const char* value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:MumbleProto.ACL.ChanGroup.name)
}
 void ACL_ChanGroup::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:MumbleProto.ACL.ChanGroup.name)
}
 ::std::string* ACL_ChanGroup::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:MumbleProto.ACL.ChanGroup.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ACL_ChanGroup::release_name() {
  // @@protoc_insertion_point(field_release:MumbleProto.ACL.ChanGroup.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ACL_ChanGroup::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:MumbleProto.ACL.ChanGroup.name)
}

// optional bool inherited = 2 [default = true];
bool ACL_ChanGroup::has_inherited() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ACL_ChanGroup::set_has_inherited() {
  _has_bits_[0] |= 0x00000002u;
}
void ACL_ChanGroup::clear_has_inherited() {
  _has_bits_[0] &= ~0x00000002u;
}
void ACL_ChanGroup::clear_inherited() {
  inherited_ = true;
  clear_has_inherited();
}
 bool ACL_ChanGroup::inherited() const {
  // @@protoc_insertion_point(field_get:MumbleProto.ACL.ChanGroup.inherited)
  return inherited_;
}
 void ACL_ChanGroup::set_inherited(bool value) {
  set_has_inherited();
  inherited_ = value;
  // @@protoc_insertion_point(field_set:MumbleProto.ACL.ChanGroup.inherited)
}

// optional bool inherit = 3 [default = true];
bool ACL_ChanGroup::has_inherit() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void ACL_ChanGroup::set_has_inherit() {
  _has_bits_[0] |= 0x00000004u;
}
void ACL_ChanGroup::clear_has_inherit() {
  _has_bits_[0] &= ~0x00000004u;
}
void ACL_ChanGroup::clear_inherit() {
  inherit_ = true;
  clear_has_inherit();
}
 bool ACL_ChanGroup::inherit() const {
  // @@protoc_insertion_point(field_get:MumbleProto.ACL.ChanGroup.inherit)
  return inherit_;
}
 void ACL_ChanGroup::set_inherit(bool value) {
  set_has_inherit();
  inherit_ = value;
  // @@protoc_insertion_point(field_set:MumbleProto.ACL.ChanGroup.inherit)
}

// optional bool inheritable = 4 [default = true];
bool ACL_ChanGroup::has_inheritable() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void ACL_ChanGroup::set_has_inheritable() {
  _has_bits_[0] |= 0x00000008u;
}
void ACL_ChanGroup::clear_has_inheritable() {
  _has_bits_[0] &= ~0x00000008u;
}
void ACL_ChanGroup::clear_inheritable() {
  inheritable_ = true;
  clear_has_inheritable();
}
 bool ACL_ChanGroup::inheritable() const {
  // @@protoc_insertion_point(field_get:MumbleProto.ACL.ChanGroup.inheritable)
  return inheritable_;
}
 void ACL_ChanGroup::set_inheritable(bool value) {
  set_has_inheritable();
  inheritable_ = value;
  // @@protoc_insertion_point(field_set:MumbleProto.ACL.ChanGroup.inheritable)
}

// repeated uint32 add = 5;
int ACL_ChanGroup::add_size() const {
  return add_.size();
}
void ACL_ChanGroup::clear_add() {
  add_.Clear();
}
 ::google::protobuf::uint32 ACL_ChanGroup::add(int index) const {
  // @@protoc_insertion_point(field_get:MumbleProto.ACL.ChanGroup.add)
  return add_.Get(index);
}
 void ACL_ChanGroup::set_add(int index, ::google::protobuf::uint32 value) {
  add_.Set(index, value);
  // @@protoc_insertion_point(field_set:MumbleProto.ACL.ChanGroup.add)
}
 void ACL_ChanGroup::add_add(::google::protobuf::uint32 value) {
  add_.Add(value);
  // @@protoc_insertion_point(field_add:MumbleProto.ACL.ChanGroup.add)
}
 const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
ACL_ChanGroup::add() const {
  // @@protoc_insertion_point(field_list:MumbleProto.ACL.ChanGroup.add)
  return add_;
}
 ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
ACL_ChanGroup::mutable_add() {
  // @@protoc_insertion_point(field_mutable_list:MumbleProto.ACL.ChanGroup.add)
  return &add_;
}

// repeated uint32 remove = 6;
int ACL_ChanGroup::remove_size() const {
  return remove_.size();
}
void ACL_ChanGroup::clear_remove() {
  remove_.Clear();
}
 ::google::protobuf::uint32 ACL_ChanGroup::remove(int index) const {
  // @@protoc_insertion_point(field_get:MumbleProto.ACL.ChanGroup.remove)
  return remove_.Get(index);
}
 void ACL_ChanGroup::set_remove(int index, ::google::protobuf::uint32 value) {
  remove_.Set(index, value);
  // @@protoc_insertion_point(field_set:MumbleProto.ACL.ChanGroup.remove)
}
 void ACL_ChanGroup::add_remove(::google::protobuf::uint32 value) {
  remove_.Add(value);
  // @@protoc_insertion_point(field_add:MumbleProto.ACL.ChanGroup.remove)
}
 const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
ACL_ChanGroup::remove() const {
  // @@protoc_insertion_point(field_list:MumbleProto.ACL.ChanGroup.remove)
  return remove_;
}
 ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
ACL_ChanGroup::mutable_remove() {
  // @@protoc_insertion_point(field_mutable_list:MumbleProto.ACL.ChanGroup.remove)
  return &remove_;
}

// repeated uint32 inherited_members = 7;
int ACL_ChanGroup::inherited_members_size() const {
  return inherited_members_.size();
}
void ACL_ChanGroup::clear_inherited_members() {
  inherited_members_.Clear();
}
 ::google::protobuf::uint32 ACL_ChanGroup::inherited_members(int index) const {
  // @@protoc_insertion_point(field_get:MumbleProto.ACL.ChanGroup.inherited_members)
  return inherited_members_.Get(index);
}
 void ACL_ChanGroup::set_inherited_members(int index, ::google::protobuf::uint32 value) {
  inherited_members_.Set(index, value);
  // @@protoc_insertion_point(field_set:MumbleProto.ACL.ChanGroup.inherited_members)
}
 void ACL_ChanGroup::add_inherited_members(::google::protobuf::uint32 value) {
  inherited_members_.Add(value);
  // @@protoc_insertion_point(field_add:MumbleProto.ACL.ChanGroup.inherited_members)
}
 const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
ACL_ChanGroup::inherited_members() const {
  // @@protoc_insertion_point(field_list:MumbleProto.ACL.ChanGroup.inherited_members)
  return inherited_members_;
}
 ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
ACL_ChanGroup::mutable_inherited_members() {
  // @@protoc_insertion_point(field_mutable_list:MumbleProto.ACL.ChanGroup.inherited_members)
  return &inherited_members_;
}

// -------------------------------------------------------------------

// ACL_ChanACL

// optional bool apply_here = 1 [default = true];
bool ACL_ChanACL::has_apply_here() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ACL_ChanACL::set_has_apply_here() {
  _has_bits_[0] |= 0x00000001u;
}
void ACL_ChanACL::clear_has_apply_here() {
  _has_bits_[0] &= ~0x00000001u;
}
void ACL_ChanACL::clear_apply_here() {
  apply_here_ = true;
  clear_has_apply_here();
}
 bool ACL_ChanACL::apply_here() const {
  // @@protoc_insertion_point(field_get:MumbleProto.ACL.ChanACL.apply_here)
  return apply_here_;
}
 void ACL_ChanACL::set_apply_here(bool value) {
  set_has_apply_here();
  apply_here_ = value;
  // @@protoc_insertion_point(field_set:MumbleProto.ACL.ChanACL.apply_here)
}

// optional bool apply_subs = 2 [default = true];
bool ACL_ChanACL::has_apply_subs() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ACL_ChanACL::set_has_apply_subs() {
  _has_bits_[0] |= 0x00000002u;
}
void ACL_ChanACL::clear_has_apply_subs() {
  _has_bits_[0] &= ~0x00000002u;
}
void ACL_ChanACL::clear_apply_subs() {
  apply_subs_ = true;
  clear_has_apply_subs();
}
 bool ACL_ChanACL::apply_subs() const {
  // @@protoc_insertion_point(field_get:MumbleProto.ACL.ChanACL.apply_subs)
  return apply_subs_;
}
 void ACL_ChanACL::set_apply_subs(bool value) {
  set_has_apply_subs();
  apply_subs_ = value;
  // @@protoc_insertion_point(field_set:MumbleProto.ACL.ChanACL.apply_subs)
}

// optional bool inherited = 3 [default = true];
bool ACL_ChanACL::has_inherited() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void ACL_ChanACL::set_has_inherited() {
  _has_bits_[0] |= 0x00000004u;
}
void ACL_ChanACL::clear_has_inherited() {
  _has_bits_[0] &= ~0x00000004u;
}
void ACL_ChanACL::clear_inherited() {
  inherited_ = true;
  clear_has_inherited();
}
 bool ACL_ChanACL::inherited() const {
  // @@protoc_insertion_point(field_get:MumbleProto.ACL.ChanACL.inherited)
  return inherited_;
}
 void ACL_ChanACL::set_inherited(bool value) {
  set_has_inherited();
  inherited_ = value;
  // @@protoc_insertion_point(field_set:MumbleProto.ACL.ChanACL.inherited)
}

// optional uint32 user_id = 4;
bool ACL_ChanACL::has_user_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void ACL_ChanACL::set_has_user_id() {
  _has_bits_[0] |= 0x00000008u;
}
void ACL_ChanACL::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000008u;
}
void ACL_ChanACL::clear_user_id() {
  user_id_ = 0u;
  clear_has_user_id();
}
 ::google::protobuf::uint32 ACL_ChanACL::user_id() const {
  // @@protoc_insertion_point(field_get:MumbleProto.ACL.ChanACL.user_id)
  return user_id_;
}
 void ACL_ChanACL::set_user_id(::google::protobuf::uint32 value) {
  set_has_user_id();
  user_id_ = value;
  // @@protoc_insertion_point(field_set:MumbleProto.ACL.ChanACL.user_id)
}

// optional string group = 5;
bool ACL_ChanACL::has_group() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void ACL_ChanACL::set_has_group() {
  _has_bits_[0] |= 0x00000010u;
}
void ACL_ChanACL::clear_has_group() {
  _has_bits_[0] &= ~0x00000010u;
}
void ACL_ChanACL::clear_group() {
  group_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_group();
}
 const ::std::string& ACL_ChanACL::group() const {
  // @@protoc_insertion_point(field_get:MumbleProto.ACL.ChanACL.group)
  return group_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ACL_ChanACL::set_group(const ::std::string& value) {
  set_has_group();
  group_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:MumbleProto.ACL.ChanACL.group)
}
 void ACL_ChanACL::set_group(const char* value) {
  set_has_group();
  group_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:MumbleProto.ACL.ChanACL.group)
}
 void ACL_ChanACL::set_group(const char* value, size_t size) {
  set_has_group();
  group_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:MumbleProto.ACL.ChanACL.group)
}
 ::std::string* ACL_ChanACL::mutable_group() {
  set_has_group();
  // @@protoc_insertion_point(field_mutable:MumbleProto.ACL.ChanACL.group)
  return group_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ACL_ChanACL::release_group() {
  // @@protoc_insertion_point(field_release:MumbleProto.ACL.ChanACL.group)
  clear_has_group();
  return group_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ACL_ChanACL::set_allocated_group(::std::string* group) {
  if (group != NULL) {
    set_has_group();
  } else {
    clear_has_group();
  }
  group_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), group);
  // @@protoc_insertion_point(field_set_allocated:MumbleProto.ACL.ChanACL.group)
}

// optional uint32 grant = 6;
bool ACL_ChanACL::has_grant() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void ACL_ChanACL::set_has_grant() {
  _has_bits_[0] |= 0x00000020u;
}
void ACL_ChanACL::clear_has_grant() {
  _has_bits_[0] &= ~0x00000020u;
}
void ACL_ChanACL::clear_grant() {
  grant_ = 0u;
  clear_has_grant();
}
 ::google::protobuf::uint32 ACL_ChanACL::grant() const {
  // @@protoc_insertion_point(field_get:MumbleProto.ACL.ChanACL.grant)
  return grant_;
}
 void ACL_ChanACL::set_grant(::google::protobuf::uint32 value) {
  set_has_grant();
  grant_ = value;
  // @@protoc_insertion_point(field_set:MumbleProto.ACL.ChanACL.grant)
}

// optional uint32 deny = 7;
bool ACL_ChanACL::has_deny() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void ACL_ChanACL::set_has_deny() {
  _has_bits_[0] |= 0x00000040u;
}
void ACL_ChanACL::clear_has_deny() {
  _has_bits_[0] &= ~0x00000040u;
}
void ACL_ChanACL::clear_deny() {
  deny_ = 0u;
  clear_has_deny();
}
 ::google::protobuf::uint32 ACL_ChanACL::deny() const {
  // @@protoc_insertion_point(field_get:MumbleProto.ACL.ChanACL.deny)
  return deny_;
}
 void ACL_ChanACL::set_deny(::google::protobuf::uint32 value) {
  set_has_deny();
  deny_ = value;
  // @@protoc_insertion_point(field_set:MumbleProto.ACL.ChanACL.deny)
}

// -------------------------------------------------------------------

// ACL

// required uint32 channel_id = 1;
bool ACL::has_channel_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ACL::set_has_channel_id() {
  _has_bits_[0] |= 0x00000001u;
}
void ACL::clear_has_channel_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void ACL::clear_channel_id() {
  channel_id_ = 0u;
  clear_has_channel_id();
}
 ::google::protobuf::uint32 ACL::channel_id() const {
  // @@protoc_insertion_point(field_get:MumbleProto.ACL.channel_id)
  return channel_id_;
}
 void ACL::set_channel_id(::google::protobuf::uint32 value) {
  set_has_channel_id();
  channel_id_ = value;
  // @@protoc_insertion_point(field_set:MumbleProto.ACL.channel_id)
}

// optional bool inherit_acls = 2 [default = true];
bool ACL::has_inherit_acls() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ACL::set_has_inherit_acls() {
  _has_bits_[0] |= 0x00000002u;
}
void ACL::clear_has_inherit_acls() {
  _has_bits_[0] &= ~0x00000002u;
}
void ACL::clear_inherit_acls() {
  inherit_acls_ = true;
  clear_has_inherit_acls();
}
 bool ACL::inherit_acls() const {
  // @@protoc_insertion_point(field_get:MumbleProto.ACL.inherit_acls)
  return inherit_acls_;
}
 void ACL::set_inherit_acls(bool value) {
  set_has_inherit_acls();
  inherit_acls_ = value;
  // @@protoc_insertion_point(field_set:MumbleProto.ACL.inherit_acls)
}

// repeated .MumbleProto.ACL.ChanGroup groups = 3;
int ACL::groups_size() const {
  return groups_.size();
}
void ACL::clear_groups() {
  groups_.Clear();
}
const ::MumbleProto::ACL_ChanGroup& ACL::groups(int index) const {
  // @@protoc_insertion_point(field_get:MumbleProto.ACL.groups)
  return groups_.Get(index);
}
::MumbleProto::ACL_ChanGroup* ACL::mutable_groups(int index) {
  // @@protoc_insertion_point(field_mutable:MumbleProto.ACL.groups)
  return groups_.Mutable(index);
}
::MumbleProto::ACL_ChanGroup* ACL::add_groups() {
  // @@protoc_insertion_point(field_add:MumbleProto.ACL.groups)
  return groups_.Add();
}
::google::protobuf::RepeatedPtrField< ::MumbleProto::ACL_ChanGroup >*
ACL::mutable_groups() {
  // @@protoc_insertion_point(field_mutable_list:MumbleProto.ACL.groups)
  return &groups_;
}
const ::google::protobuf::RepeatedPtrField< ::MumbleProto::ACL_ChanGroup >&
ACL::groups() const {
  // @@protoc_insertion_point(field_list:MumbleProto.ACL.groups)
  return groups_;
}

// repeated .MumbleProto.ACL.ChanACL acls = 4;
int ACL::acls_size() const {
  return acls_.size();
}
void ACL::clear_acls() {
  acls_.Clear();
}
const ::MumbleProto::ACL_ChanACL& ACL::acls(int index) const {
  // @@protoc_insertion_point(field_get:MumbleProto.ACL.acls)
  return acls_.Get(index);
}
::MumbleProto::ACL_ChanACL* ACL::mutable_acls(int index) {
  // @@protoc_insertion_point(field_mutable:MumbleProto.ACL.acls)
  return acls_.Mutable(index);
}
::MumbleProto::ACL_ChanACL* ACL::add_acls() {
  // @@protoc_insertion_point(field_add:MumbleProto.ACL.acls)
  return acls_.Add();
}
::google::protobuf::RepeatedPtrField< ::MumbleProto::ACL_ChanACL >*
ACL::mutable_acls() {
  // @@protoc_insertion_point(field_mutable_list:MumbleProto.ACL.acls)
  return &acls_;
}
const ::google::protobuf::RepeatedPtrField< ::MumbleProto::ACL_ChanACL >&
ACL::acls() const {
  // @@protoc_insertion_point(field_list:MumbleProto.ACL.acls)
  return acls_;
}

// optional bool query = 5 [default = false];
bool ACL::has_query() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void ACL::set_has_query() {
  _has_bits_[0] |= 0x00000010u;
}
void ACL::clear_has_query() {
  _has_bits_[0] &= ~0x00000010u;
}
void ACL::clear_query() {
  query_ = false;
  clear_has_query();
}
 bool ACL::query() const {
  // @@protoc_insertion_point(field_get:MumbleProto.ACL.query)
  return query_;
}
 void ACL::set_query(bool value) {
  set_has_query();
  query_ = value;
  // @@protoc_insertion_point(field_set:MumbleProto.ACL.query)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int QueryUsers::kIdsFieldNumber;
const int QueryUsers::kNamesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

QueryUsers::QueryUsers()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MumbleProto.QueryUsers)
}

void QueryUsers::InitAsDefaultInstance() {
}

QueryUsers::QueryUsers(const QueryUsers& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MumbleProto.QueryUsers)
}

void QueryUsers::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

QueryUsers::~QueryUsers() {
  // @@protoc_insertion_point(destructor:MumbleProto.QueryUsers)
  SharedDtor();
}

void QueryUsers::SharedDtor() {
  if (this != default_instance_) {
  }
}

void QueryUsers::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QueryUsers::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return QueryUsers_descriptor_;
}

const QueryUsers& QueryUsers::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Mumble_2eproto();
  return *default_instance_;
}

QueryUsers* QueryUsers::default_instance_ = NULL;

QueryUsers* QueryUsers::New(::google::protobuf::Arena* arena) const {
  QueryUsers* n = new QueryUsers;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void QueryUsers::Clear() {
// @@protoc_insertion_point(message_clear_start:MumbleProto.QueryUsers)
  ids_.Clear();
  names_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool QueryUsers::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MumbleProto.QueryUsers)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 ids = 1;
      case 1: {
        if (tag == 8) {
         parse_ids:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 8, input, this->mutable_ids())));
        } else if (tag == 10) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_ids())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(8)) goto parse_ids;
        if (input->ExpectTag(18)) goto parse_names;
        break;
      }

      // repeated string names = 2;
      case 2: {
        if (tag == 18) {
         parse_names:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_names()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->names(this->names_size() - 1).data(),
            this->names(this->names_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "MumbleProto.QueryUsers.names");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_names;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MumbleProto.QueryUsers)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MumbleProto.QueryUsers)
  return false;
#undef DO_
}

void QueryUsers::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MumbleProto.QueryUsers)
  // repeated uint32 ids = 1;
  for (int i = 0; i < this->ids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      1, this->ids(i), output);
  }

  // repeated string names = 2;
  for (int i = 0; i < this->names_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->names(i).data(), this->names(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "MumbleProto.QueryUsers.names");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->names(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MumbleProto.QueryUsers)
}

::google::protobuf::uint8* QueryUsers::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MumbleProto.QueryUsers)
  // repeated uint32 ids = 1;
  for (int i = 0; i < this->ids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(1, this->ids(i), target);
  }

  // repeated string names = 2;
  for (int i = 0; i < this->names_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->names(i).data(), this->names(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "MumbleProto.QueryUsers.names");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->names(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MumbleProto.QueryUsers)
  return target;
}

int QueryUsers::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:MumbleProto.QueryUsers)
  int total_size = 0;

  // repeated uint32 ids = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->ids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->ids(i));
    }
    total_size += 1 * this->ids_size() + data_size;
  }

  // repeated string names = 2;
  total_size += 1 * this->names_size();
  for (int i = 0; i < this->names_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->names(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QueryUsers::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MumbleProto.QueryUsers)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const QueryUsers* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const QueryUsers>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MumbleProto.QueryUsers)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MumbleProto.QueryUsers)
    MergeFrom(*source);
  }
}

void QueryUsers::MergeFrom(const QueryUsers& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MumbleProto.QueryUsers)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  ids_.MergeFrom(from.ids_);
  names_.MergeFrom(from.names_);
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void QueryUsers::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MumbleProto.QueryUsers)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QueryUsers::CopyFrom(const QueryUsers& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MumbleProto.QueryUsers)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryUsers::IsInitialized() const {

  return true;
}

void QueryUsers::Swap(QueryUsers* other) {
  if (other == this) return;
  InternalSwap(other);
}
void QueryUsers::InternalSwap(QueryUsers* other) {
  ids_.UnsafeArenaSwap(&other->ids_);
  names_.UnsafeArenaSwap(&other->names_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata QueryUsers::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = QueryUsers_descriptor_;
  metadata.reflection = QueryUsers_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// QueryUsers

// repeated uint32 ids = 1;
int QueryUsers::ids_size() const {
  return ids_.size();
}
void QueryUsers::clear_ids() {
  ids_.Clear();
}
 ::google::protobuf::uint32 QueryUsers::ids(int index) const {
  // @@protoc_insertion_point(field_get:MumbleProto.QueryUsers.ids)
  return ids_.Get(index);
}
 void QueryUsers::set_ids(int index, ::google::protobuf::uint32 value) {
  ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:MumbleProto.QueryUsers.ids)
}
 void QueryUsers::add_ids(::google::protobuf::uint32 value) {
  ids_.Add(value);
  // @@protoc_insertion_point(field_add:MumbleProto.QueryUsers.ids)
}
 const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
QueryUsers::ids() const {
  // @@protoc_insertion_point(field_list:MumbleProto.QueryUsers.ids)
  return ids_;
}
 ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
QueryUsers::mutable_ids() {
  // @@protoc_insertion_point(field_mutable_list:MumbleProto.QueryUsers.ids)
  return &ids_;
}

// repeated string names = 2;
int QueryUsers::names_size() const {
  return names_.size();
}
void QueryUsers::clear_names() {
  names_.Clear();
}
 const ::std::string& QueryUsers::names(int index) const {
  // @@protoc_insertion_point(field_get:MumbleProto.QueryUsers.names)
  return names_.Get(index);
}
 ::std::string* QueryUsers::mutable_names(int index) {
  // @@protoc_insertion_point(field_mutable:MumbleProto.QueryUsers.names)
  return names_.Mutable(index);
}
 void QueryUsers::set_names(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:MumbleProto.QueryUsers.names)
  names_.Mutable(index)->assign(value);
}
 void QueryUsers::set_names(int index, const char* value) {
  names_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:MumbleProto.QueryUsers.names)
}
 void QueryUsers::set_names(int index, const char* value, size_t size) {
  names_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:MumbleProto.QueryUsers.names)
}
 ::std::string* QueryUsers::add_names() {
  // @@protoc_insertion_point(field_add_mutable:MumbleProto.QueryUsers.names)
  return names_.Add();
}
 void QueryUsers::add_names(const ::std::string& value) {
  names_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:MumbleProto.QueryUsers.names)
}
 void QueryUsers::add_names(const char* value) {
  names_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:MumbleProto.QueryUsers.names)
}
 void QueryUsers::add_names(const char* value, size_t size) {
  names_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:MumbleProto.QueryUsers.names)
}
 const ::google::protobuf::RepeatedPtrField< ::std::string>&
QueryUsers::names() const {
  // @@protoc_insertion_point(field_list:MumbleProto.QueryUsers.names)
  return names_;
}
 ::google::protobuf::RepeatedPtrField< ::std::string>*
QueryUsers::mutable_names() {
  // @@protoc_insertion_point(field_mutable_list:MumbleProto.QueryUsers.names)
  return &names_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CryptSetup::kKeyFieldNumber;
const int CryptSetup::kClientNonceFieldNumber;
const int CryptSetup::kServerNonceFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CryptSetup::CryptSetup()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MumbleProto.CryptSetup)
}

void CryptSetup::InitAsDefaultInstance() {
}

CryptSetup::CryptSetup(const CryptSetup& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MumbleProto.CryptSetup)
}

void CryptSetup::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  client_nonce_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  server_nonce_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CryptSetup::~CryptSetup() {
  // @@protoc_insertion_point(destructor:MumbleProto.CryptSetup)
  SharedDtor();
}

void CryptSetup::SharedDtor() {
  key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  client_nonce_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  server_nonce_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void CryptSetup::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CryptSetup::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CryptSetup_descriptor_;
}

const CryptSetup& CryptSetup::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Mumble_2eproto();
  return *default_instance_;
}

CryptSetup* CryptSetup::default_instance_ = NULL;

CryptSetup* CryptSetup::New(::google::protobuf::Arena* arena) const {
  CryptSetup* n = new CryptSetup;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CryptSetup::Clear() {
// @@protoc_insertion_point(message_clear_start:MumbleProto.CryptSetup)
  if (_has_bits_[0 / 32] & 7u) {
    if (has_key()) {
      key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_client_nonce()) {
      client_nonce_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_server_nonce()) {
      server_nonce_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool CryptSetup::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MumbleProto.CryptSetup)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes key = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_key()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_client_nonce;
        break;
      }

      // optional bytes client_nonce = 2;
      case 2: {
        if (tag == 18) {
         parse_client_nonce:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_client_nonce()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_server_nonce;
        break;
      }

      // optional bytes server_nonce = 3;
      case 3: {
        if (tag == 26) {
         parse_server_nonce:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_server_nonce()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MumbleProto.CryptSetup)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MumbleProto.CryptSetup)
  return false;
#undef DO_
}

void CryptSetup::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MumbleProto.CryptSetup)
  // optional bytes key = 1;
  if (has_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->key(), output);
  }

  // optional bytes client_nonce = 2;
  if (has_client_nonce()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->client_nonce(), output);
  }

  // optional bytes server_nonce = 3;
  if (has_server_nonce()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->server_nonce(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MumbleProto.CryptSetup)
}

::google::protobuf::uint8* CryptSetup::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MumbleProto.CryptSetup)
  // optional bytes key = 1;
  if (has_key()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->key(), target);
  }

  // optional bytes client_nonce = 2;
  if (has_client_nonce()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->client_nonce(), target);
  }

  // optional bytes server_nonce = 3;
  if (has_server_nonce()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->server_nonce(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MumbleProto.CryptSetup)
  return target;
}

int CryptSetup::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:MumbleProto.CryptSetup)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 7u) {
    // optional bytes key = 1;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->key());
    }

    // optional bytes client_nonce = 2;
    if (has_client_nonce()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->client_nonce());
    }

    // optional bytes server_nonce = 3;
    if (has_server_nonce()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->server_nonce());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CryptSetup::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MumbleProto.CryptSetup)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const CryptSetup* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CryptSetup>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MumbleProto.CryptSetup)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MumbleProto.CryptSetup)
    MergeFrom(*source);
  }
}

void CryptSetup::MergeFrom(const CryptSetup& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MumbleProto.CryptSetup)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_key()) {
      set_has_key();
      key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
    }
    if (from.has_client_nonce()) {
      set_has_client_nonce();
      client_nonce_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.client_nonce_);
    }
    if (from.has_server_nonce()) {
      set_has_server_nonce();
      server_nonce_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.server_nonce_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void CryptSetup::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MumbleProto.CryptSetup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CryptSetup::CopyFrom(const CryptSetup& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MumbleProto.CryptSetup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CryptSetup::IsInitialized() const {

  return true;
}

void CryptSetup::Swap(CryptSetup* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CryptSetup::InternalSwap(CryptSetup* other) {
  key_.Swap(&other->key_);
  client_nonce_.Swap(&other->client_nonce_);
  server_nonce_.Swap(&other->server_nonce_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CryptSetup::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CryptSetup_descriptor_;
  metadata.reflection = CryptSetup_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CryptSetup

// optional bytes key = 1;
bool CryptSetup::has_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CryptSetup::set_has_key() {
  _has_bits_[0] |= 0x00000001u;
}
void CryptSetup::clear_has_key() {
  _has_bits_[0] &= ~0x00000001u;
}
void CryptSetup::clear_key() {
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_key();
}
 const ::std::string& CryptSetup::key() const {
  // @@protoc_insertion_point(field_get:MumbleProto.CryptSetup.key)
  return key_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CryptSetup::set_key(const ::std::string& value) {
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:MumbleProto.CryptSetup.key)
}
 void CryptSetup::set_key(const char* value) {
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:MumbleProto.CryptSetup.key)
}
 void CryptSetup::set_key(const void* value, size_t size) {
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:MumbleProto.CryptSetup.key)
}
 ::std::string* CryptSetup::mutable_key() {
  set_has_key();
  // @@protoc_insertion_point(field_mutable:MumbleProto.CryptSetup.key)
  return key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* CryptSetup::release_key() {
  // @@protoc_insertion_point(field_release:MumbleProto.CryptSetup.key)
  clear_has_key();
  return key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CryptSetup::set_allocated_key(::std::string* key) {
  if (key != NULL) {
    set_has_key();
  } else {
    clear_has_key();
  }
  key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:MumbleProto.CryptSetup.key)
}

// optional bytes client_nonce = 2;
bool CryptSetup::has_client_nonce() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CryptSetup::set_has_client_nonce() {
  _has_bits_[0] |= 0x00000002u;
}
void CryptSetup::clear_has_client_nonce() {
  _has_bits_[0] &= ~0x00000002u;
}
void CryptSetup::clear_client_nonce() {
  client_nonce_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_client_nonce();
}
 const ::std::string& CryptSetup::client_nonce() const {
  // @@protoc_insertion_point(field_get:MumbleProto.CryptSetup.client_nonce)
  return client_nonce_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CryptSetup::set_client_nonce(const ::std::string& value) {
  set_has_client_nonce();
  client_nonce_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:MumbleProto.CryptSetup.client_nonce)
}
 void CryptSetup::set_client_nonce(const char* value) {
  set_has_client_nonce();
  client_nonce_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:MumbleProto.CryptSetup.client_nonce)
}
 void CryptSetup::set_client_nonce(const void* value, size_t size) {
  set_has_client_nonce();
  client_nonce_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:MumbleProto.CryptSetup.client_nonce)
}
 ::std::string* CryptSetup::mutable_client_nonce() {
  set_has_client_nonce();
  // @@protoc_insertion_point(field_mutable:MumbleProto.CryptSetup.client_nonce)
  return client_nonce_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* CryptSetup::release_client_nonce() {
  // @@protoc_insertion_point(field_release:MumbleProto.CryptSetup.client_nonce)
  clear_has_client_nonce();
  return client_nonce_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CryptSetup::set_allocated_client_nonce(::std::string* client_nonce) {
  if (client_nonce != NULL) {
    set_has_client_nonce();
  } else {
    clear_has_client_nonce();
  }
  client_nonce_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), client_nonce);
  // @@protoc_insertion_point(field_set_allocated:MumbleProto.CryptSetup.client_nonce)
}

// optional bytes server_nonce = 3;
bool CryptSetup::has_server_nonce() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CryptSetup::set_has_server_nonce() {
  _has_bits_[0] |= 0x00000004u;
}
void CryptSetup::clear_has_server_nonce() {
  _has_bits_[0] &= ~0x00000004u;
}
void CryptSetup::clear_server_nonce() {
  server_nonce_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_server_nonce();
}
 const ::std::string& CryptSetup::server_nonce() const {
  // @@protoc_insertion_point(field_get:MumbleProto.CryptSetup.server_nonce)
  return server_nonce_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CryptSetup::set_server_nonce(const ::std::string& value) {
  set_has_server_nonce();
  server_nonce_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:MumbleProto.CryptSetup.server_nonce)
}
 void CryptSetup::set_server_nonce(const char* value) {
  set_has_server_nonce();
  server_nonce_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:MumbleProto.CryptSetup.server_nonce)
}
 void CryptSetup::set_server_nonce(const void* value, size_t size) {
  set_has_server_nonce();
  server_nonce_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:MumbleProto.CryptSetup.server_nonce)
}
 ::std::string* CryptSetup::mutable_server_nonce() {
  set_has_server_nonce();
  // @@protoc_insertion_point(field_mutable:MumbleProto.CryptSetup.server_nonce)
  return server_nonce_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* CryptSetup::release_server_nonce() {
  // @@protoc_insertion_point(field_release:MumbleProto.CryptSetup.server_nonce)
  clear_has_server_nonce();
  return server_nonce_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CryptSetup::set_allocated_server_nonce(::std::string* server_nonce) {
  if (server_nonce != NULL) {
    set_has_server_nonce();
  } else {
    clear_has_server_nonce();
  }
  server_nonce_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), server_nonce);
  // @@protoc_insertion_point(field_set_allocated:MumbleProto.CryptSetup.server_nonce)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

const ::google::protobuf::EnumDescriptor* ContextActionModify_Context_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ContextActionModify_Context_descriptor_;
}
bool ContextActionModify_Context_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 4:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const ContextActionModify_Context ContextActionModify::Server;
const ContextActionModify_Context ContextActionModify::Channel;
const ContextActionModify_Context ContextActionModify::User;
const ContextActionModify_Context ContextActionModify::Context_MIN;
const ContextActionModify_Context ContextActionModify::Context_MAX;
const int ContextActionModify::Context_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* ContextActionModify_Operation_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ContextActionModify_Operation_descriptor_;
}
bool ContextActionModify_Operation_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const ContextActionModify_Operation ContextActionModify::Add;
const ContextActionModify_Operation ContextActionModify::Remove;
const ContextActionModify_Operation ContextActionModify::Operation_MIN;
const ContextActionModify_Operation ContextActionModify::Operation_MAX;
const int ContextActionModify::Operation_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ContextActionModify::kActionFieldNumber;
const int ContextActionModify::kTextFieldNumber;
const int ContextActionModify::kContextFieldNumber;
const int ContextActionModify::kOperationFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ContextActionModify::ContextActionModify()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MumbleProto.ContextActionModify)
}

void ContextActionModify::InitAsDefaultInstance() {
}

ContextActionModify::ContextActionModify(const ContextActionModify& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MumbleProto.ContextActionModify)
}

void ContextActionModify::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  action_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  text_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  context_ = 0u;
  operation_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ContextActionModify::~ContextActionModify() {
  // @@protoc_insertion_point(destructor:MumbleProto.ContextActionModify)
  SharedDtor();
}

void ContextActionModify::SharedDtor() {
  action_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  text_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void ContextActionModify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ContextActionModify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ContextActionModify_descriptor_;
}

const ContextActionModify& ContextActionModify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Mumble_2eproto();
  return *default_instance_;
}

ContextActionModify* ContextActionModify::default_instance_ = NULL;

ContextActionModify* ContextActionModify::New(::google::protobuf::Arena* arena) const {
  ContextActionModify* n = new ContextActionModify;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ContextActionModify::Clear() {
// @@protoc_insertion_point(message_clear_start:MumbleProto.ContextActionModify)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(ContextActionModify, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<ContextActionModify*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 15u) {
    ZR_(context_, operation_);
    if (has_action()) {
      action_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_text()) {
      text_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool ContextActionModify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MumbleProto.ContextActionModify)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string action = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_action()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->action().data(), this->action().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "MumbleProto.ContextActionModify.action");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_text;
        break;
      }

      // optional string text = 2;
      case 2: {
        if (tag == 18) {
         parse_text:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_text()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->text().data(), this->text().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "MumbleProto.ContextActionModify.text");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_context;
        break;
      }

      // optional uint32 context = 3;
      case 3: {
        if (tag == 24) {
         parse_context:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &context_)));
          set_has_context();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_operation;
        break;
      }

      // optional .MumbleProto.ContextActionModify.Operation operation = 4;
      case 4: {
        if (tag == 32) {
         parse_operation:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MumbleProto::ContextActionModify_Operation_IsValid(value)) {
            set_operation(static_cast< ::MumbleProto::ContextActionModify_Operation >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MumbleProto.ContextActionModify)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MumbleProto.ContextActionModify)
  return false;
#undef DO_
}

void ContextActionModify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MumbleProto.ContextActionModify)
  // required string action = 1;
  if (has_action()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->action().data(), this->action().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "MumbleProto.ContextActionModify.action");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->action(), output);
  }

  // optional string text = 2;
  if (has_text()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->text().data(), this->text().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "MumbleProto.ContextActionModify.text");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->text(), output);
  }

  // optional uint32 context = 3;
  if (has_context()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->context(), output);
  }

  // optional .MumbleProto.ContextActionModify.Operation operation = 4;
  if (has_operation()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->operation(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MumbleProto.ContextActionModify)
}

::google::protobuf::uint8* ContextActionModify::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MumbleProto.ContextActionModify)
  // required string action = 1;
  if (has_action()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->action().data(), this->action().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "MumbleProto.ContextActionModify.action");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->action(), target);
  }

  // optional string text = 2;
  if (has_text()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->text().data(), this->text().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "MumbleProto.ContextActionModify.text");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->text(), target);
  }

  // optional uint32 context = 3;
  if (has_context()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->context(), target);
  }

  // optional .MumbleProto.ContextActionModify.Operation operation = 4;
  if (has_operation()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->operation(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MumbleProto.ContextActionModify)
  return target;
}

int ContextActionModify::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:MumbleProto.ContextActionModify)
  int total_size = 0;

  // required string action = 1;
  if (has_action()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->action());
  }
  if (_has_bits_[1 / 32] & 14u) {
    // optional string text = 2;
    if (has_text()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->text());
    }

    // optional uint32 context = 3;
    if (has_context()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->context());
    }

    // optional .MumbleProto.ContextActionModify.Operation operation = 4;
    if (has_operation()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->operation());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ContextActionModify::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MumbleProto.ContextActionModify)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const ContextActionModify* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ContextActionModify>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MumbleProto.ContextActionModify)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MumbleProto.ContextActionModify)
    MergeFrom(*source);
  }
}

void ContextActionModify::MergeFrom(const ContextActionModify& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MumbleProto.ContextActionModify)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_action()) {
      set_has_action();
      action_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.action_);
    }
    if (from.has_text()) {
      set_has_text();
      text_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.text_);
    }
    if (from.has_context()) {
      set_context(from.context());
    }
    if (from.has_operation()) {
      set_operation(from.operation());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void ContextActionModify::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MumbleProto.ContextActionModify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ContextActionModify::CopyFrom(const ContextActionModify& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MumbleProto.ContextActionModify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ContextActionModify::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ContextActionModify::Swap(ContextActionModify* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ContextActionModify::InternalSwap(ContextActionModify* other) {
  action_.Swap(&other->action_);
  text_.Swap(&other->text_);
  std::swap(context_, other->context_);
  std::swap(operation_, other->operation_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ContextActionModify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ContextActionModify_descriptor_;
  metadata.reflection = ContextActionModify_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ContextActionModify

// required string action = 1;
bool ContextActionModify::has_action() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ContextActionModify::set_has_action() {
  _has_bits_[0] |= 0x00000001u;
}
void ContextActionModify::clear_has_action() {
  _has_bits_[0] &= ~0x00000001u;
}
void ContextActionModify::clear_action() {
  action_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_action();
}
 const ::std::string& ContextActionModify::action() const {
  // @@protoc_insertion_point(field_get:MumbleProto.ContextActionModify.action)
  return action_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ContextActionModify::set_action(const ::std::string& value) {
  set_has_action();
  action_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:MumbleProto.ContextActionModify.action)
}
 void ContextActionModify::set_action(const char* value) {
  set_has_action();
  action_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:MumbleProto.ContextActionModify.action)
}
 void ContextActionModify::set_action(const char* value, size_t size) {
  set_has_action();
  action_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:MumbleProto.ContextActionModify.action)
}
 ::std::string* ContextActionModify::mutable_action() {
  set_has_action();
  // @@protoc_insertion_point(field_mutable:MumbleProto.ContextActionModify.action)
  return action_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ContextActionModify::release_action() {
  // @@protoc_insertion_point(field_release:MumbleProto.ContextActionModify.action)
  clear_has_action();
  return action_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ContextActionModify::set_allocated_action(::std::string* action) {
  if (action != NULL) {
    set_has_action();
  } else {
    clear_has_action();
  }
  action_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), action);
  // @@protoc_insertion_point(field_set_allocated:MumbleProto.ContextActionModify.action)
}

// optional string text = 2;
bool ContextActionModify::has_text() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ContextActionModify::set_has_text() {
  _has_bits_[0] |= 0x00000002u;
}
void ContextActionModify::clear_has_text() {
  _has_bits_[0] &= ~0x00000002u;
}
void ContextActionModify::clear_text() {
  text_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_text();
}
 const ::std::string& ContextActionModify::text() const {
  // @@protoc_insertion_point(field_get:MumbleProto.ContextActionModify.text)
  return text_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ContextActionModify::set_text(const ::std::string& value) {
  set_has_text();
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:MumbleProto.ContextActionModify.text)
}
 void ContextActionModify::set_text(const char* value) {
  set_has_text();
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:MumbleProto.ContextActionModify.text)
}
 void ContextActionModify::set_text(const char* value, size_t size) {
  set_has_text();
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:MumbleProto.ContextActionModify.text)
}
 ::std::string* ContextActionModify::mutable_text() {
  set_has_text();
  // @@protoc_insertion_point(field_mutable:MumbleProto.ContextActionModify.text)
  return text_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ContextActionModify::release_text() {
  // @@protoc_insertion_point(field_release:MumbleProto.ContextActionModify.text)
  clear_has_text();
  return text_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ContextActionModify::set_allocated_text(::std::string* text) {
  if (text != NULL) {
    set_has_text();
  } else {
    clear_has_text();
  }
  text_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), text);
  // @@protoc_insertion_point(field_set_allocated:MumbleProto.ContextActionModify.text)
}

// optional uint32 context = 3;
bool ContextActionModify::has_context() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void ContextActionModify::set_has_context() {
  _has_bits_[0] |= 0x00000004u;
}
void ContextActionModify::clear_has_context() {
  _has_bits_[0] &= ~0x00000004u;
}
void ContextActionModify::clear_context() {
  context_ = 0u;
  clear_has_context();
}
 ::google::protobuf::uint32 ContextActionModify::context() const {
  // @@protoc_insertion_point(field_get:MumbleProto.ContextActionModify.context)
  return context_;
}
 void ContextActionModify::set_context(::google::protobuf::uint32 value) {
  set_has_context();
  context_ = value;
  // @@protoc_insertion_point(field_set:MumbleProto.ContextActionModify.context)
}

// optional .MumbleProto.ContextActionModify.Operation operation = 4;
bool ContextActionModify::has_operation() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void ContextActionModify::set_has_operation() {
  _has_bits_[0] |= 0x00000008u;
}
void ContextActionModify::clear_has_operation() {
  _has_bits_[0] &= ~0x00000008u;
}
void ContextActionModify::clear_operation() {
  operation_ = 0;
  clear_has_operation();
}
 ::MumbleProto::ContextActionModify_Operation ContextActionModify::operation() const {
  // @@protoc_insertion_point(field_get:MumbleProto.ContextActionModify.operation)
  return static_cast< ::MumbleProto::ContextActionModify_Operation >(operation_);
}
 void ContextActionModify::set_operation(::MumbleProto::ContextActionModify_Operation value) {
  assert(::MumbleProto::ContextActionModify_Operation_IsValid(value));
  set_has_operation();
  operation_ = value;
  // @@protoc_insertion_point(field_set:MumbleProto.ContextActionModify.operation)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ContextAction::kSessionFieldNumber;
const int ContextAction::kChannelIdFieldNumber;
const int ContextAction::kActionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ContextAction::ContextAction()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MumbleProto.ContextAction)
}

void ContextAction::InitAsDefaultInstance() {
}

ContextAction::ContextAction(const ContextAction& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MumbleProto.ContextAction)
}

void ContextAction::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  session_ = 0u;
  channel_id_ = 0u;
  action_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ContextAction::~ContextAction() {
  // @@protoc_insertion_point(destructor:MumbleProto.ContextAction)
  SharedDtor();
}

void ContextAction::SharedDtor() {
  action_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void ContextAction::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ContextAction::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ContextAction_descriptor_;
}

const ContextAction& ContextAction::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Mumble_2eproto();
  return *default_instance_;
}

ContextAction* ContextAction::default_instance_ = NULL;

ContextAction* ContextAction::New(::google::protobuf::Arena* arena) const {
  ContextAction* n = new ContextAction;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ContextAction::Clear() {
// @@protoc_insertion_point(message_clear_start:MumbleProto.ContextAction)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(ContextAction, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<ContextAction*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 7u) {
    ZR_(session_, channel_id_);
    if (has_action()) {
      action_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool ContextAction::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MumbleProto.ContextAction)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 session = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &session_)));
          set_has_session();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_channel_id;
        break;
      }

      // optional uint32 channel_id = 2;
      case 2: {
        if (tag == 16) {
         parse_channel_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &channel_id_)));
          set_has_channel_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_action;
        break;
      }

      // required string action = 3;
      case 3: {
        if (tag == 26) {
         parse_action:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_action()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->action().data(), this->action().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "MumbleProto.ContextAction.action");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MumbleProto.ContextAction)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MumbleProto.ContextAction)
  return false;
#undef DO_
}

void ContextAction::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MumbleProto.ContextAction)
  // optional uint32 session = 1;
  if (has_session()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->session(), output);
  }

  // optional uint32 channel_id = 2;
  if (has_channel_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->channel_id(), output);
  }

  // required string action = 3;
  if (has_action()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->action().data(), this->action().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "MumbleProto.ContextAction.action");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->action(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MumbleProto.ContextAction)
}

::google::protobuf::uint8* ContextAction::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MumbleProto.ContextAction)
  // optional uint32 session = 1;
  if (has_session()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->session(), target);
  }

  // optional uint32 channel_id = 2;
  if (has_channel_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->channel_id(), target);
  }

  // required string action = 3;
  if (has_action()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->action().data(), this->action().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "MumbleProto.ContextAction.action");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->action(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MumbleProto.ContextAction)
  return target;
}

int ContextAction::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:MumbleProto.ContextAction)
  int total_size = 0;

  // required string action = 3;
  if (has_action()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->action());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional uint32 session = 1;
    if (has_session()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->session());
    }

    // optional uint32 channel_id = 2;
    if (has_channel_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->channel_id());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ContextAction::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MumbleProto.ContextAction)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const ContextAction* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ContextAction>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MumbleProto.ContextAction)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MumbleProto.ContextAction)
    MergeFrom(*source);
  }
}

void ContextAction::MergeFrom(const ContextAction& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MumbleProto.ContextAction)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_session()) {
      set_session(from.session());
    }
    if (from.has_channel_id()) {
      set_channel_id(from.channel_id());
    }
    if (from.has_action()) {
      set_has_action();
      action_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.action_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void ContextAction::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MumbleProto.ContextAction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ContextAction::CopyFrom(const ContextAction& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MumbleProto.ContextAction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ContextAction::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000004) != 0x00000004) return false;

  return true;
}

void ContextAction::Swap(ContextAction* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ContextAction::InternalSwap(ContextAction* other) {
  std::swap(session_, other->session_);
  std::swap(channel_id_, other->channel_id_);
  action_.Swap(&other->action_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ContextAction::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ContextAction_descriptor_;
  metadata.reflection = ContextAction_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ContextAction

// optional uint32 session = 1;
bool ContextAction::has_session() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ContextAction::set_has_session() {
  _has_bits_[0] |= 0x00000001u;
}
void ContextAction::clear_has_session() {
  _has_bits_[0] &= ~0x00000001u;
}
void ContextAction::clear_session() {
  session_ = 0u;
  clear_has_session();
}
 ::google::protobuf::uint32 ContextAction::session() const {
  // @@protoc_insertion_point(field_get:MumbleProto.ContextAction.session)
  return session_;
}
 void ContextAction::set_session(::google::protobuf::uint32 value) {
  set_has_session();
  session_ = value;
  // @@protoc_insertion_point(field_set:MumbleProto.ContextAction.session)
}

// optional uint32 channel_id = 2;
bool ContextAction::has_channel_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ContextAction::set_has_channel_id() {
  _has_bits_[0] |= 0x00000002u;
}
void ContextAction::clear_has_channel_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void ContextAction::clear_channel_id() {
  channel_id_ = 0u;
  clear_has_channel_id();
}
 ::google::protobuf::uint32 ContextAction::channel_id() const {
  // @@protoc_insertion_point(field_get:MumbleProto.ContextAction.channel_id)
  return channel_id_;
}
 void ContextAction::set_channel_id(::google::protobuf::uint32 value) {
  set_has_channel_id();
  channel_id_ = value;
  // @@protoc_insertion_point(field_set:MumbleProto.ContextAction.channel_id)
}

// required string action = 3;
bool ContextAction::has_action() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void ContextAction::set_has_action() {
  _has_bits_[0] |= 0x00000004u;
}
void ContextAction::clear_has_action() {
  _has_bits_[0] &= ~0x00000004u;
}
void ContextAction::clear_action() {
  action_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_action();
}
 const ::std::string& ContextAction::action() const {
  // @@protoc_insertion_point(field_get:MumbleProto.ContextAction.action)
  return action_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ContextAction::set_action(const ::std::string& value) {
  set_has_action();
  action_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:MumbleProto.ContextAction.action)
}
 void ContextAction::set_action(const char* value) {
  set_has_action();
  action_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:MumbleProto.ContextAction.action)
}
 void ContextAction::set_action(const char* value, size_t size) {
  set_has_action();
  action_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:MumbleProto.ContextAction.action)
}
 ::std::string* ContextAction::mutable_action() {
  set_has_action();
  // @@protoc_insertion_point(field_mutable:MumbleProto.ContextAction.action)
  return action_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ContextAction::release_action() {
  // @@protoc_insertion_point(field_release:MumbleProto.ContextAction.action)
  clear_has_action();
  return action_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ContextAction::set_allocated_action(::std::string* action) {
  if (action != NULL) {
    set_has_action();
  } else {
    clear_has_action();
  }
  action_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), action);
  // @@protoc_insertion_point(field_set_allocated:MumbleProto.ContextAction.action)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UserList_User::kUserIdFieldNumber;
const int UserList_User::kNameFieldNumber;
const int UserList_User::kLastSeenFieldNumber;
const int UserList_User::kLastChannelFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UserList_User::UserList_User()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MumbleProto.UserList.User)
}

void UserList_User::InitAsDefaultInstance() {
}

UserList_User::UserList_User(const UserList_User& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MumbleProto.UserList.User)
}

void UserList_User::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  user_id_ = 0u;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  last_seen_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  last_channel_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UserList_User::~UserList_User() {
  // @@protoc_insertion_point(destructor:MumbleProto.UserList.User)
  SharedDtor();
}

void UserList_User::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  last_seen_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void UserList_User::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UserList_User::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UserList_User_descriptor_;
}

const UserList_User& UserList_User::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Mumble_2eproto();
  return *default_instance_;
}

UserList_User* UserList_User::default_instance_ = NULL;

UserList_User* UserList_User::New(::google::protobuf::Arena* arena) const {
  UserList_User* n = new UserList_User;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void UserList_User::Clear() {
// @@protoc_insertion_point(message_clear_start:MumbleProto.UserList.User)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(UserList_User, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<UserList_User*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 15u) {
    ZR_(user_id_, last_channel_);
    if (has_name()) {
      name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_last_seen()) {
      last_seen_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool UserList_User::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MumbleProto.UserList.User)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 user_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional string name = 2;
      case 2: {
        if (tag == 18) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "MumbleProto.UserList.User.name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_last_seen;
        break;
      }

      // optional string last_seen = 3;
      case 3: {
        if (tag == 26) {
         parse_last_seen:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_last_seen()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->last_seen().data(), this->last_seen().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "MumbleProto.UserList.User.last_seen");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_last_channel;
        break;
      }

      // optional uint32 last_channel = 4;
      case 4: {
        if (tag == 32) {
         parse_last_channel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &last_channel_)));
          set_has_last_channel();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MumbleProto.UserList.User)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MumbleProto.UserList.User)
  return false;
#undef DO_
}

void UserList_User::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MumbleProto.UserList.User)
  // required uint32 user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->user_id(), output);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "MumbleProto.UserList.User.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  // optional string last_seen = 3;
  if (has_last_seen()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->last_seen().data(), this->last_seen().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "MumbleProto.UserList.User.last_seen");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->last_seen(), output);
  }

  // optional uint32 last_channel = 4;
  if (has_last_channel()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->last_channel(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MumbleProto.UserList.User)
}

::google::protobuf::uint8* UserList_User::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MumbleProto.UserList.User)
  // required uint32 user_id = 1;
  if (has_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->user_id(), target);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "MumbleProto.UserList.User.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // optional string last_seen = 3;
  if (has_last_seen()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->last_seen().data(), this->last_seen().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "MumbleProto.UserList.User.last_seen");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->last_seen(), target);
  }

  // optional uint32 last_channel = 4;
  if (has_last_channel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->last_channel(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MumbleProto.UserList.User)
  return target;
}

int UserList_User::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:MumbleProto.UserList.User)
  int total_size = 0;

  // required uint32 user_id = 1;
  if (has_user_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->user_id());
  }
  if (_has_bits_[1 / 32] & 14u) {
    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string last_seen = 3;
    if (has_last_seen()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->last_seen());
    }

    // optional uint32 last_channel = 4;
    if (has_last_channel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->last_channel());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserList_User::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MumbleProto.UserList.User)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const UserList_User* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const UserList_User>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MumbleProto.UserList.User)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MumbleProto.UserList.User)
    MergeFrom(*source);
  }
}

void UserList_User::MergeFrom(const UserList_User& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MumbleProto.UserList.User)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_name()) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (from.has_last_seen()) {
      set_has_last_seen();
      last_seen_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.last_seen_);
    }
    if (from.has_last_channel()) {
      set_last_channel(from.last_channel());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void UserList_User::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MumbleProto.UserList.User)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserList_User::CopyFrom(const UserList_User& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MumbleProto.UserList.User)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserList_User::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void UserList_User::Swap(UserList_User* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UserList_User::InternalSwap(UserList_User* other) {
  std::swap(user_id_, other->user_id_);
  name_.Swap(&other->name_);
  last_seen_.Swap(&other->last_seen_);
  std::swap(last_channel_, other->last_channel_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata UserList_User::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UserList_User_descriptor_;
  metadata.reflection = UserList_User_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UserList::kUsersFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UserList::UserList()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MumbleProto.UserList)
}

void UserList::InitAsDefaultInstance() {
}

UserList::UserList(const UserList& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MumbleProto.UserList)
}

void UserList::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UserList::~UserList() {
  // @@protoc_insertion_point(destructor:MumbleProto.UserList)
  SharedDtor();
}

void UserList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void UserList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UserList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UserList_descriptor_;
}

const UserList& UserList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Mumble_2eproto();
  return *default_instance_;
}

UserList* UserList::default_instance_ = NULL;

UserList* UserList::New(::google::protobuf::Arena* arena) const {
  UserList* n = new UserList;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void UserList::Clear() {
// @@protoc_insertion_point(message_clear_start:MumbleProto.UserList)
  users_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool UserList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MumbleProto.UserList)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .MumbleProto.UserList.User users = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_users:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_users()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_users;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MumbleProto.UserList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MumbleProto.UserList)
  return false;
#undef DO_
}

void UserList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MumbleProto.UserList)
  // repeated .MumbleProto.UserList.User users = 1;
  for (unsigned int i = 0, n = this->users_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->users(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MumbleProto.UserList)
}

::google::protobuf::uint8* UserList::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MumbleProto.UserList)
  // repeated .MumbleProto.UserList.User users = 1;
  for (unsigned int i = 0, n = this->users_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->users(i), false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MumbleProto.UserList)
  return target;
}

int UserList::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:MumbleProto.UserList)
  int total_size = 0;

  // repeated .MumbleProto.UserList.User users = 1;
  total_size += 1 * this->users_size();
  for (int i = 0; i < this->users_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->users(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserList::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MumbleProto.UserList)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const UserList* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const UserList>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MumbleProto.UserList)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MumbleProto.UserList)
    MergeFrom(*source);
  }
}

void UserList::MergeFrom(const UserList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MumbleProto.UserList)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  users_.MergeFrom(from.users_);
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void UserList::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MumbleProto.UserList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserList::CopyFrom(const UserList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MumbleProto.UserList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserList::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->users())) return false;
  return true;
}

void UserList::Swap(UserList* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UserList::InternalSwap(UserList* other) {
  users_.UnsafeArenaSwap(&other->users_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata UserList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UserList_descriptor_;
  metadata.reflection = UserList_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// UserList_User

// required uint32 user_id = 1;
bool UserList_User::has_user_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void UserList_User::set_has_user_id() {
  _has_bits_[0] |= 0x00000001u;
}
void UserList_User::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void UserList_User::clear_user_id() {
  user_id_ = 0u;
  clear_has_user_id();
}
 ::google::protobuf::uint32 UserList_User::user_id() const {
  // @@protoc_insertion_point(field_get:MumbleProto.UserList.User.user_id)
  return user_id_;
}
 void UserList_User::set_user_id(::google::protobuf::uint32 value) {
  set_has_user_id();
  user_id_ = value;
  // @@protoc_insertion_point(field_set:MumbleProto.UserList.User.user_id)
}

// optional string name = 2;
bool UserList_User::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void UserList_User::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
void UserList_User::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
void UserList_User::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
 const ::std::string& UserList_User::name() const {
  // @@protoc_insertion_point(field_get:MumbleProto.UserList.User.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void UserList_User::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:MumbleProto.UserList.User.name)
}
 void UserList_User::set_name(const char* value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:MumbleProto.UserList.User.name)
}
 void UserList_User::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:MumbleProto.UserList.User.name)
}
 ::std::string* UserList_User::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:MumbleProto.UserList.User.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* UserList_User::release_name() {
  // @@protoc_insertion_point(field_release:MumbleProto.UserList.User.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void UserList_User::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:MumbleProto.UserList.User.name)
}

// optional string last_seen = 3;
bool UserList_User::has_last_seen() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void UserList_User::set_has_last_seen() {
  _has_bits_[0] |= 0x00000004u;
}
void UserList_User::clear_has_last_seen() {
  _has_bits_[0] &= ~0x00000004u;
}
void UserList_User::clear_last_seen() {
  last_seen_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_last_seen();
}
 const ::std::string& UserList_User::last_seen() const {
  // @@protoc_insertion_point(field_get:MumbleProto.UserList.User.last_seen)
  return last_seen_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void UserList_User::set_last_seen(const ::std::string& value) {
  set_has_last_seen();
  last_seen_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:MumbleProto.UserList.User.last_seen)
}
 void UserList_User::set_last_seen(const char* value) {
  set_has_last_seen();
  last_seen_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:MumbleProto.UserList.User.last_seen)
}
 void UserList_User::set_last_seen(const char* value, size_t size) {
  set_has_last_seen();
  last_seen_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:MumbleProto.UserList.User.last_seen)
}
 ::std::string* UserList_User::mutable_last_seen() {
  set_has_last_seen();
  // @@protoc_insertion_point(field_mutable:MumbleProto.UserList.User.last_seen)
  return last_seen_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* UserList_User::release_last_seen() {
  // @@protoc_insertion_point(field_release:MumbleProto.UserList.User.last_seen)
  clear_has_last_seen();
  return last_seen_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void UserList_User::set_allocated_last_seen(::std::string* last_seen) {
  if (last_seen != NULL) {
    set_has_last_seen();
  } else {
    clear_has_last_seen();
  }
  last_seen_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), last_seen);
  // @@protoc_insertion_point(field_set_allocated:MumbleProto.UserList.User.last_seen)
}

// optional uint32 last_channel = 4;
bool UserList_User::has_last_channel() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void UserList_User::set_has_last_channel() {
  _has_bits_[0] |= 0x00000008u;
}
void UserList_User::clear_has_last_channel() {
  _has_bits_[0] &= ~0x00000008u;
}
void UserList_User::clear_last_channel() {
  last_channel_ = 0u;
  clear_has_last_channel();
}
 ::google::protobuf::uint32 UserList_User::last_channel() const {
  // @@protoc_insertion_point(field_get:MumbleProto.UserList.User.last_channel)
  return last_channel_;
}
 void UserList_User::set_last_channel(::google::protobuf::uint32 value) {
  set_has_last_channel();
  last_channel_ = value;
  // @@protoc_insertion_point(field_set:MumbleProto.UserList.User.last_channel)
}

// -------------------------------------------------------------------

// UserList

// repeated .MumbleProto.UserList.User users = 1;
int UserList::users_size() const {
  return users_.size();
}
void UserList::clear_users() {
  users_.Clear();
}
const ::MumbleProto::UserList_User& UserList::users(int index) const {
  // @@protoc_insertion_point(field_get:MumbleProto.UserList.users)
  return users_.Get(index);
}
::MumbleProto::UserList_User* UserList::mutable_users(int index) {
  // @@protoc_insertion_point(field_mutable:MumbleProto.UserList.users)
  return users_.Mutable(index);
}
::MumbleProto::UserList_User* UserList::add_users() {
  // @@protoc_insertion_point(field_add:MumbleProto.UserList.users)
  return users_.Add();
}
::google::protobuf::RepeatedPtrField< ::MumbleProto::UserList_User >*
UserList::mutable_users() {
  // @@protoc_insertion_point(field_mutable_list:MumbleProto.UserList.users)
  return &users_;
}
const ::google::protobuf::RepeatedPtrField< ::MumbleProto::UserList_User >&
UserList::users() const {
  // @@protoc_insertion_point(field_list:MumbleProto.UserList.users)
  return users_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int VoiceTarget_Target::kSessionFieldNumber;
const int VoiceTarget_Target::kChannelIdFieldNumber;
const int VoiceTarget_Target::kGroupFieldNumber;
const int VoiceTarget_Target::kLinksFieldNumber;
const int VoiceTarget_Target::kChildrenFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

VoiceTarget_Target::VoiceTarget_Target()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MumbleProto.VoiceTarget.Target)
}

void VoiceTarget_Target::InitAsDefaultInstance() {
}

VoiceTarget_Target::VoiceTarget_Target(const VoiceTarget_Target& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MumbleProto.VoiceTarget.Target)
}

void VoiceTarget_Target::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  channel_id_ = 0u;
  group_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  links_ = false;
  children_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

VoiceTarget_Target::~VoiceTarget_Target() {
  // @@protoc_insertion_point(destructor:MumbleProto.VoiceTarget.Target)
  SharedDtor();
}

void VoiceTarget_Target::SharedDtor() {
  group_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void VoiceTarget_Target::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VoiceTarget_Target::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return VoiceTarget_Target_descriptor_;
}

const VoiceTarget_Target& VoiceTarget_Target::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Mumble_2eproto();
  return *default_instance_;
}

VoiceTarget_Target* VoiceTarget_Target::default_instance_ = NULL;

VoiceTarget_Target* VoiceTarget_Target::New(::google::protobuf::Arena* arena) const {
  VoiceTarget_Target* n = new VoiceTarget_Target;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void VoiceTarget_Target::Clear() {
// @@protoc_insertion_point(message_clear_start:MumbleProto.VoiceTarget.Target)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(VoiceTarget_Target, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<VoiceTarget_Target*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 30u) {
    ZR_(channel_id_, children_);
    if (has_group()) {
      group_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }

#undef ZR_HELPER_
#undef ZR_

  session_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool VoiceTarget_Target::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MumbleProto.VoiceTarget.Target)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 session = 1;
      case 1: {
        if (tag == 8) {
         parse_session:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 8, input, this->mutable_session())));
        } else if (tag == 10) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_session())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(8)) goto parse_session;
        if (input->ExpectTag(16)) goto parse_channel_id;
        break;
      }

      // optional uint32 channel_id = 2;
      case 2: {
        if (tag == 16) {
         parse_channel_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &channel_id_)));
          set_has_channel_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_group;
        break;
      }

      // optional string group = 3;
      case 3: {
        if (tag == 26) {
         parse_group:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_group()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->group().data(), this->group().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "MumbleProto.VoiceTarget.Target.group");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_links;
        break;
      }

      // optional bool links = 4 [default = false];
      case 4: {
        if (tag == 32) {
         parse_links:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &links_)));
          set_has_links();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_children;
        break;
      }

      // optional bool children = 5 [default = false];
      case 5: {
        if (tag == 40) {
         parse_children:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &children_)));
          set_has_children();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MumbleProto.VoiceTarget.Target)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MumbleProto.VoiceTarget.Target)
  return false;
#undef DO_
}

void VoiceTarget_Target::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MumbleProto.VoiceTarget.Target)
  // repeated uint32 session = 1;
  for (int i = 0; i < this->session_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      1, this->session(i), output);
  }

  // optional uint32 channel_id = 2;
  if (has_channel_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->channel_id(), output);
  }

  // optional string group = 3;
  if (has_group()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->group().data(), this->group().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "MumbleProto.VoiceTarget.Target.group");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->group(), output);
  }

  // optional bool links = 4 [default = false];
  if (has_links()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->links(), output);
  }

  // optional bool children = 5 [default = false];
  if (has_children()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->children(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MumbleProto.VoiceTarget.Target)
}

::google::protobuf::uint8* VoiceTarget_Target::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MumbleProto.VoiceTarget.Target)
  // repeated uint32 session = 1;
  for (int i = 0; i < this->session_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(1, this->session(i), target);
  }

  // optional uint32 channel_id = 2;
  if (has_channel_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->channel_id(), target);
  }

  // optional string group = 3;
  if (has_group()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->group().data(), this->group().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "MumbleProto.VoiceTarget.Target.group");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->group(), target);
  }

  // optional bool links = 4 [default = false];
  if (has_links()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->links(), target);
  }

  // optional bool children = 5 [default = false];
  if (has_children()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->children(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MumbleProto.VoiceTarget.Target)
  return target;
}

int VoiceTarget_Target::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:MumbleProto.VoiceTarget.Target)
  int total_size = 0;

  if (_has_bits_[1 / 32] & 30u) {
    // optional uint32 channel_id = 2;
    if (has_channel_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->channel_id());
    }

    // optional string group = 3;
    if (has_group()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->group());
    }

    // optional bool links = 4 [default = false];
    if (has_links()) {
      total_size += 1 + 1;
    }

    // optional bool children = 5 [default = false];
    if (has_children()) {
      total_size += 1 + 1;
    }

  }
  // repeated uint32 session = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->session_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->session(i));
    }
    total_size += 1 * this->session_size() + data_size;
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VoiceTarget_Target::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MumbleProto.VoiceTarget.Target)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const VoiceTarget_Target* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const VoiceTarget_Target>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MumbleProto.VoiceTarget.Target)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MumbleProto.VoiceTarget.Target)
    MergeFrom(*source);
  }
}

void VoiceTarget_Target::MergeFrom(const VoiceTarget_Target& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MumbleProto.VoiceTarget.Target)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  session_.MergeFrom(from.session_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_channel_id()) {
      set_channel_id(from.channel_id());
    }
    if (from.has_group()) {
      set_has_group();
      group_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.group_);
    }
    if (from.has_links()) {
      set_links(from.links());
    }
    if (from.has_children()) {
      set_children(from.children());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void VoiceTarget_Target::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MumbleProto.VoiceTarget.Target)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VoiceTarget_Target::CopyFrom(const VoiceTarget_Target& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MumbleProto.VoiceTarget.Target)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VoiceTarget_Target::IsInitialized() const {

  return true;
}

void VoiceTarget_Target::Swap(VoiceTarget_Target* other) {
  if (other == this) return;
  InternalSwap(other);
}
void VoiceTarget_Target::InternalSwap(VoiceTarget_Target* other) {
  session_.UnsafeArenaSwap(&other->session_);
  std::swap(channel_id_, other->channel_id_);
  group_.Swap(&other->group_);
  std::swap(links_, other->links_);
  std::swap(children_, other->children_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata VoiceTarget_Target::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = VoiceTarget_Target_descriptor_;
  metadata.reflection = VoiceTarget_Target_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int VoiceTarget::kIdFieldNumber;
const int VoiceTarget::kTargetsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

VoiceTarget::VoiceTarget()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MumbleProto.VoiceTarget)
}

void VoiceTarget::InitAsDefaultInstance() {
}

VoiceTarget::VoiceTarget(const VoiceTarget& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MumbleProto.VoiceTarget)
}

void VoiceTarget::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

VoiceTarget::~VoiceTarget() {
  // @@protoc_insertion_point(destructor:MumbleProto.VoiceTarget)
  SharedDtor();
}

void VoiceTarget::SharedDtor() {
  if (this != default_instance_) {
  }
}

void VoiceTarget::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VoiceTarget::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return VoiceTarget_descriptor_;
}

const VoiceTarget& VoiceTarget::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Mumble_2eproto();
  return *default_instance_;
}

VoiceTarget* VoiceTarget::default_instance_ = NULL;

VoiceTarget* VoiceTarget::New(::google::protobuf::Arena* arena) const {
  VoiceTarget* n = new VoiceTarget;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void VoiceTarget::Clear() {
// @@protoc_insertion_point(message_clear_start:MumbleProto.VoiceTarget)
  id_ = 0u;
  targets_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool VoiceTarget::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MumbleProto.VoiceTarget)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_targets;
        break;
      }

      // repeated .MumbleProto.VoiceTarget.Target targets = 2;
      case 2: {
        if (tag == 18) {
         parse_targets:
          DO_(input->IncrementRecursionDepth());
         parse_loop_targets:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_targets()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_loop_targets;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MumbleProto.VoiceTarget)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MumbleProto.VoiceTarget)
  return false;
#undef DO_
}

void VoiceTarget::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MumbleProto.VoiceTarget)
  // optional uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // repeated .MumbleProto.VoiceTarget.Target targets = 2;
  for (unsigned int i = 0, n = this->targets_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->targets(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MumbleProto.VoiceTarget)
}

::google::protobuf::uint8* VoiceTarget::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MumbleProto.VoiceTarget)
  // optional uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // repeated .MumbleProto.VoiceTarget.Target targets = 2;
  for (unsigned int i = 0, n = this->targets_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->targets(i), false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MumbleProto.VoiceTarget)
  return target;
}

int VoiceTarget::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:MumbleProto.VoiceTarget)
  int total_size = 0;

  // optional uint32 id = 1;
  if (has_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->id());
  }

  // repeated .MumbleProto.VoiceTarget.Target targets = 2;
  total_size += 1 * this->targets_size();
  for (int i = 0; i < this->targets_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->targets(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VoiceTarget::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MumbleProto.VoiceTarget)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const VoiceTarget* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const VoiceTarget>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MumbleProto.VoiceTarget)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MumbleProto.VoiceTarget)
    MergeFrom(*source);
  }
}

void VoiceTarget::MergeFrom(const VoiceTarget& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MumbleProto.VoiceTarget)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  targets_.MergeFrom(from.targets_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void VoiceTarget::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MumbleProto.VoiceTarget)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VoiceTarget::CopyFrom(const VoiceTarget& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MumbleProto.VoiceTarget)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VoiceTarget::IsInitialized() const {

  return true;
}

void VoiceTarget::Swap(VoiceTarget* other) {
  if (other == this) return;
  InternalSwap(other);
}
void VoiceTarget::InternalSwap(VoiceTarget* other) {
  std::swap(id_, other->id_);
  targets_.UnsafeArenaSwap(&other->targets_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata VoiceTarget::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = VoiceTarget_descriptor_;
  metadata.reflection = VoiceTarget_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// VoiceTarget_Target

// repeated uint32 session = 1;
int VoiceTarget_Target::session_size() const {
  return session_.size();
}
void VoiceTarget_Target::clear_session() {
  session_.Clear();
}
 ::google::protobuf::uint32 VoiceTarget_Target::session(int index) const {
  // @@protoc_insertion_point(field_get:MumbleProto.VoiceTarget.Target.session)
  return session_.Get(index);
}
 void VoiceTarget_Target::set_session(int index, ::google::protobuf::uint32 value) {
  session_.Set(index, value);
  // @@protoc_insertion_point(field_set:MumbleProto.VoiceTarget.Target.session)
}
 void VoiceTarget_Target::add_session(::google::protobuf::uint32 value) {
  session_.Add(value);
  // @@protoc_insertion_point(field_add:MumbleProto.VoiceTarget.Target.session)
}
 const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
VoiceTarget_Target::session() const {
  // @@protoc_insertion_point(field_list:MumbleProto.VoiceTarget.Target.session)
  return session_;
}
 ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
VoiceTarget_Target::mutable_session() {
  // @@protoc_insertion_point(field_mutable_list:MumbleProto.VoiceTarget.Target.session)
  return &session_;
}

// optional uint32 channel_id = 2;
bool VoiceTarget_Target::has_channel_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void VoiceTarget_Target::set_has_channel_id() {
  _has_bits_[0] |= 0x00000002u;
}
void VoiceTarget_Target::clear_has_channel_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void VoiceTarget_Target::clear_channel_id() {
  channel_id_ = 0u;
  clear_has_channel_id();
}
 ::google::protobuf::uint32 VoiceTarget_Target::channel_id() const {
  // @@protoc_insertion_point(field_get:MumbleProto.VoiceTarget.Target.channel_id)
  return channel_id_;
}
 void VoiceTarget_Target::set_channel_id(::google::protobuf::uint32 value) {
  set_has_channel_id();
  channel_id_ = value;
  // @@protoc_insertion_point(field_set:MumbleProto.VoiceTarget.Target.channel_id)
}

// optional string group = 3;
bool VoiceTarget_Target::has_group() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void VoiceTarget_Target::set_has_group() {
  _has_bits_[0] |= 0x00000004u;
}
void VoiceTarget_Target::clear_has_group() {
  _has_bits_[0] &= ~0x00000004u;
}
void VoiceTarget_Target::clear_group() {
  group_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_group();
}
 const ::std::string& VoiceTarget_Target::group() const {
  // @@protoc_insertion_point(field_get:MumbleProto.VoiceTarget.Target.group)
  return group_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void VoiceTarget_Target::set_group(const ::std::string& value) {
  set_has_group();
  group_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:MumbleProto.VoiceTarget.Target.group)
}
 void VoiceTarget_Target::set_group(const char* value) {
  set_has_group();
  group_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:MumbleProto.VoiceTarget.Target.group)
}
 void VoiceTarget_Target::set_group(const char* value, size_t size) {
  set_has_group();
  group_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:MumbleProto.VoiceTarget.Target.group)
}
 ::std::string* VoiceTarget_Target::mutable_group() {
  set_has_group();
  // @@protoc_insertion_point(field_mutable:MumbleProto.VoiceTarget.Target.group)
  return group_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* VoiceTarget_Target::release_group() {
  // @@protoc_insertion_point(field_release:MumbleProto.VoiceTarget.Target.group)
  clear_has_group();
  return group_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void VoiceTarget_Target::set_allocated_group(::std::string* group) {
  if (group != NULL) {
    set_has_group();
  } else {
    clear_has_group();
  }
  group_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), group);
  // @@protoc_insertion_point(field_set_allocated:MumbleProto.VoiceTarget.Target.group)
}

// optional bool links = 4 [default = false];
bool VoiceTarget_Target::has_links() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void VoiceTarget_Target::set_has_links() {
  _has_bits_[0] |= 0x00000008u;
}
void VoiceTarget_Target::clear_has_links() {
  _has_bits_[0] &= ~0x00000008u;
}
void VoiceTarget_Target::clear_links() {
  links_ = false;
  clear_has_links();
}
 bool VoiceTarget_Target::links() const {
  // @@protoc_insertion_point(field_get:MumbleProto.VoiceTarget.Target.links)
  return links_;
}
 void VoiceTarget_Target::set_links(bool value) {
  set_has_links();
  links_ = value;
  // @@protoc_insertion_point(field_set:MumbleProto.VoiceTarget.Target.links)
}

// optional bool children = 5 [default = false];
bool VoiceTarget_Target::has_children() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void VoiceTarget_Target::set_has_children() {
  _has_bits_[0] |= 0x00000010u;
}
void VoiceTarget_Target::clear_has_children() {
  _has_bits_[0] &= ~0x00000010u;
}
void VoiceTarget_Target::clear_children() {
  children_ = false;
  clear_has_children();
}
 bool VoiceTarget_Target::children() const {
  // @@protoc_insertion_point(field_get:MumbleProto.VoiceTarget.Target.children)
  return children_;
}
 void VoiceTarget_Target::set_children(bool value) {
  set_has_children();
  children_ = value;
  // @@protoc_insertion_point(field_set:MumbleProto.VoiceTarget.Target.children)
}

// -------------------------------------------------------------------

// VoiceTarget

// optional uint32 id = 1;
bool VoiceTarget::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void VoiceTarget::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
void VoiceTarget::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void VoiceTarget::clear_id() {
  id_ = 0u;
  clear_has_id();
}
 ::google::protobuf::uint32 VoiceTarget::id() const {
  // @@protoc_insertion_point(field_get:MumbleProto.VoiceTarget.id)
  return id_;
}
 void VoiceTarget::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:MumbleProto.VoiceTarget.id)
}

// repeated .MumbleProto.VoiceTarget.Target targets = 2;
int VoiceTarget::targets_size() const {
  return targets_.size();
}
void VoiceTarget::clear_targets() {
  targets_.Clear();
}
const ::MumbleProto::VoiceTarget_Target& VoiceTarget::targets(int index) const {
  // @@protoc_insertion_point(field_get:MumbleProto.VoiceTarget.targets)
  return targets_.Get(index);
}
::MumbleProto::VoiceTarget_Target* VoiceTarget::mutable_targets(int index) {
  // @@protoc_insertion_point(field_mutable:MumbleProto.VoiceTarget.targets)
  return targets_.Mutable(index);
}
::MumbleProto::VoiceTarget_Target* VoiceTarget::add_targets() {
  // @@protoc_insertion_point(field_add:MumbleProto.VoiceTarget.targets)
  return targets_.Add();
}
::google::protobuf::RepeatedPtrField< ::MumbleProto::VoiceTarget_Target >*
VoiceTarget::mutable_targets() {
  // @@protoc_insertion_point(field_mutable_list:MumbleProto.VoiceTarget.targets)
  return &targets_;
}
const ::google::protobuf::RepeatedPtrField< ::MumbleProto::VoiceTarget_Target >&
VoiceTarget::targets() const {
  // @@protoc_insertion_point(field_list:MumbleProto.VoiceTarget.targets)
  return targets_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PermissionQuery::kChannelIdFieldNumber;
const int PermissionQuery::kPermissionsFieldNumber;
const int PermissionQuery::kFlushFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PermissionQuery::PermissionQuery()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MumbleProto.PermissionQuery)
}

void PermissionQuery::InitAsDefaultInstance() {
}

PermissionQuery::PermissionQuery(const PermissionQuery& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MumbleProto.PermissionQuery)
}

void PermissionQuery::SharedCtor() {
  _cached_size_ = 0;
  channel_id_ = 0u;
  permissions_ = 0u;
  flush_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PermissionQuery::~PermissionQuery() {
  // @@protoc_insertion_point(destructor:MumbleProto.PermissionQuery)
  SharedDtor();
}

void PermissionQuery::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PermissionQuery::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PermissionQuery::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PermissionQuery_descriptor_;
}

const PermissionQuery& PermissionQuery::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Mumble_2eproto();
  return *default_instance_;
}

PermissionQuery* PermissionQuery::default_instance_ = NULL;

PermissionQuery* PermissionQuery::New(::google::protobuf::Arena* arena) const {
  PermissionQuery* n = new PermissionQuery;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PermissionQuery::Clear() {
// @@protoc_insertion_point(message_clear_start:MumbleProto.PermissionQuery)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(PermissionQuery, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<PermissionQuery*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(channel_id_, flush_);

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool PermissionQuery::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MumbleProto.PermissionQuery)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 channel_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &channel_id_)));
          set_has_channel_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_permissions;
        break;
      }

      // optional uint32 permissions = 2;
      case 2: {
        if (tag == 16) {
         parse_permissions:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &permissions_)));
          set_has_permissions();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_flush;
        break;
      }

      // optional bool flush = 3 [default = false];
      case 3: {
        if (tag == 24) {
         parse_flush:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &flush_)));
          set_has_flush();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MumbleProto.PermissionQuery)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MumbleProto.PermissionQuery)
  return false;
#undef DO_
}

void PermissionQuery::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MumbleProto.PermissionQuery)
  // optional uint32 channel_id = 1;
  if (has_channel_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->channel_id(), output);
  }

  // optional uint32 permissions = 2;
  if (has_permissions()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->permissions(), output);
  }

  // optional bool flush = 3 [default = false];
  if (has_flush()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->flush(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MumbleProto.PermissionQuery)
}

::google::protobuf::uint8* PermissionQuery::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MumbleProto.PermissionQuery)
  // optional uint32 channel_id = 1;
  if (has_channel_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->channel_id(), target);
  }

  // optional uint32 permissions = 2;
  if (has_permissions()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->permissions(), target);
  }

  // optional bool flush = 3 [default = false];
  if (has_flush()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->flush(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MumbleProto.PermissionQuery)
  return target;
}

int PermissionQuery::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:MumbleProto.PermissionQuery)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 7u) {
    // optional uint32 channel_id = 1;
    if (has_channel_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->channel_id());
    }

    // optional uint32 permissions = 2;
    if (has_permissions()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->permissions());
    }

    // optional bool flush = 3 [default = false];
    if (has_flush()) {
      total_size += 1 + 1;
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PermissionQuery::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MumbleProto.PermissionQuery)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const PermissionQuery* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const PermissionQuery>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MumbleProto.PermissionQuery)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MumbleProto.PermissionQuery)
    MergeFrom(*source);
  }
}

void PermissionQuery::MergeFrom(const PermissionQuery& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MumbleProto.PermissionQuery)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_channel_id()) {
      set_channel_id(from.channel_id());
    }
    if (from.has_permissions()) {
      set_permissions(from.permissions());
    }
    if (from.has_flush()) {
      set_flush(from.flush());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void PermissionQuery::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MumbleProto.PermissionQuery)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PermissionQuery::CopyFrom(const PermissionQuery& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MumbleProto.PermissionQuery)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PermissionQuery::IsInitialized() const {

  return true;
}

void PermissionQuery::Swap(PermissionQuery* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PermissionQuery::InternalSwap(PermissionQuery* other) {
  std::swap(channel_id_, other->channel_id_);
  std::swap(permissions_, other->permissions_);
  std::swap(flush_, other->flush_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PermissionQuery::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PermissionQuery_descriptor_;
  metadata.reflection = PermissionQuery_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PermissionQuery

// optional uint32 channel_id = 1;
bool PermissionQuery::has_channel_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void PermissionQuery::set_has_channel_id() {
  _has_bits_[0] |= 0x00000001u;
}
void PermissionQuery::clear_has_channel_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void PermissionQuery::clear_channel_id() {
  channel_id_ = 0u;
  clear_has_channel_id();
}
 ::google::protobuf::uint32 PermissionQuery::channel_id() const {
  // @@protoc_insertion_point(field_get:MumbleProto.PermissionQuery.channel_id)
  return channel_id_;
}
 void PermissionQuery::set_channel_id(::google::protobuf::uint32 value) {
  set_has_channel_id();
  channel_id_ = value;
  // @@protoc_insertion_point(field_set:MumbleProto.PermissionQuery.channel_id)
}

// optional uint32 permissions = 2;
bool PermissionQuery::has_permissions() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void PermissionQuery::set_has_permissions() {
  _has_bits_[0] |= 0x00000002u;
}
void PermissionQuery::clear_has_permissions() {
  _has_bits_[0] &= ~0x00000002u;
}
void PermissionQuery::clear_permissions() {
  permissions_ = 0u;
  clear_has_permissions();
}
 ::google::protobuf::uint32 PermissionQuery::permissions() const {
  // @@protoc_insertion_point(field_get:MumbleProto.PermissionQuery.permissions)
  return permissions_;
}
 void PermissionQuery::set_permissions(::google::protobuf::uint32 value) {
  set_has_permissions();
  permissions_ = value;
  // @@protoc_insertion_point(field_set:MumbleProto.PermissionQuery.permissions)
}

// optional bool flush = 3 [default = false];
bool PermissionQuery::has_flush() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void PermissionQuery::set_has_flush() {
  _has_bits_[0] |= 0x00000004u;
}
void PermissionQuery::clear_has_flush() {
  _has_bits_[0] &= ~0x00000004u;
}
void PermissionQuery::clear_flush() {
  flush_ = false;
  clear_has_flush();
}
 bool PermissionQuery::flush() const {
  // @@protoc_insertion_point(field_get:MumbleProto.PermissionQuery.flush)
  return flush_;
}
 void PermissionQuery::set_flush(bool value) {
  set_has_flush();
  flush_ = value;
  // @@protoc_insertion_point(field_set:MumbleProto.PermissionQuery.flush)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CodecVersion::kAlphaFieldNumber;
const int CodecVersion::kBetaFieldNumber;
const int CodecVersion::kPreferAlphaFieldNumber;
const int CodecVersion::kOpusFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CodecVersion::CodecVersion()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MumbleProto.CodecVersion)
}

void CodecVersion::InitAsDefaultInstance() {
}

CodecVersion::CodecVersion(const CodecVersion& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MumbleProto.CodecVersion)
}

void CodecVersion::SharedCtor() {
  _cached_size_ = 0;
  alpha_ = 0;
  beta_ = 0;
  prefer_alpha_ = true;
  opus_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CodecVersion::~CodecVersion() {
  // @@protoc_insertion_point(destructor:MumbleProto.CodecVersion)
  SharedDtor();
}

void CodecVersion::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CodecVersion::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CodecVersion::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CodecVersion_descriptor_;
}

const CodecVersion& CodecVersion::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Mumble_2eproto();
  return *default_instance_;
}

CodecVersion* CodecVersion::default_instance_ = NULL;

CodecVersion* CodecVersion::New(::google::protobuf::Arena* arena) const {
  CodecVersion* n = new CodecVersion;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CodecVersion::Clear() {
// @@protoc_insertion_point(message_clear_start:MumbleProto.CodecVersion)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(CodecVersion, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<CodecVersion*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 15u) {
    ZR_(alpha_, beta_);
    prefer_alpha_ = true;
    opus_ = false;
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool CodecVersion::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MumbleProto.CodecVersion)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 alpha = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &alpha_)));
          set_has_alpha();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_beta;
        break;
      }

      // required int32 beta = 2;
      case 2: {
        if (tag == 16) {
         parse_beta:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &beta_)));
          set_has_beta();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_prefer_alpha;
        break;
      }

      // required bool prefer_alpha = 3 [default = true];
      case 3: {
        if (tag == 24) {
         parse_prefer_alpha:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &prefer_alpha_)));
          set_has_prefer_alpha();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_opus;
        break;
      }

      // optional bool opus = 4 [default = false];
      case 4: {
        if (tag == 32) {
         parse_opus:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &opus_)));
          set_has_opus();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MumbleProto.CodecVersion)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MumbleProto.CodecVersion)
  return false;
#undef DO_
}

void CodecVersion::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MumbleProto.CodecVersion)
  // required int32 alpha = 1;
  if (has_alpha()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->alpha(), output);
  }

  // required int32 beta = 2;
  if (has_beta()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->beta(), output);
  }

  // required bool prefer_alpha = 3 [default = true];
  if (has_prefer_alpha()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->prefer_alpha(), output);
  }

  // optional bool opus = 4 [default = false];
  if (has_opus()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->opus(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MumbleProto.CodecVersion)
}

::google::protobuf::uint8* CodecVersion::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MumbleProto.CodecVersion)
  // required int32 alpha = 1;
  if (has_alpha()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->alpha(), target);
  }

  // required int32 beta = 2;
  if (has_beta()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->beta(), target);
  }

  // required bool prefer_alpha = 3 [default = true];
  if (has_prefer_alpha()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->prefer_alpha(), target);
  }

  // optional bool opus = 4 [default = false];
  if (has_opus()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->opus(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MumbleProto.CodecVersion)
  return target;
}

int CodecVersion::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:MumbleProto.CodecVersion)
  int total_size = 0;

  if (has_alpha()) {
    // required int32 alpha = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->alpha());
  }

  if (has_beta()) {
    // required int32 beta = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->beta());
  }

  if (has_prefer_alpha()) {
    // required bool prefer_alpha = 3 [default = true];
    total_size += 1 + 1;
  }

  return total_size;
}
int CodecVersion::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:MumbleProto.CodecVersion)
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required int32 alpha = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->alpha());

    // required int32 beta = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->beta());

    // required bool prefer_alpha = 3 [default = true];
    total_size += 1 + 1;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // optional bool opus = 4 [default = false];
  if (has_opus()) {
    total_size += 1 + 1;
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CodecVersion::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MumbleProto.CodecVersion)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const CodecVersion* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CodecVersion>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MumbleProto.CodecVersion)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MumbleProto.CodecVersion)
    MergeFrom(*source);
  }
}

void CodecVersion::MergeFrom(const CodecVersion& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MumbleProto.CodecVersion)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_alpha()) {
      set_alpha(from.alpha());
    }
    if (from.has_beta()) {
      set_beta(from.beta());
    }
    if (from.has_prefer_alpha()) {
      set_prefer_alpha(from.prefer_alpha());
    }
    if (from.has_opus()) {
      set_opus(from.opus());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void CodecVersion::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MumbleProto.CodecVersion)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CodecVersion::CopyFrom(const CodecVersion& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MumbleProto.CodecVersion)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CodecVersion::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void CodecVersion::Swap(CodecVersion* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CodecVersion::InternalSwap(CodecVersion* other) {
  std::swap(alpha_, other->alpha_);
  std::swap(beta_, other->beta_);
  std::swap(prefer_alpha_, other->prefer_alpha_);
  std::swap(opus_, other->opus_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CodecVersion::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CodecVersion_descriptor_;
  metadata.reflection = CodecVersion_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CodecVersion

// required int32 alpha = 1;
bool CodecVersion::has_alpha() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CodecVersion::set_has_alpha() {
  _has_bits_[0] |= 0x00000001u;
}
void CodecVersion::clear_has_alpha() {
  _has_bits_[0] &= ~0x00000001u;
}
void CodecVersion::clear_alpha() {
  alpha_ = 0;
  clear_has_alpha();
}
 ::google::protobuf::int32 CodecVersion::alpha() const {
  // @@protoc_insertion_point(field_get:MumbleProto.CodecVersion.alpha)
  return alpha_;
}
 void CodecVersion::set_alpha(::google::protobuf::int32 value) {
  set_has_alpha();
  alpha_ = value;
  // @@protoc_insertion_point(field_set:MumbleProto.CodecVersion.alpha)
}

// required int32 beta = 2;
bool CodecVersion::has_beta() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CodecVersion::set_has_beta() {
  _has_bits_[0] |= 0x00000002u;
}
void CodecVersion::clear_has_beta() {
  _has_bits_[0] &= ~0x00000002u;
}
void CodecVersion::clear_beta() {
  beta_ = 0;
  clear_has_beta();
}
 ::google::protobuf::int32 CodecVersion::beta() const {
  // @@protoc_insertion_point(field_get:MumbleProto.CodecVersion.beta)
  return beta_;
}
 void CodecVersion::set_beta(::google::protobuf::int32 value) {
  set_has_beta();
  beta_ = value;
  // @@protoc_insertion_point(field_set:MumbleProto.CodecVersion.beta)
}

// required bool prefer_alpha = 3 [default = true];
bool CodecVersion::has_prefer_alpha() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CodecVersion::set_has_prefer_alpha() {
  _has_bits_[0] |= 0x00000004u;
}
void CodecVersion::clear_has_prefer_alpha() {
  _has_bits_[0] &= ~0x00000004u;
}
void CodecVersion::clear_prefer_alpha() {
  prefer_alpha_ = true;
  clear_has_prefer_alpha();
}
 bool CodecVersion::prefer_alpha() const {
  // @@protoc_insertion_point(field_get:MumbleProto.CodecVersion.prefer_alpha)
  return prefer_alpha_;
}
 void CodecVersion::set_prefer_alpha(bool value) {
  set_has_prefer_alpha();
  prefer_alpha_ = value;
  // @@protoc_insertion_point(field_set:MumbleProto.CodecVersion.prefer_alpha)
}

// optional bool opus = 4 [default = false];
bool CodecVersion::has_opus() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CodecVersion::set_has_opus() {
  _has_bits_[0] |= 0x00000008u;
}
void CodecVersion::clear_has_opus() {
  _has_bits_[0] &= ~0x00000008u;
}
void CodecVersion::clear_opus() {
  opus_ = false;
  clear_has_opus();
}
 bool CodecVersion::opus() const {
  // @@protoc_insertion_point(field_get:MumbleProto.CodecVersion.opus)
  return opus_;
}
 void CodecVersion::set_opus(bool value) {
  set_has_opus();
  opus_ = value;
  // @@protoc_insertion_point(field_set:MumbleProto.CodecVersion.opus)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UserStats_Stats::kGoodFieldNumber;
const int UserStats_Stats::kLateFieldNumber;
const int UserStats_Stats::kLostFieldNumber;
const int UserStats_Stats::kResyncFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UserStats_Stats::UserStats_Stats()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MumbleProto.UserStats.Stats)
}

void UserStats_Stats::InitAsDefaultInstance() {
}

UserStats_Stats::UserStats_Stats(const UserStats_Stats& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MumbleProto.UserStats.Stats)
}

void UserStats_Stats::SharedCtor() {
  _cached_size_ = 0;
  good_ = 0u;
  late_ = 0u;
  lost_ = 0u;
  resync_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UserStats_Stats::~UserStats_Stats() {
  // @@protoc_insertion_point(destructor:MumbleProto.UserStats.Stats)
  SharedDtor();
}

void UserStats_Stats::SharedDtor() {
  if (this != default_instance_) {
  }
}

void UserStats_Stats::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UserStats_Stats::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UserStats_Stats_descriptor_;
}

const UserStats_Stats& UserStats_Stats::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Mumble_2eproto();
  return *default_instance_;
}

UserStats_Stats* UserStats_Stats::default_instance_ = NULL;

UserStats_Stats* UserStats_Stats::New(::google::protobuf::Arena* arena) const {
  UserStats_Stats* n = new UserStats_Stats;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void UserStats_Stats::Clear() {
// @@protoc_insertion_point(message_clear_start:MumbleProto.UserStats.Stats)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(UserStats_Stats, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<UserStats_Stats*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(good_, resync_);

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool UserStats_Stats::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MumbleProto.UserStats.Stats)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 good = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &good_)));
          set_has_good();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_late;
        break;
      }

      // optional uint32 late = 2;
      case 2: {
        if (tag == 16) {
         parse_late:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &late_)));
          set_has_late();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_lost;
        break;
      }

      // optional uint32 lost = 3;
      case 3: {
        if (tag == 24) {
         parse_lost:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &lost_)));
          set_has_lost();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_resync;
        break;
      }

      // optional uint32 resync = 4;
      case 4: {
        if (tag == 32) {
         parse_resync:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &resync_)));
          set_has_resync();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MumbleProto.UserStats.Stats)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MumbleProto.UserStats.Stats)
  return false;
#undef DO_
}

void UserStats_Stats::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MumbleProto.UserStats.Stats)
  // optional uint32 good = 1;
  if (has_good()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->good(), output);
  }

  // optional uint32 late = 2;
  if (has_late()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->late(), output);
  }

  // optional uint32 lost = 3;
  if (has_lost()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->lost(), output);
  }

  // optional uint32 resync = 4;
  if (has_resync()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->resync(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MumbleProto.UserStats.Stats)
}

::google::protobuf::uint8* UserStats_Stats::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MumbleProto.UserStats.Stats)
  // optional uint32 good = 1;
  if (has_good()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->good(), target);
  }

  // optional uint32 late = 2;
  if (has_late()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->late(), target);
  }

  // optional uint32 lost = 3;
  if (has_lost()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->lost(), target);
  }

  // optional uint32 resync = 4;
  if (has_resync()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->resync(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MumbleProto.UserStats.Stats)
  return target;
}

int UserStats_Stats::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:MumbleProto.UserStats.Stats)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 15u) {
    // optional uint32 good = 1;
    if (has_good()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->good());
    }

    // optional uint32 late = 2;
    if (has_late()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->late());
    }

    // optional uint32 lost = 3;
    if (has_lost()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->lost());
    }

    // optional uint32 resync = 4;
    if (has_resync()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->resync());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserStats_Stats::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MumbleProto.UserStats.Stats)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const UserStats_Stats* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const UserStats_Stats>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MumbleProto.UserStats.Stats)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MumbleProto.UserStats.Stats)
    MergeFrom(*source);
  }
}

void UserStats_Stats::MergeFrom(const UserStats_Stats& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MumbleProto.UserStats.Stats)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_good()) {
      set_good(from.good());
    }
    if (from.has_late()) {
      set_late(from.late());
    }
    if (from.has_lost()) {
      set_lost(from.lost());
    }
    if (from.has_resync()) {
      set_resync(from.resync());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void UserStats_Stats::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MumbleProto.UserStats.Stats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserStats_Stats::CopyFrom(const UserStats_Stats& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MumbleProto.UserStats.Stats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserStats_Stats::IsInitialized() const {

  return true;
}

void UserStats_Stats::Swap(UserStats_Stats* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UserStats_Stats::InternalSwap(UserStats_Stats* other) {
  std::swap(good_, other->good_);
  std::swap(late_, other->late_);
  std::swap(lost_, other->lost_);
  std::swap(resync_, other->resync_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata UserStats_Stats::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UserStats_Stats_descriptor_;
  metadata.reflection = UserStats_Stats_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UserStats::kSessionFieldNumber;
const int UserStats::kStatsOnlyFieldNumber;
const int UserStats::kCertificatesFieldNumber;
const int UserStats::kFromClientFieldNumber;
const int UserStats::kFromServerFieldNumber;
const int UserStats::kUdpPacketsFieldNumber;
const int UserStats::kTcpPacketsFieldNumber;
const int UserStats::kUdpPingAvgFieldNumber;
const int UserStats::kUdpPingVarFieldNumber;
const int UserStats::kTcpPingAvgFieldNumber;
const int UserStats::kTcpPingVarFieldNumber;
const int UserStats::kVersionFieldNumber;
const int UserStats::kCeltVersionsFieldNumber;
const int UserStats::kAddressFieldNumber;
const int UserStats::kBandwidthFieldNumber;
const int UserStats::kOnlinesecsFieldNumber;
const int UserStats::kIdlesecsFieldNumber;
const int UserStats::kStrongCertificateFieldNumber;
const int UserStats::kOpusFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UserStats::UserStats()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MumbleProto.UserStats)
}

void UserStats::InitAsDefaultInstance() {
  from_client_ = const_cast< ::MumbleProto::UserStats_Stats*>(&::MumbleProto::UserStats_Stats::default_instance());
  from_server_ = const_cast< ::MumbleProto::UserStats_Stats*>(&::MumbleProto::UserStats_Stats::default_instance());
  version_ = const_cast< ::MumbleProto::Version*>(&::MumbleProto::Version::default_instance());
}

UserStats::UserStats(const UserStats& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MumbleProto.UserStats)
}

void UserStats::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  session_ = 0u;
  stats_only_ = false;
  from_client_ = NULL;
  from_server_ = NULL;
  udp_packets_ = 0u;
  tcp_packets_ = 0u;
  udp_ping_avg_ = 0;
  udp_ping_var_ = 0;
  tcp_ping_avg_ = 0;
  tcp_ping_var_ = 0;
  version_ = NULL;
  address_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  bandwidth_ = 0u;
  onlinesecs_ = 0u;
  idlesecs_ = 0u;
  strong_certificate_ = false;
  opus_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UserStats::~UserStats() {
  // @@protoc_insertion_point(destructor:MumbleProto.UserStats)
  SharedDtor();
}

void UserStats::SharedDtor() {
  address_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
    delete from_client_;
    delete from_server_;
    delete version_;
  }
}

void UserStats::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UserStats::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UserStats_descriptor_;
}

const UserStats& UserStats::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Mumble_2eproto();
  return *default_instance_;
}

UserStats* UserStats::default_instance_ = NULL;

UserStats* UserStats::New(::google::protobuf::Arena* arena) const {
  UserStats* n = new UserStats;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void UserStats::Clear() {
// @@protoc_insertion_point(message_clear_start:MumbleProto.UserStats)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(UserStats, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<UserStats*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 251u) {
    ZR_(session_, udp_packets_);
    ZR_(tcp_packets_, udp_ping_avg_);
    stats_only_ = false;
    if (has_from_client()) {
      if (from_client_ != NULL) from_client_->::MumbleProto::UserStats_Stats::Clear();
    }
    if (has_from_server()) {
      if (from_server_ != NULL) from_server_->::MumbleProto::UserStats_Stats::Clear();
    }
  }
  if (_has_bits_[8 / 32] & 61184u) {
    ZR_(udp_ping_var_, tcp_ping_avg_);
    ZR_(bandwidth_, onlinesecs_);
    tcp_ping_var_ = 0;
    if (has_version()) {
      if (version_ != NULL) version_->::MumbleProto::Version::Clear();
    }
    if (has_address()) {
      address_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  if (_has_bits_[16 / 32] & 458752u) {
    ZR_(strong_certificate_, opus_);
    idlesecs_ = 0u;
  }

#undef ZR_HELPER_
#undef ZR_

  certificates_.Clear();
  celt_versions_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool UserStats::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MumbleProto.UserStats)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 session = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &session_)));
          set_has_session();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_stats_only;
        break;
      }

      // optional bool stats_only = 2 [default = false];
      case 2: {
        if (tag == 16) {
         parse_stats_only:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &stats_only_)));
          set_has_stats_only();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_certificates;
        break;
      }

      // repeated bytes certificates = 3;
      case 3: {
        if (tag == 26) {
         parse_certificates:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_certificates()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_certificates;
        if (input->ExpectTag(34)) goto parse_from_client;
        break;
      }

      // optional .MumbleProto.UserStats.Stats from_client = 4;
      case 4: {
        if (tag == 34) {
         parse_from_client:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_from_client()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_from_server;
        break;
      }

      // optional .MumbleProto.UserStats.Stats from_server = 5;
      case 5: {
        if (tag == 42) {
         parse_from_server:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_from_server()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_udp_packets;
        break;
      }

      // optional uint32 udp_packets = 6;
      case 6: {
        if (tag == 48) {
         parse_udp_packets:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &udp_packets_)));
          set_has_udp_packets();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_tcp_packets;
        break;
      }

      // optional uint32 tcp_packets = 7;
      case 7: {
        if (tag == 56) {
         parse_tcp_packets:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tcp_packets_)));
          set_has_tcp_packets();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(69)) goto parse_udp_ping_avg;
        break;
      }

      // optional float udp_ping_avg = 8;
      case 8: {
        if (tag == 69) {
         parse_udp_ping_avg:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &udp_ping_avg_)));
          set_has_udp_ping_avg();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(77)) goto parse_udp_ping_var;
        break;
      }

      // optional float udp_ping_var = 9;
      case 9: {
        if (tag == 77) {
         parse_udp_ping_var:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &udp_ping_var_)));
          set_has_udp_ping_var();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(85)) goto parse_tcp_ping_avg;
        break;
      }

      // optional float tcp_ping_avg = 10;
      case 10: {
        if (tag == 85) {
         parse_tcp_ping_avg:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &tcp_ping_avg_)));
          set_has_tcp_ping_avg();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(93)) goto parse_tcp_ping_var;
        break;
      }

      // optional float tcp_ping_var = 11;
      case 11: {
        if (tag == 93) {
         parse_tcp_ping_var:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &tcp_ping_var_)));
          set_has_tcp_ping_var();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_version;
        break;
      }

      // optional .MumbleProto.Version version = 12;
      case 12: {
        if (tag == 98) {
         parse_version:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_version()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_celt_versions;
        break;
      }

      // repeated int32 celt_versions = 13;
      case 13: {
        if (tag == 104) {
         parse_celt_versions:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 104, input, this->mutable_celt_versions())));
        } else if (tag == 106) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_celt_versions())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_celt_versions;
        if (input->ExpectTag(114)) goto parse_address;
        break;
      }

      // optional bytes address = 14;
      case 14: {
        if (tag == 114) {
         parse_address:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_address()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(120)) goto parse_bandwidth;
        break;
      }

      // optional uint32 bandwidth = 15;
      case 15: {
        if (tag == 120) {
         parse_bandwidth:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bandwidth_)));
          set_has_bandwidth();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(128)) goto parse_onlinesecs;
        break;
      }

      // optional uint32 onlinesecs = 16;
      case 16: {
        if (tag == 128) {
         parse_onlinesecs:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &onlinesecs_)));
          set_has_onlinesecs();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(136)) goto parse_idlesecs;
        break;
      }

      // optional uint32 idlesecs = 17;
      case 17: {
        if (tag == 136) {
         parse_idlesecs:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &idlesecs_)));
          set_has_idlesecs();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(144)) goto parse_strong_certificate;
        break;
      }

      // optional bool strong_certificate = 18 [default = false];
      case 18: {
        if (tag == 144) {
         parse_strong_certificate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &strong_certificate_)));
          set_has_strong_certificate();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(152)) goto parse_opus;
        break;
      }

      // optional bool opus = 19 [default = false];
      case 19: {
        if (tag == 152) {
         parse_opus:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &opus_)));
          set_has_opus();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MumbleProto.UserStats)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MumbleProto.UserStats)
  return false;
#undef DO_
}

void UserStats::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MumbleProto.UserStats)
  // optional uint32 session = 1;
  if (has_session()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->session(), output);
  }

  // optional bool stats_only = 2 [default = false];
  if (has_stats_only()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->stats_only(), output);
  }

  // repeated bytes certificates = 3;
  for (int i = 0; i < this->certificates_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->certificates(i), output);
  }

  // optional .MumbleProto.UserStats.Stats from_client = 4;
  if (has_from_client()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->from_client_, output);
  }

  // optional .MumbleProto.UserStats.Stats from_server = 5;
  if (has_from_server()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->from_server_, output);
  }

  // optional uint32 udp_packets = 6;
  if (has_udp_packets()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->udp_packets(), output);
  }

  // optional uint32 tcp_packets = 7;
  if (has_tcp_packets()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->tcp_packets(), output);
  }

  // optional float udp_ping_avg = 8;
  if (has_udp_ping_avg()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->udp_ping_avg(), output);
  }

  // optional float udp_ping_var = 9;
  if (has_udp_ping_var()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(9, this->udp_ping_var(), output);
  }

  // optional float tcp_ping_avg = 10;
  if (has_tcp_ping_avg()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(10, this->tcp_ping_avg(), output);
  }

  // optional float tcp_ping_var = 11;
  if (has_tcp_ping_var()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(11, this->tcp_ping_var(), output);
  }

  // optional .MumbleProto.Version version = 12;
  if (has_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, *this->version_, output);
  }

  // repeated int32 celt_versions = 13;
  for (int i = 0; i < this->celt_versions_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      13, this->celt_versions(i), output);
  }

  // optional bytes address = 14;
  if (has_address()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      14, this->address(), output);
  }

  // optional uint32 bandwidth = 15;
  if (has_bandwidth()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(15, this->bandwidth(), output);
  }

  // optional uint32 onlinesecs = 16;
  if (has_onlinesecs()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(16, this->onlinesecs(), output);
  }

  // optional uint32 idlesecs = 17;
  if (has_idlesecs()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(17, this->idlesecs(), output);
  }

  // optional bool strong_certificate = 18 [default = false];
  if (has_strong_certificate()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(18, this->strong_certificate(), output);
  }

  // optional bool opus = 19 [default = false];
  if (has_opus()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(19, this->opus(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MumbleProto.UserStats)
}

::google::protobuf::uint8* UserStats::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MumbleProto.UserStats)
  // optional uint32 session = 1;
  if (has_session()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->session(), target);
  }

  // optional bool stats_only = 2 [default = false];
  if (has_stats_only()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->stats_only(), target);
  }

  // repeated bytes certificates = 3;
  for (int i = 0; i < this->certificates_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBytesToArray(3, this->certificates(i), target);
  }

  // optional .MumbleProto.UserStats.Stats from_client = 4;
  if (has_from_client()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->from_client_, false, target);
  }

  // optional .MumbleProto.UserStats.Stats from_server = 5;
  if (has_from_server()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *this->from_server_, false, target);
  }

  // optional uint32 udp_packets = 6;
  if (has_udp_packets()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->udp_packets(), target);
  }

  // optional uint32 tcp_packets = 7;
  if (has_tcp_packets()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->tcp_packets(), target);
  }

  // optional float udp_ping_avg = 8;
  if (has_udp_ping_avg()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(8, this->udp_ping_avg(), target);
  }

  // optional float udp_ping_var = 9;
  if (has_udp_ping_var()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(9, this->udp_ping_var(), target);
  }

  // optional float tcp_ping_avg = 10;
  if (has_tcp_ping_avg()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(10, this->tcp_ping_avg(), target);
  }

  // optional float tcp_ping_var = 11;
  if (has_tcp_ping_var()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(11, this->tcp_ping_var(), target);
  }

  // optional .MumbleProto.Version version = 12;
  if (has_version()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        12, *this->version_, false, target);
  }

  // repeated int32 celt_versions = 13;
  for (int i = 0; i < this->celt_versions_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(13, this->celt_versions(i), target);
  }

  // optional bytes address = 14;
  if (has_address()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        14, this->address(), target);
  }

  // optional uint32 bandwidth = 15;
  if (has_bandwidth()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(15, this->bandwidth(), target);
  }

  // optional uint32 onlinesecs = 16;
  if (has_onlinesecs()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(16, this->onlinesecs(), target);
  }

  // optional uint32 idlesecs = 17;
  if (has_idlesecs()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(17, this->idlesecs(), target);
  }

  // optional bool strong_certificate = 18 [default = false];
  if (has_strong_certificate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(18, this->strong_certificate(), target);
  }

  // optional bool opus = 19 [default = false];
  if (has_opus()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(19, this->opus(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MumbleProto.UserStats)
  return target;
}

int UserStats::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:MumbleProto.UserStats)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 251u) {
    // optional uint32 session = 1;
    if (has_session()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->session());
    }

    // optional bool stats_only = 2 [default = false];
    if (has_stats_only()) {
      total_size += 1 + 1;
    }

    // optional .MumbleProto.UserStats.Stats from_client = 4;
    if (has_from_client()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->from_client_);
    }

    // optional .MumbleProto.UserStats.Stats from_server = 5;
    if (has_from_server()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->from_server_);
    }

    // optional uint32 udp_packets = 6;
    if (has_udp_packets()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->udp_packets());
    }

    // optional uint32 tcp_packets = 7;
    if (has_tcp_packets()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tcp_packets());
    }

    // optional float udp_ping_avg = 8;
    if (has_udp_ping_avg()) {
      total_size += 1 + 4;
    }

  }
  if (_has_bits_[8 / 32] & 61184u) {
    // optional float udp_ping_var = 9;
    if (has_udp_ping_var()) {
      total_size += 1 + 4;
    }

    // optional float tcp_ping_avg = 10;
    if (has_tcp_ping_avg()) {
      total_size += 1 + 4;
    }

    // optional float tcp_ping_var = 11;
    if (has_tcp_ping_var()) {
      total_size += 1 + 4;
    }

    // optional .MumbleProto.Version version = 12;
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->version_);
    }

    // optional bytes address = 14;
    if (has_address()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->address());
    }

    // optional uint32 bandwidth = 15;
    if (has_bandwidth()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bandwidth());
    }

    // optional uint32 onlinesecs = 16;
    if (has_onlinesecs()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->onlinesecs());
    }

  }
  if (_has_bits_[16 / 32] & 458752u) {
    // optional uint32 idlesecs = 17;
    if (has_idlesecs()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->idlesecs());
    }

    // optional bool strong_certificate = 18 [default = false];
    if (has_strong_certificate()) {
      total_size += 2 + 1;
    }

    // optional bool opus = 19 [default = false];
    if (has_opus()) {
      total_size += 2 + 1;
    }

  }
  // repeated bytes certificates = 3;
  total_size += 1 * this->certificates_size();
  for (int i = 0; i < this->certificates_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->certificates(i));
  }

  // repeated int32 celt_versions = 13;
  {
    int data_size = 0;
    for (int i = 0; i < this->celt_versions_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->celt_versions(i));
    }
    total_size += 1 * this->celt_versions_size() + data_size;
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserStats::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MumbleProto.UserStats)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const UserStats* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const UserStats>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MumbleProto.UserStats)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MumbleProto.UserStats)
    MergeFrom(*source);
  }
}

void UserStats::MergeFrom(const UserStats& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MumbleProto.UserStats)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  certificates_.MergeFrom(from.certificates_);
  celt_versions_.MergeFrom(from.celt_versions_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_session()) {
      set_session(from.session());
    }
    if (from.has_stats_only()) {
      set_stats_only(from.stats_only());
    }
    if (from.has_from_client()) {
      mutable_from_client()->::MumbleProto::UserStats_Stats::MergeFrom(from.from_client());
    }
    if (from.has_from_server()) {
      mutable_from_server()->::MumbleProto::UserStats_Stats::MergeFrom(from.from_server());
    }
    if (from.has_udp_packets()) {
      set_udp_packets(from.udp_packets());
    }
    if (from.has_tcp_packets()) {
      set_tcp_packets(from.tcp_packets());
    }
    if (from.has_udp_ping_avg()) {
      set_udp_ping_avg(from.udp_ping_avg());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_udp_ping_var()) {
      set_udp_ping_var(from.udp_ping_var());
    }
    if (from.has_tcp_ping_avg()) {
      set_tcp_ping_avg(from.tcp_ping_avg());
    }
    if (from.has_tcp_ping_var()) {
      set_tcp_ping_var(from.tcp_ping_var());
    }
    if (from.has_version()) {
      mutable_version()->::MumbleProto::Version::MergeFrom(from.version());
    }
    if (from.has_address()) {
      set_has_address();
      address_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.address_);
    }
    if (from.has_bandwidth()) {
      set_bandwidth(from.bandwidth());
    }
    if (from.has_onlinesecs()) {
      set_onlinesecs(from.onlinesecs());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_idlesecs()) {
      set_idlesecs(from.idlesecs());
    }
    if (from.has_strong_certificate()) {
      set_strong_certificate(from.strong_certificate());
    }
    if (from.has_opus()) {
      set_opus(from.opus());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void UserStats::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MumbleProto.UserStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserStats::CopyFrom(const UserStats& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MumbleProto.UserStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserStats::IsInitialized() const {

  return true;
}

void UserStats::Swap(UserStats* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UserStats::InternalSwap(UserStats* other) {
  std::swap(session_, other->session_);
  std::swap(stats_only_, other->stats_only_);
  certificates_.UnsafeArenaSwap(&other->certificates_);
  std::swap(from_client_, other->from_client_);
  std::swap(from_server_, other->from_server_);
  std::swap(udp_packets_, other->udp_packets_);
  std::swap(tcp_packets_, other->tcp_packets_);
  std::swap(udp_ping_avg_, other->udp_ping_avg_);
  std::swap(udp_ping_var_, other->udp_ping_var_);
  std::swap(tcp_ping_avg_, other->tcp_ping_avg_);
  std::swap(tcp_ping_var_, other->tcp_ping_var_);
  std::swap(version_, other->version_);
  celt_versions_.UnsafeArenaSwap(&other->celt_versions_);
  address_.Swap(&other->address_);
  std::swap(bandwidth_, other->bandwidth_);
  std::swap(onlinesecs_, other->onlinesecs_);
  std::swap(idlesecs_, other->idlesecs_);
  std::swap(strong_certificate_, other->strong_certificate_);
  std::swap(opus_, other->opus_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata UserStats::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UserStats_descriptor_;
  metadata.reflection = UserStats_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// UserStats_Stats

// optional uint32 good = 1;
bool UserStats_Stats::has_good() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void UserStats_Stats::set_has_good() {
  _has_bits_[0] |= 0x00000001u;
}
void UserStats_Stats::clear_has_good() {
  _has_bits_[0] &= ~0x00000001u;
}
void UserStats_Stats::clear_good() {
  good_ = 0u;
  clear_has_good();
}
 ::google::protobuf::uint32 UserStats_Stats::good() const {
  // @@protoc_insertion_point(field_get:MumbleProto.UserStats.Stats.good)
  return good_;
}
 void UserStats_Stats::set_good(::google::protobuf::uint32 value) {
  set_has_good();
  good_ = value;
  // @@protoc_insertion_point(field_set:MumbleProto.UserStats.Stats.good)
}

// optional uint32 late = 2;
bool UserStats_Stats::has_late() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void UserStats_Stats::set_has_late() {
  _has_bits_[0] |= 0x00000002u;
}
void UserStats_Stats::clear_has_late() {
  _has_bits_[0] &= ~0x00000002u;
}
void UserStats_Stats::clear_late() {
  late_ = 0u;
  clear_has_late();
}
 ::google::protobuf::uint32 UserStats_Stats::late() const {
  // @@protoc_insertion_point(field_get:MumbleProto.UserStats.Stats.late)
  return late_;
}
 void UserStats_Stats::set_late(::google::protobuf::uint32 value) {
  set_has_late();
  late_ = value;
  // @@protoc_insertion_point(field_set:MumbleProto.UserStats.Stats.late)
}

// optional uint32 lost = 3;
bool UserStats_Stats::has_lost() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void UserStats_Stats::set_has_lost() {
  _has_bits_[0] |= 0x00000004u;
}
void UserStats_Stats::clear_has_lost() {
  _has_bits_[0] &= ~0x00000004u;
}
void UserStats_Stats::clear_lost() {
  lost_ = 0u;
  clear_has_lost();
}
 ::google::protobuf::uint32 UserStats_Stats::lost() const {
  // @@protoc_insertion_point(field_get:MumbleProto.UserStats.Stats.lost)
  return lost_;
}
 void UserStats_Stats::set_lost(::google::protobuf::uint32 value) {
  set_has_lost();
  lost_ = value;
  // @@protoc_insertion_point(field_set:MumbleProto.UserStats.Stats.lost)
}

// optional uint32 resync = 4;
bool UserStats_Stats::has_resync() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void UserStats_Stats::set_has_resync() {
  _has_bits_[0] |= 0x00000008u;
}
void UserStats_Stats::clear_has_resync() {
  _has_bits_[0] &= ~0x00000008u;
}
void UserStats_Stats::clear_resync() {
  resync_ = 0u;
  clear_has_resync();
}
 ::google::protobuf::uint32 UserStats_Stats::resync() const {
  // @@protoc_insertion_point(field_get:MumbleProto.UserStats.Stats.resync)
  return resync_;
}
 void UserStats_Stats::set_resync(::google::protobuf::uint32 value) {
  set_has_resync();
  resync_ = value;
  // @@protoc_insertion_point(field_set:MumbleProto.UserStats.Stats.resync)
}

// -------------------------------------------------------------------

// UserStats

// optional uint32 session = 1;
bool UserStats::has_session() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void UserStats::set_has_session() {
  _has_bits_[0] |= 0x00000001u;
}
void UserStats::clear_has_session() {
  _has_bits_[0] &= ~0x00000001u;
}
void UserStats::clear_session() {
  session_ = 0u;
  clear_has_session();
}
 ::google::protobuf::uint32 UserStats::session() const {
  // @@protoc_insertion_point(field_get:MumbleProto.UserStats.session)
  return session_;
}
 void UserStats::set_session(::google::protobuf::uint32 value) {
  set_has_session();
  session_ = value;
  // @@protoc_insertion_point(field_set:MumbleProto.UserStats.session)
}

// optional bool stats_only = 2 [default = false];
bool UserStats::has_stats_only() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void UserStats::set_has_stats_only() {
  _has_bits_[0] |= 0x00000002u;
}
void UserStats::clear_has_stats_only() {
  _has_bits_[0] &= ~0x00000002u;
}
void UserStats::clear_stats_only() {
  stats_only_ = false;
  clear_has_stats_only();
}
 bool UserStats::stats_only() const {
  // @@protoc_insertion_point(field_get:MumbleProto.UserStats.stats_only)
  return stats_only_;
}
 void UserStats::set_stats_only(bool value) {
  set_has_stats_only();
  stats_only_ = value;
  // @@protoc_insertion_point(field_set:MumbleProto.UserStats.stats_only)
}

// repeated bytes certificates = 3;
int UserStats::certificates_size() const {
  return certificates_.size();
}
void UserStats::clear_certificates() {
  certificates_.Clear();
}
 const ::std::string& UserStats::certificates(int index) const {
  // @@protoc_insertion_point(field_get:MumbleProto.UserStats.certificates)
  return certificates_.Get(index);
}
 ::std::string* UserStats::mutable_certificates(int index) {
  // @@protoc_insertion_point(field_mutable:MumbleProto.UserStats.certificates)
  return certificates_.Mutable(index);
}
 void UserStats::set_certificates(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:MumbleProto.UserStats.certificates)
  certificates_.Mutable(index)->assign(value);
}
 void UserStats::set_certificates(int index, const char* value) {
  certificates_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:MumbleProto.UserStats.certificates)
}
 void UserStats::set_certificates(int index, const void* value, size_t size) {
  certificates_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:MumbleProto.UserStats.certificates)
}
 ::std::string* UserStats::add_certificates() {
  // @@protoc_insertion_point(field_add_mutable:MumbleProto.UserStats.certificates)
  return certificates_.Add();
}
 void UserStats::add_certificates(const ::std::string& value) {
  certificates_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:MumbleProto.UserStats.certificates)
}
 void UserStats::add_certificates(const char* value) {
  certificates_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:MumbleProto.UserStats.certificates)
}
 void UserStats::add_certificates(const void* value, size_t size) {
  certificates_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:MumbleProto.UserStats.certificates)
}
 const ::google::protobuf::RepeatedPtrField< ::std::string>&
UserStats::certificates() const {
  // @@protoc_insertion_point(field_list:MumbleProto.UserStats.certificates)
  return certificates_;
}
 ::google::protobuf::RepeatedPtrField< ::std::string>*
UserStats::mutable_certificates() {
  // @@protoc_insertion_point(field_mutable_list:MumbleProto.UserStats.certificates)
  return &certificates_;
}

// optional .MumbleProto.UserStats.Stats from_client = 4;
bool UserStats::has_from_client() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void UserStats::set_has_from_client() {
  _has_bits_[0] |= 0x00000008u;
}
void UserStats::clear_has_from_client() {
  _has_bits_[0] &= ~0x00000008u;
}
void UserStats::clear_from_client() {
  if (from_client_ != NULL) from_client_->::MumbleProto::UserStats_Stats::Clear();
  clear_has_from_client();
}
const ::MumbleProto::UserStats_Stats& UserStats::from_client() const {
  // @@protoc_insertion_point(field_get:MumbleProto.UserStats.from_client)
  return from_client_ != NULL ? *from_client_ : *default_instance_->from_client_;
}
::MumbleProto::UserStats_Stats* UserStats::mutable_from_client() {
  set_has_from_client();
  if (from_client_ == NULL) {
    from_client_ = new ::MumbleProto::UserStats_Stats;
  }
  // @@protoc_insertion_point(field_mutable:MumbleProto.UserStats.from_client)
  return from_client_;
}
::MumbleProto::UserStats_Stats* UserStats::release_from_client() {
  // @@protoc_insertion_point(field_release:MumbleProto.UserStats.from_client)
  clear_has_from_client();
  ::MumbleProto::UserStats_Stats* temp = from_client_;
  from_client_ = NULL;
  return temp;
}
void UserStats::set_allocated_from_client(::MumbleProto::UserStats_Stats* from_client) {
  delete from_client_;
  from_client_ = from_client;
  if (from_client) {
    set_has_from_client();
  } else {
    clear_has_from_client();
  }
  // @@protoc_insertion_point(field_set_allocated:MumbleProto.UserStats.from_client)
}

// optional .MumbleProto.UserStats.Stats from_server = 5;
bool UserStats::has_from_server() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void UserStats::set_has_from_server() {
  _has_bits_[0] |= 0x00000010u;
}
void UserStats::clear_has_from_server() {
  _has_bits_[0] &= ~0x00000010u;
}
void UserStats::clear_from_server() {
  if (from_server_ != NULL) from_server_->::MumbleProto::UserStats_Stats::Clear();
  clear_has_from_server();
}
const ::MumbleProto::UserStats_Stats& UserStats::from_server() const {
  // @@protoc_insertion_point(field_get:MumbleProto.UserStats.from_server)
  return from_server_ != NULL ? *from_server_ : *default_instance_->from_server_;
}
::MumbleProto::UserStats_Stats* UserStats::mutable_from_server() {
  set_has_from_server();
  if (from_server_ == NULL) {
    from_server_ = new ::MumbleProto::UserStats_Stats;
  }
  // @@protoc_insertion_point(field_mutable:MumbleProto.UserStats.from_server)
  return from_server_;
}
::MumbleProto::UserStats_Stats* UserStats::release_from_server() {
  // @@protoc_insertion_point(field_release:MumbleProto.UserStats.from_server)
  clear_has_from_server();
  ::MumbleProto::UserStats_Stats* temp = from_server_;
  from_server_ = NULL;
  return temp;
}
void UserStats::set_allocated_from_server(::MumbleProto::UserStats_Stats* from_server) {
  delete from_server_;
  from_server_ = from_server;
  if (from_server) {
    set_has_from_server();
  } else {
    clear_has_from_server();
  }
  // @@protoc_insertion_point(field_set_allocated:MumbleProto.UserStats.from_server)
}

// optional uint32 udp_packets = 6;
bool UserStats::has_udp_packets() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void UserStats::set_has_udp_packets() {
  _has_bits_[0] |= 0x00000020u;
}
void UserStats::clear_has_udp_packets() {
  _has_bits_[0] &= ~0x00000020u;
}
void UserStats::clear_udp_packets() {
  udp_packets_ = 0u;
  clear_has_udp_packets();
}
 ::google::protobuf::uint32 UserStats::udp_packets() const {
  // @@protoc_insertion_point(field_get:MumbleProto.UserStats.udp_packets)
  return udp_packets_;
}
 void UserStats::set_udp_packets(::google::protobuf::uint32 value) {
  set_has_udp_packets();
  udp_packets_ = value;
  // @@protoc_insertion_point(field_set:MumbleProto.UserStats.udp_packets)
}

// optional uint32 tcp_packets = 7;
bool UserStats::has_tcp_packets() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void UserStats::set_has_tcp_packets() {
  _has_bits_[0] |= 0x00000040u;
}
void UserStats::clear_has_tcp_packets() {
  _has_bits_[0] &= ~0x00000040u;
}
void UserStats::clear_tcp_packets() {
  tcp_packets_ = 0u;
  clear_has_tcp_packets();
}
 ::google::protobuf::uint32 UserStats::tcp_packets() const {
  // @@protoc_insertion_point(field_get:MumbleProto.UserStats.tcp_packets)
  return tcp_packets_;
}
 void UserStats::set_tcp_packets(::google::protobuf::uint32 value) {
  set_has_tcp_packets();
  tcp_packets_ = value;
  // @@protoc_insertion_point(field_set:MumbleProto.UserStats.tcp_packets)
}

// optional float udp_ping_avg = 8;
bool UserStats::has_udp_ping_avg() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void UserStats::set_has_udp_ping_avg() {
  _has_bits_[0] |= 0x00000080u;
}
void UserStats::clear_has_udp_ping_avg() {
  _has_bits_[0] &= ~0x00000080u;
}
void UserStats::clear_udp_ping_avg() {
  udp_ping_avg_ = 0;
  clear_has_udp_ping_avg();
}
 float UserStats::udp_ping_avg() const {
  // @@protoc_insertion_point(field_get:MumbleProto.UserStats.udp_ping_avg)
  return udp_ping_avg_;
}
 void UserStats::set_udp_ping_avg(float value) {
  set_has_udp_ping_avg();
  udp_ping_avg_ = value;
  // @@protoc_insertion_point(field_set:MumbleProto.UserStats.udp_ping_avg)
}

// optional float udp_ping_var = 9;
bool UserStats::has_udp_ping_var() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void UserStats::set_has_udp_ping_var() {
  _has_bits_[0] |= 0x00000100u;
}
void UserStats::clear_has_udp_ping_var() {
  _has_bits_[0] &= ~0x00000100u;
}
void UserStats::clear_udp_ping_var() {
  udp_ping_var_ = 0;
  clear_has_udp_ping_var();
}
 float UserStats::udp_ping_var() const {
  // @@protoc_insertion_point(field_get:MumbleProto.UserStats.udp_ping_var)
  return udp_ping_var_;
}
 void UserStats::set_udp_ping_var(float value) {
  set_has_udp_ping_var();
  udp_ping_var_ = value;
  // @@protoc_insertion_point(field_set:MumbleProto.UserStats.udp_ping_var)
}

// optional float tcp_ping_avg = 10;
bool UserStats::has_tcp_ping_avg() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void UserStats::set_has_tcp_ping_avg() {
  _has_bits_[0] |= 0x00000200u;
}
void UserStats::clear_has_tcp_ping_avg() {
  _has_bits_[0] &= ~0x00000200u;
}
void UserStats::clear_tcp_ping_avg() {
  tcp_ping_avg_ = 0;
  clear_has_tcp_ping_avg();
}
 float UserStats::tcp_ping_avg() const {
  // @@protoc_insertion_point(field_get:MumbleProto.UserStats.tcp_ping_avg)
  return tcp_ping_avg_;
}
 void UserStats::set_tcp_ping_avg(float value) {
  set_has_tcp_ping_avg();
  tcp_ping_avg_ = value;
  // @@protoc_insertion_point(field_set:MumbleProto.UserStats.tcp_ping_avg)
}

// optional float tcp_ping_var = 11;
bool UserStats::has_tcp_ping_var() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void UserStats::set_has_tcp_ping_var() {
  _has_bits_[0] |= 0x00000400u;
}
void UserStats::clear_has_tcp_ping_var() {
  _has_bits_[0] &= ~0x00000400u;
}
void UserStats::clear_tcp_ping_var() {
  tcp_ping_var_ = 0;
  clear_has_tcp_ping_var();
}
 float UserStats::tcp_ping_var() const {
  // @@protoc_insertion_point(field_get:MumbleProto.UserStats.tcp_ping_var)
  return tcp_ping_var_;
}
 void UserStats::set_tcp_ping_var(float value) {
  set_has_tcp_ping_var();
  tcp_ping_var_ = value;
  // @@protoc_insertion_point(field_set:MumbleProto.UserStats.tcp_ping_var)
}

// optional .MumbleProto.Version version = 12;
bool UserStats::has_version() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void UserStats::set_has_version() {
  _has_bits_[0] |= 0x00000800u;
}
void UserStats::clear_has_version() {
  _has_bits_[0] &= ~0x00000800u;
}
void UserStats::clear_version() {
  if (version_ != NULL) version_->::MumbleProto::Version::Clear();
  clear_has_version();
}
const ::MumbleProto::Version& UserStats::version() const {
  // @@protoc_insertion_point(field_get:MumbleProto.UserStats.version)
  return version_ != NULL ? *version_ : *default_instance_->version_;
}
::MumbleProto::Version* UserStats::mutable_version() {
  set_has_version();
  if (version_ == NULL) {
    version_ = new ::MumbleProto::Version;
  }
  // @@protoc_insertion_point(field_mutable:MumbleProto.UserStats.version)
  return version_;
}
::MumbleProto::Version* UserStats::release_version() {
  // @@protoc_insertion_point(field_release:MumbleProto.UserStats.version)
  clear_has_version();
  ::MumbleProto::Version* temp = version_;
  version_ = NULL;
  return temp;
}
void UserStats::set_allocated_version(::MumbleProto::Version* version) {
  delete version_;
  version_ = version;
  if (version) {
    set_has_version();
  } else {
    clear_has_version();
  }
  // @@protoc_insertion_point(field_set_allocated:MumbleProto.UserStats.version)
}

// repeated int32 celt_versions = 13;
int UserStats::celt_versions_size() const {
  return celt_versions_.size();
}
void UserStats::clear_celt_versions() {
  celt_versions_.Clear();
}
 ::google::protobuf::int32 UserStats::celt_versions(int index) const {
  // @@protoc_insertion_point(field_get:MumbleProto.UserStats.celt_versions)
  return celt_versions_.Get(index);
}
 void UserStats::set_celt_versions(int index, ::google::protobuf::int32 value) {
  celt_versions_.Set(index, value);
  // @@protoc_insertion_point(field_set:MumbleProto.UserStats.celt_versions)
}
 void UserStats::add_celt_versions(::google::protobuf::int32 value) {
  celt_versions_.Add(value);
  // @@protoc_insertion_point(field_add:MumbleProto.UserStats.celt_versions)
}
 const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
UserStats::celt_versions() const {
  // @@protoc_insertion_point(field_list:MumbleProto.UserStats.celt_versions)
  return celt_versions_;
}
 ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
UserStats::mutable_celt_versions() {
  // @@protoc_insertion_point(field_mutable_list:MumbleProto.UserStats.celt_versions)
  return &celt_versions_;
}

// optional bytes address = 14;
bool UserStats::has_address() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
void UserStats::set_has_address() {
  _has_bits_[0] |= 0x00002000u;
}
void UserStats::clear_has_address() {
  _has_bits_[0] &= ~0x00002000u;
}
void UserStats::clear_address() {
  address_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_address();
}
 const ::std::string& UserStats::address() const {
  // @@protoc_insertion_point(field_get:MumbleProto.UserStats.address)
  return address_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void UserStats::set_address(const ::std::string& value) {
  set_has_address();
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:MumbleProto.UserStats.address)
}
 void UserStats::set_address(const char* value) {
  set_has_address();
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:MumbleProto.UserStats.address)
}
 void UserStats::set_address(const void* value, size_t size) {
  set_has_address();
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:MumbleProto.UserStats.address)
}
 ::std::string* UserStats::mutable_address() {
  set_has_address();
  // @@protoc_insertion_point(field_mutable:MumbleProto.UserStats.address)
  return address_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* UserStats::release_address() {
  // @@protoc_insertion_point(field_release:MumbleProto.UserStats.address)
  clear_has_address();
  return address_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void UserStats::set_allocated_address(::std::string* address) {
  if (address != NULL) {
    set_has_address();
  } else {
    clear_has_address();
  }
  address_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), address);
  // @@protoc_insertion_point(field_set_allocated:MumbleProto.UserStats.address)
}

// optional uint32 bandwidth = 15;
bool UserStats::has_bandwidth() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
void UserStats::set_has_bandwidth() {
  _has_bits_[0] |= 0x00004000u;
}
void UserStats::clear_has_bandwidth() {
  _has_bits_[0] &= ~0x00004000u;
}
void UserStats::clear_bandwidth() {
  bandwidth_ = 0u;
  clear_has_bandwidth();
}
 ::google::protobuf::uint32 UserStats::bandwidth() const {
  // @@protoc_insertion_point(field_get:MumbleProto.UserStats.bandwidth)
  return bandwidth_;
}
 void UserStats::set_bandwidth(::google::protobuf::uint32 value) {
  set_has_bandwidth();
  bandwidth_ = value;
  // @@protoc_insertion_point(field_set:MumbleProto.UserStats.bandwidth)
}

// optional uint32 onlinesecs = 16;
bool UserStats::has_onlinesecs() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
void UserStats::set_has_onlinesecs() {
  _has_bits_[0] |= 0x00008000u;
}
void UserStats::clear_has_onlinesecs() {
  _has_bits_[0] &= ~0x00008000u;
}
void UserStats::clear_onlinesecs() {
  onlinesecs_ = 0u;
  clear_has_onlinesecs();
}
 ::google::protobuf::uint32 UserStats::onlinesecs() const {
  // @@protoc_insertion_point(field_get:MumbleProto.UserStats.onlinesecs)
  return onlinesecs_;
}
 void UserStats::set_onlinesecs(::google::protobuf::uint32 value) {
  set_has_onlinesecs();
  onlinesecs_ = value;
  // @@protoc_insertion_point(field_set:MumbleProto.UserStats.onlinesecs)
}

// optional uint32 idlesecs = 17;
bool UserStats::has_idlesecs() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
void UserStats::set_has_idlesecs() {
  _has_bits_[0] |= 0x00010000u;
}
void UserStats::clear_has_idlesecs() {
  _has_bits_[0] &= ~0x00010000u;
}
void UserStats::clear_idlesecs() {
  idlesecs_ = 0u;
  clear_has_idlesecs();
}
 ::google::protobuf::uint32 UserStats::idlesecs() const {
  // @@protoc_insertion_point(field_get:MumbleProto.UserStats.idlesecs)
  return idlesecs_;
}
 void UserStats::set_idlesecs(::google::protobuf::uint32 value) {
  set_has_idlesecs();
  idlesecs_ = value;
  // @@protoc_insertion_point(field_set:MumbleProto.UserStats.idlesecs)
}

// optional bool strong_certificate = 18 [default = false];
bool UserStats::has_strong_certificate() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
void UserStats::set_has_strong_certificate() {
  _has_bits_[0] |= 0x00020000u;
}
void UserStats::clear_has_strong_certificate() {
  _has_bits_[0] &= ~0x00020000u;
}
void UserStats::clear_strong_certificate() {
  strong_certificate_ = false;
  clear_has_strong_certificate();
}
 bool UserStats::strong_certificate() const {
  // @@protoc_insertion_point(field_get:MumbleProto.UserStats.strong_certificate)
  return strong_certificate_;
}
 void UserStats::set_strong_certificate(bool value) {
  set_has_strong_certificate();
  strong_certificate_ = value;
  // @@protoc_insertion_point(field_set:MumbleProto.UserStats.strong_certificate)
}

// optional bool opus = 19 [default = false];
bool UserStats::has_opus() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
void UserStats::set_has_opus() {
  _has_bits_[0] |= 0x00040000u;
}
void UserStats::clear_has_opus() {
  _has_bits_[0] &= ~0x00040000u;
}
void UserStats::clear_opus() {
  opus_ = false;
  clear_has_opus();
}
 bool UserStats::opus() const {
  // @@protoc_insertion_point(field_get:MumbleProto.UserStats.opus)
  return opus_;
}
 void UserStats::set_opus(bool value) {
  set_has_opus();
  opus_ = value;
  // @@protoc_insertion_point(field_set:MumbleProto.UserStats.opus)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RequestBlob::kSessionTextureFieldNumber;
const int RequestBlob::kSessionCommentFieldNumber;
const int RequestBlob::kChannelDescriptionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RequestBlob::RequestBlob()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MumbleProto.RequestBlob)
}

void RequestBlob::InitAsDefaultInstance() {
}

RequestBlob::RequestBlob(const RequestBlob& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MumbleProto.RequestBlob)
}

void RequestBlob::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RequestBlob::~RequestBlob() {
  // @@protoc_insertion_point(destructor:MumbleProto.RequestBlob)
  SharedDtor();
}

void RequestBlob::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RequestBlob::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RequestBlob::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RequestBlob_descriptor_;
}

const RequestBlob& RequestBlob::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Mumble_2eproto();
  return *default_instance_;
}

RequestBlob* RequestBlob::default_instance_ = NULL;

RequestBlob* RequestBlob::New(::google::protobuf::Arena* arena) const {
  RequestBlob* n = new RequestBlob;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RequestBlob::Clear() {
// @@protoc_insertion_point(message_clear_start:MumbleProto.RequestBlob)
  session_texture_.Clear();
  session_comment_.Clear();
  channel_description_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool RequestBlob::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MumbleProto.RequestBlob)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 session_texture = 1;
      case 1: {
        if (tag == 8) {
         parse_session_texture:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 8, input, this->mutable_session_texture())));
        } else if (tag == 10) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_session_texture())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(8)) goto parse_session_texture;
        if (input->ExpectTag(16)) goto parse_session_comment;
        break;
      }

      // repeated uint32 session_comment = 2;
      case 2: {
        if (tag == 16) {
         parse_session_comment:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 16, input, this->mutable_session_comment())));
        } else if (tag == 18) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_session_comment())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_session_comment;
        if (input->ExpectTag(24)) goto parse_channel_description;
        break;
      }

      // repeated uint32 channel_description = 3;
      case 3: {
        if (tag == 24) {
         parse_channel_description:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 24, input, this->mutable_channel_description())));
        } else if (tag == 26) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_channel_description())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_channel_description;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MumbleProto.RequestBlob)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MumbleProto.RequestBlob)
  return false;
#undef DO_
}

void RequestBlob::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MumbleProto.RequestBlob)
  // repeated uint32 session_texture = 1;
  for (int i = 0; i < this->session_texture_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      1, this->session_texture(i), output);
  }

  // repeated uint32 session_comment = 2;
  for (int i = 0; i < this->session_comment_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      2, this->session_comment(i), output);
  }

  // repeated uint32 channel_description = 3;
  for (int i = 0; i < this->channel_description_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      3, this->channel_description(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MumbleProto.RequestBlob)
}

::google::protobuf::uint8* RequestBlob::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MumbleProto.RequestBlob)
  // repeated uint32 session_texture = 1;
  for (int i = 0; i < this->session_texture_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(1, this->session_texture(i), target);
  }

  // repeated uint32 session_comment = 2;
  for (int i = 0; i < this->session_comment_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(2, this->session_comment(i), target);
  }

  // repeated uint32 channel_description = 3;
  for (int i = 0; i < this->channel_description_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(3, this->channel_description(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MumbleProto.RequestBlob)
  return target;
}

int RequestBlob::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:MumbleProto.RequestBlob)
  int total_size = 0;

  // repeated uint32 session_texture = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->session_texture_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->session_texture(i));
    }
    total_size += 1 * this->session_texture_size() + data_size;
  }

  // repeated uint32 session_comment = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->session_comment_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->session_comment(i));
    }
    total_size += 1 * this->session_comment_size() + data_size;
  }

  // repeated uint32 channel_description = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->channel_description_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->channel_description(i));
    }
    total_size += 1 * this->channel_description_size() + data_size;
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestBlob::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MumbleProto.RequestBlob)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const RequestBlob* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const RequestBlob>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MumbleProto.RequestBlob)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MumbleProto.RequestBlob)
    MergeFrom(*source);
  }
}

void RequestBlob::MergeFrom(const RequestBlob& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MumbleProto.RequestBlob)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  session_texture_.MergeFrom(from.session_texture_);
  session_comment_.MergeFrom(from.session_comment_);
  channel_description_.MergeFrom(from.channel_description_);
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void RequestBlob::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MumbleProto.RequestBlob)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestBlob::CopyFrom(const RequestBlob& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MumbleProto.RequestBlob)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestBlob::IsInitialized() const {

  return true;
}

void RequestBlob::Swap(RequestBlob* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RequestBlob::InternalSwap(RequestBlob* other) {
  session_texture_.UnsafeArenaSwap(&other->session_texture_);
  session_comment_.UnsafeArenaSwap(&other->session_comment_);
  channel_description_.UnsafeArenaSwap(&other->channel_description_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RequestBlob::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RequestBlob_descriptor_;
  metadata.reflection = RequestBlob_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RequestBlob

// repeated uint32 session_texture = 1;
int RequestBlob::session_texture_size() const {
  return session_texture_.size();
}
void RequestBlob::clear_session_texture() {
  session_texture_.Clear();
}
 ::google::protobuf::uint32 RequestBlob::session_texture(int index) const {
  // @@protoc_insertion_point(field_get:MumbleProto.RequestBlob.session_texture)
  return session_texture_.Get(index);
}
 void RequestBlob::set_session_texture(int index, ::google::protobuf::uint32 value) {
  session_texture_.Set(index, value);
  // @@protoc_insertion_point(field_set:MumbleProto.RequestBlob.session_texture)
}
 void RequestBlob::add_session_texture(::google::protobuf::uint32 value) {
  session_texture_.Add(value);
  // @@protoc_insertion_point(field_add:MumbleProto.RequestBlob.session_texture)
}
 const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
RequestBlob::session_texture() const {
  // @@protoc_insertion_point(field_list:MumbleProto.RequestBlob.session_texture)
  return session_texture_;
}
 ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
RequestBlob::mutable_session_texture() {
  // @@protoc_insertion_point(field_mutable_list:MumbleProto.RequestBlob.session_texture)
  return &session_texture_;
}

// repeated uint32 session_comment = 2;
int RequestBlob::session_comment_size() const {
  return session_comment_.size();
}
void RequestBlob::clear_session_comment() {
  session_comment_.Clear();
}
 ::google::protobuf::uint32 RequestBlob::session_comment(int index) const {
  // @@protoc_insertion_point(field_get:MumbleProto.RequestBlob.session_comment)
  return session_comment_.Get(index);
}
 void RequestBlob::set_session_comment(int index, ::google::protobuf::uint32 value) {
  session_comment_.Set(index, value);
  // @@protoc_insertion_point(field_set:MumbleProto.RequestBlob.session_comment)
}
 void RequestBlob::add_session_comment(::google::protobuf::uint32 value) {
  session_comment_.Add(value);
  // @@protoc_insertion_point(field_add:MumbleProto.RequestBlob.session_comment)
}
 const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
RequestBlob::session_comment() const {
  // @@protoc_insertion_point(field_list:MumbleProto.RequestBlob.session_comment)
  return session_comment_;
}
 ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
RequestBlob::mutable_session_comment() {
  // @@protoc_insertion_point(field_mutable_list:MumbleProto.RequestBlob.session_comment)
  return &session_comment_;
}

// repeated uint32 channel_description = 3;
int RequestBlob::channel_description_size() const {
  return channel_description_.size();
}
void RequestBlob::clear_channel_description() {
  channel_description_.Clear();
}
 ::google::protobuf::uint32 RequestBlob::channel_description(int index) const {
  // @@protoc_insertion_point(field_get:MumbleProto.RequestBlob.channel_description)
  return channel_description_.Get(index);
}
 void RequestBlob::set_channel_description(int index, ::google::protobuf::uint32 value) {
  channel_description_.Set(index, value);
  // @@protoc_insertion_point(field_set:MumbleProto.RequestBlob.channel_description)
}
 void RequestBlob::add_channel_description(::google::protobuf::uint32 value) {
  channel_description_.Add(value);
  // @@protoc_insertion_point(field_add:MumbleProto.RequestBlob.channel_description)
}
 const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
RequestBlob::channel_description() const {
  // @@protoc_insertion_point(field_list:MumbleProto.RequestBlob.channel_description)
  return channel_description_;
}
 ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
RequestBlob::mutable_channel_description() {
  // @@protoc_insertion_point(field_mutable_list:MumbleProto.RequestBlob.channel_description)
  return &channel_description_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ServerConfig::kMaxBandwidthFieldNumber;
const int ServerConfig::kWelcomeTextFieldNumber;
const int ServerConfig::kAllowHtmlFieldNumber;
const int ServerConfig::kMessageLengthFieldNumber;
const int ServerConfig::kImageMessageLengthFieldNumber;
const int ServerConfig::kMaxUsersFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ServerConfig::ServerConfig()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MumbleProto.ServerConfig)
}

void ServerConfig::InitAsDefaultInstance() {
}

ServerConfig::ServerConfig(const ServerConfig& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MumbleProto.ServerConfig)
}

void ServerConfig::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  max_bandwidth_ = 0u;
  welcome_text_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  allow_html_ = false;
  message_length_ = 0u;
  image_message_length_ = 0u;
  max_users_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ServerConfig::~ServerConfig() {
  // @@protoc_insertion_point(destructor:MumbleProto.ServerConfig)
  SharedDtor();
}

void ServerConfig::SharedDtor() {
  welcome_text_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void ServerConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ServerConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ServerConfig_descriptor_;
}

const ServerConfig& ServerConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Mumble_2eproto();
  return *default_instance_;
}

ServerConfig* ServerConfig::default_instance_ = NULL;

ServerConfig* ServerConfig::New(::google::protobuf::Arena* arena) const {
  ServerConfig* n = new ServerConfig;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ServerConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:MumbleProto.ServerConfig)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(ServerConfig, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<ServerConfig*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 63u) {
    ZR_(max_bandwidth_, max_users_);
    if (has_welcome_text()) {
      welcome_text_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool ServerConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MumbleProto.ServerConfig)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 max_bandwidth = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &max_bandwidth_)));
          set_has_max_bandwidth();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_welcome_text;
        break;
      }

      // optional string welcome_text = 2;
      case 2: {
        if (tag == 18) {
         parse_welcome_text:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_welcome_text()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->welcome_text().data(), this->welcome_text().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "MumbleProto.ServerConfig.welcome_text");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_allow_html;
        break;
      }

      // optional bool allow_html = 3;
      case 3: {
        if (tag == 24) {
         parse_allow_html:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &allow_html_)));
          set_has_allow_html();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_message_length;
        break;
      }

      // optional uint32 message_length = 4;
      case 4: {
        if (tag == 32) {
         parse_message_length:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &message_length_)));
          set_has_message_length();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_image_message_length;
        break;
      }

      // optional uint32 image_message_length = 5;
      case 5: {
        if (tag == 40) {
         parse_image_message_length:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &image_message_length_)));
          set_has_image_message_length();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_max_users;
        break;
      }

      // optional uint32 max_users = 6;
      case 6: {
        if (tag == 48) {
         parse_max_users:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &max_users_)));
          set_has_max_users();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MumbleProto.ServerConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MumbleProto.ServerConfig)
  return false;
#undef DO_
}

void ServerConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MumbleProto.ServerConfig)
  // optional uint32 max_bandwidth = 1;
  if (has_max_bandwidth()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->max_bandwidth(), output);
  }

  // optional string welcome_text = 2;
  if (has_welcome_text()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->welcome_text().data(), this->welcome_text().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "MumbleProto.ServerConfig.welcome_text");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->welcome_text(), output);
  }

  // optional bool allow_html = 3;
  if (has_allow_html()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->allow_html(), output);
  }

  // optional uint32 message_length = 4;
  if (has_message_length()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->message_length(), output);
  }

  // optional uint32 image_message_length = 5;
  if (has_image_message_length()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->image_message_length(), output);
  }

  // optional uint32 max_users = 6;
  if (has_max_users()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->max_users(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MumbleProto.ServerConfig)
}

::google::protobuf::uint8* ServerConfig::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MumbleProto.ServerConfig)
  // optional uint32 max_bandwidth = 1;
  if (has_max_bandwidth()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->max_bandwidth(), target);
  }

  // optional string welcome_text = 2;
  if (has_welcome_text()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->welcome_text().data(), this->welcome_text().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "MumbleProto.ServerConfig.welcome_text");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->welcome_text(), target);
  }

  // optional bool allow_html = 3;
  if (has_allow_html()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->allow_html(), target);
  }

  // optional uint32 message_length = 4;
  if (has_message_length()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->message_length(), target);
  }

  // optional uint32 image_message_length = 5;
  if (has_image_message_length()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->image_message_length(), target);
  }

  // optional uint32 max_users = 6;
  if (has_max_users()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->max_users(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MumbleProto.ServerConfig)
  return target;
}

int ServerConfig::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:MumbleProto.ServerConfig)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 63u) {
    // optional uint32 max_bandwidth = 1;
    if (has_max_bandwidth()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->max_bandwidth());
    }

    // optional string welcome_text = 2;
    if (has_welcome_text()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->welcome_text());
    }

    // optional bool allow_html = 3;
    if (has_allow_html()) {
      total_size += 1 + 1;
    }

    // optional uint32 message_length = 4;
    if (has_message_length()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->message_length());
    }

    // optional uint32 image_message_length = 5;
    if (has_image_message_length()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->image_message_length());
    }

    // optional uint32 max_users = 6;
    if (has_max_users()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->max_users());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ServerConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MumbleProto.ServerConfig)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const ServerConfig* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ServerConfig>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MumbleProto.ServerConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MumbleProto.ServerConfig)
    MergeFrom(*source);
  }
}

void ServerConfig::MergeFrom(const ServerConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MumbleProto.ServerConfig)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_max_bandwidth()) {
      set_max_bandwidth(from.max_bandwidth());
    }
    if (from.has_welcome_text()) {
      set_has_welcome_text();
      welcome_text_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.welcome_text_);
    }
    if (from.has_allow_html()) {
      set_allow_html(from.allow_html());
    }
    if (from.has_message_length()) {
      set_message_length(from.message_length());
    }
    if (from.has_image_message_length()) {
      set_image_message_length(from.image_message_length());
    }
    if (from.has_max_users()) {
      set_max_users(from.max_users());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void ServerConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MumbleProto.ServerConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServerConfig::CopyFrom(const ServerConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MumbleProto.ServerConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerConfig::IsInitialized() const {

  return true;
}

void ServerConfig::Swap(ServerConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ServerConfig::InternalSwap(ServerConfig* other) {
  std::swap(max_bandwidth_, other->max_bandwidth_);
  welcome_text_.Swap(&other->welcome_text_);
  std::swap(allow_html_, other->allow_html_);
  std::swap(message_length_, other->message_length_);
  std::swap(image_message_length_, other->image_message_length_);
  std::swap(max_users_, other->max_users_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ServerConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ServerConfig_descriptor_;
  metadata.reflection = ServerConfig_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ServerConfig

// optional uint32 max_bandwidth = 1;
bool ServerConfig::has_max_bandwidth() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ServerConfig::set_has_max_bandwidth() {
  _has_bits_[0] |= 0x00000001u;
}
void ServerConfig::clear_has_max_bandwidth() {
  _has_bits_[0] &= ~0x00000001u;
}
void ServerConfig::clear_max_bandwidth() {
  max_bandwidth_ = 0u;
  clear_has_max_bandwidth();
}
 ::google::protobuf::uint32 ServerConfig::max_bandwidth() const {
  // @@protoc_insertion_point(field_get:MumbleProto.ServerConfig.max_bandwidth)
  return max_bandwidth_;
}
 void ServerConfig::set_max_bandwidth(::google::protobuf::uint32 value) {
  set_has_max_bandwidth();
  max_bandwidth_ = value;
  // @@protoc_insertion_point(field_set:MumbleProto.ServerConfig.max_bandwidth)
}

// optional string welcome_text = 2;
bool ServerConfig::has_welcome_text() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ServerConfig::set_has_welcome_text() {
  _has_bits_[0] |= 0x00000002u;
}
void ServerConfig::clear_has_welcome_text() {
  _has_bits_[0] &= ~0x00000002u;
}
void ServerConfig::clear_welcome_text() {
  welcome_text_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_welcome_text();
}
 const ::std::string& ServerConfig::welcome_text() const {
  // @@protoc_insertion_point(field_get:MumbleProto.ServerConfig.welcome_text)
  return welcome_text_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ServerConfig::set_welcome_text(const ::std::string& value) {
  set_has_welcome_text();
  welcome_text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:MumbleProto.ServerConfig.welcome_text)
}
 void ServerConfig::set_welcome_text(const char* value) {
  set_has_welcome_text();
  welcome_text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:MumbleProto.ServerConfig.welcome_text)
}
 void ServerConfig::set_welcome_text(const char* value, size_t size) {
  set_has_welcome_text();
  welcome_text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:MumbleProto.ServerConfig.welcome_text)
}
 ::std::string* ServerConfig::mutable_welcome_text() {
  set_has_welcome_text();
  // @@protoc_insertion_point(field_mutable:MumbleProto.ServerConfig.welcome_text)
  return welcome_text_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ServerConfig::release_welcome_text() {
  // @@protoc_insertion_point(field_release:MumbleProto.ServerConfig.welcome_text)
  clear_has_welcome_text();
  return welcome_text_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ServerConfig::set_allocated_welcome_text(::std::string* welcome_text) {
  if (welcome_text != NULL) {
    set_has_welcome_text();
  } else {
    clear_has_welcome_text();
  }
  welcome_text_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), welcome_text);
  // @@protoc_insertion_point(field_set_allocated:MumbleProto.ServerConfig.welcome_text)
}

// optional bool allow_html = 3;
bool ServerConfig::has_allow_html() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void ServerConfig::set_has_allow_html() {
  _has_bits_[0] |= 0x00000004u;
}
void ServerConfig::clear_has_allow_html() {
  _has_bits_[0] &= ~0x00000004u;
}
void ServerConfig::clear_allow_html() {
  allow_html_ = false;
  clear_has_allow_html();
}
 bool ServerConfig::allow_html() const {
  // @@protoc_insertion_point(field_get:MumbleProto.ServerConfig.allow_html)
  return allow_html_;
}
 void ServerConfig::set_allow_html(bool value) {
  set_has_allow_html();
  allow_html_ = value;
  // @@protoc_insertion_point(field_set:MumbleProto.ServerConfig.allow_html)
}

// optional uint32 message_length = 4;
bool ServerConfig::has_message_length() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void ServerConfig::set_has_message_length() {
  _has_bits_[0] |= 0x00000008u;
}
void ServerConfig::clear_has_message_length() {
  _has_bits_[0] &= ~0x00000008u;
}
void ServerConfig::clear_message_length() {
  message_length_ = 0u;
  clear_has_message_length();
}
 ::google::protobuf::uint32 ServerConfig::message_length() const {
  // @@protoc_insertion_point(field_get:MumbleProto.ServerConfig.message_length)
  return message_length_;
}
 void ServerConfig::set_message_length(::google::protobuf::uint32 value) {
  set_has_message_length();
  message_length_ = value;
  // @@protoc_insertion_point(field_set:MumbleProto.ServerConfig.message_length)
}

// optional uint32 image_message_length = 5;
bool ServerConfig::has_image_message_length() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void ServerConfig::set_has_image_message_length() {
  _has_bits_[0] |= 0x00000010u;
}
void ServerConfig::clear_has_image_message_length() {
  _has_bits_[0] &= ~0x00000010u;
}
void ServerConfig::clear_image_message_length() {
  image_message_length_ = 0u;
  clear_has_image_message_length();
}
 ::google::protobuf::uint32 ServerConfig::image_message_length() const {
  // @@protoc_insertion_point(field_get:MumbleProto.ServerConfig.image_message_length)
  return image_message_length_;
}
 void ServerConfig::set_image_message_length(::google::protobuf::uint32 value) {
  set_has_image_message_length();
  image_message_length_ = value;
  // @@protoc_insertion_point(field_set:MumbleProto.ServerConfig.image_message_length)
}

// optional uint32 max_users = 6;
bool ServerConfig::has_max_users() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void ServerConfig::set_has_max_users() {
  _has_bits_[0] |= 0x00000020u;
}
void ServerConfig::clear_has_max_users() {
  _has_bits_[0] &= ~0x00000020u;
}
void ServerConfig::clear_max_users() {
  max_users_ = 0u;
  clear_has_max_users();
}
 ::google::protobuf::uint32 ServerConfig::max_users() const {
  // @@protoc_insertion_point(field_get:MumbleProto.ServerConfig.max_users)
  return max_users_;
}
 void ServerConfig::set_max_users(::google::protobuf::uint32 value) {
  set_has_max_users();
  max_users_ = value;
  // @@protoc_insertion_point(field_set:MumbleProto.ServerConfig.max_users)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SuggestConfig::kVersionFieldNumber;
const int SuggestConfig::kPositionalFieldNumber;
const int SuggestConfig::kPushToTalkFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SuggestConfig::SuggestConfig()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MumbleProto.SuggestConfig)
}

void SuggestConfig::InitAsDefaultInstance() {
}

SuggestConfig::SuggestConfig(const SuggestConfig& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MumbleProto.SuggestConfig)
}

void SuggestConfig::SharedCtor() {
  _cached_size_ = 0;
  version_ = 0u;
  positional_ = false;
  push_to_talk_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SuggestConfig::~SuggestConfig() {
  // @@protoc_insertion_point(destructor:MumbleProto.SuggestConfig)
  SharedDtor();
}

void SuggestConfig::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SuggestConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SuggestConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SuggestConfig_descriptor_;
}

const SuggestConfig& SuggestConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Mumble_2eproto();
  return *default_instance_;
}

SuggestConfig* SuggestConfig::default_instance_ = NULL;

SuggestConfig* SuggestConfig::New(::google::protobuf::Arena* arena) const {
  SuggestConfig* n = new SuggestConfig;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SuggestConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:MumbleProto.SuggestConfig)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(SuggestConfig, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<SuggestConfig*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(version_, push_to_talk_);

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool SuggestConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MumbleProto.SuggestConfig)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 version = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &version_)));
          set_has_version();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_positional;
        break;
      }

      // optional bool positional = 2;
      case 2: {
        if (tag == 16) {
         parse_positional:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &positional_)));
          set_has_positional();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_push_to_talk;
        break;
      }

      // optional bool push_to_talk = 3;
      case 3: {
        if (tag == 24) {
         parse_push_to_talk:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &push_to_talk_)));
          set_has_push_to_talk();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MumbleProto.SuggestConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MumbleProto.SuggestConfig)
  return false;
#undef DO_
}

void SuggestConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MumbleProto.SuggestConfig)
  // optional uint32 version = 1;
  if (has_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->version(), output);
  }

  // optional bool positional = 2;
  if (has_positional()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->positional(), output);
  }

  // optional bool push_to_talk = 3;
  if (has_push_to_talk()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->push_to_talk(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MumbleProto.SuggestConfig)
}

::google::protobuf::uint8* SuggestConfig::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MumbleProto.SuggestConfig)
  // optional uint32 version = 1;
  if (has_version()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->version(), target);
  }

  // optional bool positional = 2;
  if (has_positional()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->positional(), target);
  }

  // optional bool push_to_talk = 3;
  if (has_push_to_talk()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->push_to_talk(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MumbleProto.SuggestConfig)
  return target;
}

int SuggestConfig::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:MumbleProto.SuggestConfig)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 7u) {
    // optional uint32 version = 1;
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->version());
    }

    // optional bool positional = 2;
    if (has_positional()) {
      total_size += 1 + 1;
    }

    // optional bool push_to_talk = 3;
    if (has_push_to_talk()) {
      total_size += 1 + 1;
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SuggestConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MumbleProto.SuggestConfig)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const SuggestConfig* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const SuggestConfig>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MumbleProto.SuggestConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MumbleProto.SuggestConfig)
    MergeFrom(*source);
  }
}

void SuggestConfig::MergeFrom(const SuggestConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MumbleProto.SuggestConfig)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_version()) {
      set_version(from.version());
    }
    if (from.has_positional()) {
      set_positional(from.positional());
    }
    if (from.has_push_to_talk()) {
      set_push_to_talk(from.push_to_talk());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void SuggestConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MumbleProto.SuggestConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SuggestConfig::CopyFrom(const SuggestConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MumbleProto.SuggestConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SuggestConfig::IsInitialized() const {

  return true;
}

void SuggestConfig::Swap(SuggestConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SuggestConfig::InternalSwap(SuggestConfig* other) {
  std::swap(version_, other->version_);
  std::swap(positional_, other->positional_);
  std::swap(push_to_talk_, other->push_to_talk_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SuggestConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SuggestConfig_descriptor_;
  metadata.reflection = SuggestConfig_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SuggestConfig

// optional uint32 version = 1;
bool SuggestConfig::has_version() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SuggestConfig::set_has_version() {
  _has_bits_[0] |= 0x00000001u;
}
void SuggestConfig::clear_has_version() {
  _has_bits_[0] &= ~0x00000001u;
}
void SuggestConfig::clear_version() {
  version_ = 0u;
  clear_has_version();
}
 ::google::protobuf::uint32 SuggestConfig::version() const {
  // @@protoc_insertion_point(field_get:MumbleProto.SuggestConfig.version)
  return version_;
}
 void SuggestConfig::set_version(::google::protobuf::uint32 value) {
  set_has_version();
  version_ = value;
  // @@protoc_insertion_point(field_set:MumbleProto.SuggestConfig.version)
}

// optional bool positional = 2;
bool SuggestConfig::has_positional() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void SuggestConfig::set_has_positional() {
  _has_bits_[0] |= 0x00000002u;
}
void SuggestConfig::clear_has_positional() {
  _has_bits_[0] &= ~0x00000002u;
}
void SuggestConfig::clear_positional() {
  positional_ = false;
  clear_has_positional();
}
 bool SuggestConfig::positional() const {
  // @@protoc_insertion_point(field_get:MumbleProto.SuggestConfig.positional)
  return positional_;
}
 void SuggestConfig::set_positional(bool value) {
  set_has_positional();
  positional_ = value;
  // @@protoc_insertion_point(field_set:MumbleProto.SuggestConfig.positional)
}

// optional bool push_to_talk = 3;
bool SuggestConfig::has_push_to_talk() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void SuggestConfig::set_has_push_to_talk() {
  _has_bits_[0] |= 0x00000004u;
}
void SuggestConfig::clear_has_push_to_talk() {
  _has_bits_[0] &= ~0x00000004u;
}
void SuggestConfig::clear_push_to_talk() {
  push_to_talk_ = false;
  clear_has_push_to_talk();
}
 bool SuggestConfig::push_to_talk() const {
  // @@protoc_insertion_point(field_get:MumbleProto.SuggestConfig.push_to_talk)
  return push_to_talk_;
}
 void SuggestConfig::set_push_to_talk(bool value) {
  set_has_push_to_talk();
  push_to_talk_ = value;
  // @@protoc_insertion_point(field_set:MumbleProto.SuggestConfig.push_to_talk)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace MumbleProto

// @@protoc_insertion_point(global_scope)
